// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.6.1
// source: bid.proto

package realtimebidding

import (
	_ "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/struct"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Visibility information for the slot.
type BidRequestLightWeight_AdSlot_SlotVisibility int32

const (
	BidRequestLightWeight_AdSlot_NO_DETECTION   BidRequestLightWeight_AdSlot_SlotVisibility = 0
	BidRequestLightWeight_AdSlot_ABOVE_THE_FOLD BidRequestLightWeight_AdSlot_SlotVisibility = 1
	BidRequestLightWeight_AdSlot_BELOW_THE_FOLD BidRequestLightWeight_AdSlot_SlotVisibility = 2
)

// Enum value maps for BidRequestLightWeight_AdSlot_SlotVisibility.
var (
	BidRequestLightWeight_AdSlot_SlotVisibility_name = map[int32]string{
		0: "NO_DETECTION",
		1: "ABOVE_THE_FOLD",
		2: "BELOW_THE_FOLD",
	}
	BidRequestLightWeight_AdSlot_SlotVisibility_value = map[string]int32{
		"NO_DETECTION":   0,
		"ABOVE_THE_FOLD": 1,
		"BELOW_THE_FOLD": 2,
	}
)

func (x BidRequestLightWeight_AdSlot_SlotVisibility) Enum() *BidRequestLightWeight_AdSlot_SlotVisibility {
	p := new(BidRequestLightWeight_AdSlot_SlotVisibility)
	*p = x
	return p
}

func (x BidRequestLightWeight_AdSlot_SlotVisibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequestLightWeight_AdSlot_SlotVisibility) Descriptor() protoreflect.EnumDescriptor {
	return file_bid_proto_enumTypes[0].Descriptor()
}

func (BidRequestLightWeight_AdSlot_SlotVisibility) Type() protoreflect.EnumType {
	return &file_bid_proto_enumTypes[0]
}

func (x BidRequestLightWeight_AdSlot_SlotVisibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequestLightWeight_AdSlot_SlotVisibility) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequestLightWeight_AdSlot_SlotVisibility(num)
	return nil
}

// Deprecated: Use BidRequestLightWeight_AdSlot_SlotVisibility.Descriptor instead.
func (BidRequestLightWeight_AdSlot_SlotVisibility) EnumDescriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 0}
}

// iFraming state of the ad slot on the webpage where it is present.
type BidRequestLightWeight_AdSlot_IFramingState int32

const (
	BidRequestLightWeight_AdSlot_UNKNOWN_IFRAME_STATE BidRequestLightWeight_AdSlot_IFramingState = 0
	BidRequestLightWeight_AdSlot_NO_IFRAME            BidRequestLightWeight_AdSlot_IFramingState = 1
	BidRequestLightWeight_AdSlot_SAME_DOMAIN_IFRAME   BidRequestLightWeight_AdSlot_IFramingState = 2
	BidRequestLightWeight_AdSlot_CROSS_DOMAIN_IFRAME  BidRequestLightWeight_AdSlot_IFramingState = 3
)

// Enum value maps for BidRequestLightWeight_AdSlot_IFramingState.
var (
	BidRequestLightWeight_AdSlot_IFramingState_name = map[int32]string{
		0: "UNKNOWN_IFRAME_STATE",
		1: "NO_IFRAME",
		2: "SAME_DOMAIN_IFRAME",
		3: "CROSS_DOMAIN_IFRAME",
	}
	BidRequestLightWeight_AdSlot_IFramingState_value = map[string]int32{
		"UNKNOWN_IFRAME_STATE": 0,
		"NO_IFRAME":            1,
		"SAME_DOMAIN_IFRAME":   2,
		"CROSS_DOMAIN_IFRAME":  3,
	}
)

func (x BidRequestLightWeight_AdSlot_IFramingState) Enum() *BidRequestLightWeight_AdSlot_IFramingState {
	p := new(BidRequestLightWeight_AdSlot_IFramingState)
	*p = x
	return p
}

func (x BidRequestLightWeight_AdSlot_IFramingState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequestLightWeight_AdSlot_IFramingState) Descriptor() protoreflect.EnumDescriptor {
	return file_bid_proto_enumTypes[1].Descriptor()
}

func (BidRequestLightWeight_AdSlot_IFramingState) Type() protoreflect.EnumType {
	return &file_bid_proto_enumTypes[1]
}

func (x BidRequestLightWeight_AdSlot_IFramingState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequestLightWeight_AdSlot_IFramingState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequestLightWeight_AdSlot_IFramingState(num)
	return nil
}

// Deprecated: Use BidRequestLightWeight_AdSlot_IFramingState.Descriptor instead.
func (BidRequestLightWeight_AdSlot_IFramingState) EnumDescriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 1}
}

// iFrame depth of the ad slot on the webpage where it is present.
// Currently only set for video ad requests.
type BidRequestLightWeight_AdSlot_IFramingDepth int32

const (
	BidRequestLightWeight_AdSlot_UNKNOWN_IFRAME_DEPTH BidRequestLightWeight_AdSlot_IFramingDepth = 0
	BidRequestLightWeight_AdSlot_NOT_IN_IFRAME        BidRequestLightWeight_AdSlot_IFramingDepth = 1
	BidRequestLightWeight_AdSlot_ONE_IFRAME           BidRequestLightWeight_AdSlot_IFramingDepth = 2
	BidRequestLightWeight_AdSlot_MULTIPLE_IFRAME      BidRequestLightWeight_AdSlot_IFramingDepth = 3
)

// Enum value maps for BidRequestLightWeight_AdSlot_IFramingDepth.
var (
	BidRequestLightWeight_AdSlot_IFramingDepth_name = map[int32]string{
		0: "UNKNOWN_IFRAME_DEPTH",
		1: "NOT_IN_IFRAME",
		2: "ONE_IFRAME",
		3: "MULTIPLE_IFRAME",
	}
	BidRequestLightWeight_AdSlot_IFramingDepth_value = map[string]int32{
		"UNKNOWN_IFRAME_DEPTH": 0,
		"NOT_IN_IFRAME":        1,
		"ONE_IFRAME":           2,
		"MULTIPLE_IFRAME":      3,
	}
)

func (x BidRequestLightWeight_AdSlot_IFramingDepth) Enum() *BidRequestLightWeight_AdSlot_IFramingDepth {
	p := new(BidRequestLightWeight_AdSlot_IFramingDepth)
	*p = x
	return p
}

func (x BidRequestLightWeight_AdSlot_IFramingDepth) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequestLightWeight_AdSlot_IFramingDepth) Descriptor() protoreflect.EnumDescriptor {
	return file_bid_proto_enumTypes[2].Descriptor()
}

func (BidRequestLightWeight_AdSlot_IFramingDepth) Type() protoreflect.EnumType {
	return &file_bid_proto_enumTypes[2]
}

func (x BidRequestLightWeight_AdSlot_IFramingDepth) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequestLightWeight_AdSlot_IFramingDepth) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequestLightWeight_AdSlot_IFramingDepth(num)
	return nil
}

// Deprecated: Use BidRequestLightWeight_AdSlot_IFramingDepth.Descriptor instead.
func (BidRequestLightWeight_AdSlot_IFramingDepth) EnumDescriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 2}
}

// NativePlacementType describes placement of native ad slot with respect to
// surrounding context.
type BidRequestLightWeight_AdSlot_NativePlacementType int32

const (
	BidRequestLightWeight_AdSlot_PLACEMENT_UNKNOWN BidRequestLightWeight_AdSlot_NativePlacementType = 0
	// In the feed of content - for example as an item inside the organic
	// feed/grid/listing/carousel.
	BidRequestLightWeight_AdSlot_PLACEMENT_IN_FEED BidRequestLightWeight_AdSlot_NativePlacementType = 1
	// In the atomic unit of the content - i.e., in the article page or single
	// image page.
	BidRequestLightWeight_AdSlot_PLACEMENT_ATOMIC_UNIT BidRequestLightWeight_AdSlot_NativePlacementType = 2
	// Outside the core content - for example in the ads section on the right
	// rail, as a banner-style placement near the content, etc.
	BidRequestLightWeight_AdSlot_PLACEMENT_OUTSIDE BidRequestLightWeight_AdSlot_NativePlacementType = 3
	// Recommendation widget, most commonly presented below the article
	// content.
	BidRequestLightWeight_AdSlot_PLACEMENT_RECOMMENDATION BidRequestLightWeight_AdSlot_NativePlacementType = 4
)

// Enum value maps for BidRequestLightWeight_AdSlot_NativePlacementType.
var (
	BidRequestLightWeight_AdSlot_NativePlacementType_name = map[int32]string{
		0: "PLACEMENT_UNKNOWN",
		1: "PLACEMENT_IN_FEED",
		2: "PLACEMENT_ATOMIC_UNIT",
		3: "PLACEMENT_OUTSIDE",
		4: "PLACEMENT_RECOMMENDATION",
	}
	BidRequestLightWeight_AdSlot_NativePlacementType_value = map[string]int32{
		"PLACEMENT_UNKNOWN":        0,
		"PLACEMENT_IN_FEED":        1,
		"PLACEMENT_ATOMIC_UNIT":    2,
		"PLACEMENT_OUTSIDE":        3,
		"PLACEMENT_RECOMMENDATION": 4,
	}
)

func (x BidRequestLightWeight_AdSlot_NativePlacementType) Enum() *BidRequestLightWeight_AdSlot_NativePlacementType {
	p := new(BidRequestLightWeight_AdSlot_NativePlacementType)
	*p = x
	return p
}

func (x BidRequestLightWeight_AdSlot_NativePlacementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequestLightWeight_AdSlot_NativePlacementType) Descriptor() protoreflect.EnumDescriptor {
	return file_bid_proto_enumTypes[3].Descriptor()
}

func (BidRequestLightWeight_AdSlot_NativePlacementType) Type() protoreflect.EnumType {
	return &file_bid_proto_enumTypes[3]
}

func (x BidRequestLightWeight_AdSlot_NativePlacementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequestLightWeight_AdSlot_NativePlacementType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequestLightWeight_AdSlot_NativePlacementType(num)
	return nil
}

// Deprecated: Use BidRequestLightWeight_AdSlot_NativePlacementType.Descriptor instead.
func (BidRequestLightWeight_AdSlot_NativePlacementType) EnumDescriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 3}
}

// Whether the ad request has been determined to come directly from the
// publisher.
type BidRequestLightWeight_AdSlot_MediationStatus int32

const (
	BidRequestLightWeight_AdSlot_UNKNOWN        BidRequestLightWeight_AdSlot_MediationStatus = 0
	BidRequestLightWeight_AdSlot_DIRECT_REQUEST BidRequestLightWeight_AdSlot_MediationStatus = 1
)

// Enum value maps for BidRequestLightWeight_AdSlot_MediationStatus.
var (
	BidRequestLightWeight_AdSlot_MediationStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "DIRECT_REQUEST",
	}
	BidRequestLightWeight_AdSlot_MediationStatus_value = map[string]int32{
		"UNKNOWN":        0,
		"DIRECT_REQUEST": 1,
	}
)

func (x BidRequestLightWeight_AdSlot_MediationStatus) Enum() *BidRequestLightWeight_AdSlot_MediationStatus {
	p := new(BidRequestLightWeight_AdSlot_MediationStatus)
	*p = x
	return p
}

func (x BidRequestLightWeight_AdSlot_MediationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequestLightWeight_AdSlot_MediationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bid_proto_enumTypes[4].Descriptor()
}

func (BidRequestLightWeight_AdSlot_MediationStatus) Type() protoreflect.EnumType {
	return &file_bid_proto_enumTypes[4]
}

func (x BidRequestLightWeight_AdSlot_MediationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequestLightWeight_AdSlot_MediationStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequestLightWeight_AdSlot_MediationStatus(num)
	return nil
}

// Deprecated: Use BidRequestLightWeight_AdSlot_MediationStatus.Descriptor instead.
func (BidRequestLightWeight_AdSlot_MediationStatus) EnumDescriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 4}
}

// Sources for non-browser inventory.
type BidRequestLightWeight_AdSlot_NonBrowserSource int32

const (
	BidRequestLightWeight_AdSlot_UNDECLARED_SOURCE BidRequestLightWeight_AdSlot_NonBrowserSource = 0
	BidRequestLightWeight_AdSlot_DESKTOP_APP       BidRequestLightWeight_AdSlot_NonBrowserSource = 1
)

// Enum value maps for BidRequestLightWeight_AdSlot_NonBrowserSource.
var (
	BidRequestLightWeight_AdSlot_NonBrowserSource_name = map[int32]string{
		0: "UNDECLARED_SOURCE",
		1: "DESKTOP_APP",
	}
	BidRequestLightWeight_AdSlot_NonBrowserSource_value = map[string]int32{
		"UNDECLARED_SOURCE": 0,
		"DESKTOP_APP":       1,
	}
)

func (x BidRequestLightWeight_AdSlot_NonBrowserSource) Enum() *BidRequestLightWeight_AdSlot_NonBrowserSource {
	p := new(BidRequestLightWeight_AdSlot_NonBrowserSource)
	*p = x
	return p
}

func (x BidRequestLightWeight_AdSlot_NonBrowserSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequestLightWeight_AdSlot_NonBrowserSource) Descriptor() protoreflect.EnumDescriptor {
	return file_bid_proto_enumTypes[5].Descriptor()
}

func (BidRequestLightWeight_AdSlot_NonBrowserSource) Type() protoreflect.EnumType {
	return &file_bid_proto_enumTypes[5]
}

func (x BidRequestLightWeight_AdSlot_NonBrowserSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequestLightWeight_AdSlot_NonBrowserSource) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequestLightWeight_AdSlot_NonBrowserSource(num)
	return nil
}

// Deprecated: Use BidRequestLightWeight_AdSlot_NonBrowserSource.Descriptor instead.
func (BidRequestLightWeight_AdSlot_NonBrowserSource) EnumDescriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 5}
}

// Defines who controls the environment that made the ad request and will
// render the ad. On platforms where code written by Google will handle
// the ad this field is set to GOOGLE. When this field is PUBLISHER the
// publisher has placed their own code on the device to handle playback of
// the ad. There is no technical difference in how these request are
// handled. You may use this field to differentiate between different
// environments for non-technical reasons. This field is only set for
// requests that allow VAST video ads.
type BidRequestLightWeight_AdSlot_Renderer int32

const (
	BidRequestLightWeight_AdSlot_UNKNOWN_RENDERER BidRequestLightWeight_AdSlot_Renderer = 0
	BidRequestLightWeight_AdSlot_GOOGLE           BidRequestLightWeight_AdSlot_Renderer = 1
	BidRequestLightWeight_AdSlot_PUBLISHER        BidRequestLightWeight_AdSlot_Renderer = 2
)

// Enum value maps for BidRequestLightWeight_AdSlot_Renderer.
var (
	BidRequestLightWeight_AdSlot_Renderer_name = map[int32]string{
		0: "UNKNOWN_RENDERER",
		1: "GOOGLE",
		2: "PUBLISHER",
	}
	BidRequestLightWeight_AdSlot_Renderer_value = map[string]int32{
		"UNKNOWN_RENDERER": 0,
		"GOOGLE":           1,
		"PUBLISHER":        2,
	}
)

func (x BidRequestLightWeight_AdSlot_Renderer) Enum() *BidRequestLightWeight_AdSlot_Renderer {
	p := new(BidRequestLightWeight_AdSlot_Renderer)
	*p = x
	return p
}

func (x BidRequestLightWeight_AdSlot_Renderer) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequestLightWeight_AdSlot_Renderer) Descriptor() protoreflect.EnumDescriptor {
	return file_bid_proto_enumTypes[6].Descriptor()
}

func (BidRequestLightWeight_AdSlot_Renderer) Type() protoreflect.EnumType {
	return &file_bid_proto_enumTypes[6]
}

func (x BidRequestLightWeight_AdSlot_Renderer) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequestLightWeight_AdSlot_Renderer) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequestLightWeight_AdSlot_Renderer(num)
	return nil
}

// Deprecated: Use BidRequestLightWeight_AdSlot_Renderer.Descriptor instead.
func (BidRequestLightWeight_AdSlot_Renderer) EnumDescriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 6}
}

// Whether this request is for an Accelerated Mobile Page (AMP). AMP HTML
// pages load faster, by restricting parts of HTML, CSS and Javascript. For
// more information on how AMP ads render, refer to the AMP ads README:
// https://github.com/ampproject/amphtml/blob/master/ads/README.md
type BidRequestLightWeight_AdSlot_AmpAdRequestType int32

const (
	// AMP status unknown. Request may or may not be from an AMP page.
	BidRequestLightWeight_AdSlot_UNKNOWN_AMP BidRequestLightWeight_AdSlot_AmpAdRequestType = 0
	// Not an AMP page. Could be regular HTML, VAST video, etc.
	BidRequestLightWeight_AdSlot_NON_AMP_PAGE BidRequestLightWeight_AdSlot_AmpAdRequestType = 1
	// Late-loading request from an AMP HTML page. Ad will render with a
	// slight delay so it will not negatively impact page render performance.
	BidRequestLightWeight_AdSlot_AMP_PAGE_LATE_REQUEST BidRequestLightWeight_AdSlot_AmpAdRequestType = 2
)

// Enum value maps for BidRequestLightWeight_AdSlot_AmpAdRequestType.
var (
	BidRequestLightWeight_AdSlot_AmpAdRequestType_name = map[int32]string{
		0: "UNKNOWN_AMP",
		1: "NON_AMP_PAGE",
		2: "AMP_PAGE_LATE_REQUEST",
	}
	BidRequestLightWeight_AdSlot_AmpAdRequestType_value = map[string]int32{
		"UNKNOWN_AMP":           0,
		"NON_AMP_PAGE":          1,
		"AMP_PAGE_LATE_REQUEST": 2,
	}
)

func (x BidRequestLightWeight_AdSlot_AmpAdRequestType) Enum() *BidRequestLightWeight_AdSlot_AmpAdRequestType {
	p := new(BidRequestLightWeight_AdSlot_AmpAdRequestType)
	*p = x
	return p
}

func (x BidRequestLightWeight_AdSlot_AmpAdRequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequestLightWeight_AdSlot_AmpAdRequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_bid_proto_enumTypes[7].Descriptor()
}

func (BidRequestLightWeight_AdSlot_AmpAdRequestType) Type() protoreflect.EnumType {
	return &file_bid_proto_enumTypes[7]
}

func (x BidRequestLightWeight_AdSlot_AmpAdRequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequestLightWeight_AdSlot_AmpAdRequestType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequestLightWeight_AdSlot_AmpAdRequestType(num)
	return nil
}

// Deprecated: Use BidRequestLightWeight_AdSlot_AmpAdRequestType.Descriptor instead.
func (BidRequestLightWeight_AdSlot_AmpAdRequestType) EnumDescriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 7}
}

// Whether this is an AMP page or not.
type BidRequestLightWeight_AdSlot_AmpPage int32

const (
	// AMP page status unknown.
	BidRequestLightWeight_AdSlot_UNKNOWN_AMP_PAGE BidRequestLightWeight_AdSlot_AmpPage = 0
	// This is not an AMP page.
	BidRequestLightWeight_AdSlot_DIALECT_HTML BidRequestLightWeight_AdSlot_AmpPage = 1
	// This is an Amp page.
	BidRequestLightWeight_AdSlot_DIALECT_HTML_AMP BidRequestLightWeight_AdSlot_AmpPage = 2
)

// Enum value maps for BidRequestLightWeight_AdSlot_AmpPage.
var (
	BidRequestLightWeight_AdSlot_AmpPage_name = map[int32]string{
		0: "UNKNOWN_AMP_PAGE",
		1: "DIALECT_HTML",
		2: "DIALECT_HTML_AMP",
	}
	BidRequestLightWeight_AdSlot_AmpPage_value = map[string]int32{
		"UNKNOWN_AMP_PAGE": 0,
		"DIALECT_HTML":     1,
		"DIALECT_HTML_AMP": 2,
	}
)

func (x BidRequestLightWeight_AdSlot_AmpPage) Enum() *BidRequestLightWeight_AdSlot_AmpPage {
	p := new(BidRequestLightWeight_AdSlot_AmpPage)
	*p = x
	return p
}

func (x BidRequestLightWeight_AdSlot_AmpPage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequestLightWeight_AdSlot_AmpPage) Descriptor() protoreflect.EnumDescriptor {
	return file_bid_proto_enumTypes[8].Descriptor()
}

func (BidRequestLightWeight_AdSlot_AmpPage) Type() protoreflect.EnumType {
	return &file_bid_proto_enumTypes[8]
}

func (x BidRequestLightWeight_AdSlot_AmpPage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequestLightWeight_AdSlot_AmpPage) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequestLightWeight_AdSlot_AmpPage(num)
	return nil
}

// Deprecated: Use BidRequestLightWeight_AdSlot_AmpPage.Descriptor instead.
func (BidRequestLightWeight_AdSlot_AmpPage) EnumDescriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 8}
}

// Possible requirement types for AMP ads.
type BidRequestLightWeight_AdSlot_AmpAdRequirementType int32

const (
	// AMP ad requirements unknown.
	BidRequestLightWeight_AdSlot_UNKNOWN_AMP_AD_REQUIREMENT_TYPE BidRequestLightWeight_AdSlot_AmpAdRequirementType = 0
	// AMP ads are not allowed.
	BidRequestLightWeight_AdSlot_AMP_AD_NOT_ALLOWED BidRequestLightWeight_AdSlot_AmpAdRequirementType = 1
	// Either AMP ads or non-AMP ads are allowed;
	// AMP ads are not early rendered.
	BidRequestLightWeight_AdSlot_AMP_AD_ALLOWED_AND_NOT_EARLY_RENDERED BidRequestLightWeight_AdSlot_AmpAdRequirementType = 2
	// Either AMP ads or non-AMP ads are allowed;
	// AMP ads are early rendered.
	BidRequestLightWeight_AdSlot_AMP_AD_ALLOWED_AND_EARLY_RENDERED BidRequestLightWeight_AdSlot_AmpAdRequirementType = 3
	// AMP ads are required.
	// Ads that are non-AMP may be rejected by the publisher.
	BidRequestLightWeight_AdSlot_AMP_AD_REQUIRED BidRequestLightWeight_AdSlot_AmpAdRequirementType = 4
)

// Enum value maps for BidRequestLightWeight_AdSlot_AmpAdRequirementType.
var (
	BidRequestLightWeight_AdSlot_AmpAdRequirementType_name = map[int32]string{
		0: "UNKNOWN_AMP_AD_REQUIREMENT_TYPE",
		1: "AMP_AD_NOT_ALLOWED",
		2: "AMP_AD_ALLOWED_AND_NOT_EARLY_RENDERED",
		3: "AMP_AD_ALLOWED_AND_EARLY_RENDERED",
		4: "AMP_AD_REQUIRED",
	}
	BidRequestLightWeight_AdSlot_AmpAdRequirementType_value = map[string]int32{
		"UNKNOWN_AMP_AD_REQUIREMENT_TYPE":       0,
		"AMP_AD_NOT_ALLOWED":                    1,
		"AMP_AD_ALLOWED_AND_NOT_EARLY_RENDERED": 2,
		"AMP_AD_ALLOWED_AND_EARLY_RENDERED":     3,
		"AMP_AD_REQUIRED":                       4,
	}
)

func (x BidRequestLightWeight_AdSlot_AmpAdRequirementType) Enum() *BidRequestLightWeight_AdSlot_AmpAdRequirementType {
	p := new(BidRequestLightWeight_AdSlot_AmpAdRequirementType)
	*p = x
	return p
}

func (x BidRequestLightWeight_AdSlot_AmpAdRequirementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequestLightWeight_AdSlot_AmpAdRequirementType) Descriptor() protoreflect.EnumDescriptor {
	return file_bid_proto_enumTypes[9].Descriptor()
}

func (BidRequestLightWeight_AdSlot_AmpAdRequirementType) Type() protoreflect.EnumType {
	return &file_bid_proto_enumTypes[9]
}

func (x BidRequestLightWeight_AdSlot_AmpAdRequirementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequestLightWeight_AdSlot_AmpAdRequirementType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequestLightWeight_AdSlot_AmpAdRequirementType(num)
	return nil
}

// Deprecated: Use BidRequestLightWeight_AdSlot_AmpAdRequirementType.Descriptor instead.
func (BidRequestLightWeight_AdSlot_AmpAdRequirementType) EnumDescriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 9}
}

// Possible ad types that are allowed in the bid response. allowed_ad_types
// always contains one or more values. Interstitial slots may also support
// banner ads. An ad slot with ALLOWED_AD_TYPE_NATIVE may or may not support
// native video, regardless of whether ALLOWED_AD_TYPE_VIDEO is set.
// Likewise, an ad slot without ALLOWED_AD_TYPE_NATIVE does not support
// native video, regardless of whether ALLOWED_AD_TYPE_VIDEO is set.
type BidRequestLightWeight_AdSlot_AllowedAdType int32

const (
	BidRequestLightWeight_AdSlot_UNKNOWN_ALLOWED_AD_TYPE BidRequestLightWeight_AdSlot_AllowedAdType = -1
	BidRequestLightWeight_AdSlot_ALLOWED_AD_TYPE_BANNER  BidRequestLightWeight_AdSlot_AllowedAdType = 0
	BidRequestLightWeight_AdSlot_ALLOWED_AD_TYPE_NATIVE  BidRequestLightWeight_AdSlot_AllowedAdType = 1
	BidRequestLightWeight_AdSlot_ALLOWED_AD_TYPE_VIDEO   BidRequestLightWeight_AdSlot_AllowedAdType = 2
	BidRequestLightWeight_AdSlot_ALLOWED_AD_TYPE_AUDIO   BidRequestLightWeight_AdSlot_AllowedAdType = 3
)

// Enum value maps for BidRequestLightWeight_AdSlot_AllowedAdType.
var (
	BidRequestLightWeight_AdSlot_AllowedAdType_name = map[int32]string{
		-1: "UNKNOWN_ALLOWED_AD_TYPE",
		0:  "ALLOWED_AD_TYPE_BANNER",
		1:  "ALLOWED_AD_TYPE_NATIVE",
		2:  "ALLOWED_AD_TYPE_VIDEO",
		3:  "ALLOWED_AD_TYPE_AUDIO",
	}
	BidRequestLightWeight_AdSlot_AllowedAdType_value = map[string]int32{
		"UNKNOWN_ALLOWED_AD_TYPE": -1,
		"ALLOWED_AD_TYPE_BANNER":  0,
		"ALLOWED_AD_TYPE_NATIVE":  1,
		"ALLOWED_AD_TYPE_VIDEO":   2,
		"ALLOWED_AD_TYPE_AUDIO":   3,
	}
)

func (x BidRequestLightWeight_AdSlot_AllowedAdType) Enum() *BidRequestLightWeight_AdSlot_AllowedAdType {
	p := new(BidRequestLightWeight_AdSlot_AllowedAdType)
	*p = x
	return p
}

func (x BidRequestLightWeight_AdSlot_AllowedAdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequestLightWeight_AdSlot_AllowedAdType) Descriptor() protoreflect.EnumDescriptor {
	return file_bid_proto_enumTypes[10].Descriptor()
}

func (BidRequestLightWeight_AdSlot_AllowedAdType) Type() protoreflect.EnumType {
	return &file_bid_proto_enumTypes[10]
}

func (x BidRequestLightWeight_AdSlot_AllowedAdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequestLightWeight_AdSlot_AllowedAdType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequestLightWeight_AdSlot_AllowedAdType(num)
	return nil
}

// Deprecated: Use BidRequestLightWeight_AdSlot_AllowedAdType.Descriptor instead.
func (BidRequestLightWeight_AdSlot_AllowedAdType) EnumDescriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 10}
}

// Possible ad rendering API frameworks that can be supported.
// If an API is not explicitly listed, it is assumed not to be supported.
type BidRequestLightWeight_AdSlot_APIFramework int32

const (
	BidRequestLightWeight_AdSlot_UNKNOWN_FRAMEWORK BidRequestLightWeight_AdSlot_APIFramework = 0
	// Mobile Rich Media Ad Interface Definitions Version 1.0. See
	// https://www.iab.com/guidelines/mraid/.
	BidRequestLightWeight_AdSlot_MRAID_1 BidRequestLightWeight_AdSlot_APIFramework = 3
	// Mobile Rich Media Ad Interface Definitions Version 2.0. See
	// https://www.iab.com/guidelines/mraid/.
	BidRequestLightWeight_AdSlot_MRAID_2 BidRequestLightWeight_AdSlot_APIFramework = 5
	// Mobile Rich Media Ad Interface Definitions Version 3.0. See
	// https://www.iab.com/guidelines/mraid/.
	BidRequestLightWeight_AdSlot_MRAID_3 BidRequestLightWeight_AdSlot_APIFramework = 6
	// Open Measurement Interface Definition Version 1.0. See
	// https://iabtechlab.com/standards/open-measurement-sdk/.
	BidRequestLightWeight_AdSlot_OMID_1 BidRequestLightWeight_AdSlot_APIFramework = 7
)

// Enum value maps for BidRequestLightWeight_AdSlot_APIFramework.
var (
	BidRequestLightWeight_AdSlot_APIFramework_name = map[int32]string{
		0: "UNKNOWN_FRAMEWORK",
		3: "MRAID_1",
		5: "MRAID_2",
		6: "MRAID_3",
		7: "OMID_1",
	}
	BidRequestLightWeight_AdSlot_APIFramework_value = map[string]int32{
		"UNKNOWN_FRAMEWORK": 0,
		"MRAID_1":           3,
		"MRAID_2":           5,
		"MRAID_3":           6,
		"OMID_1":            7,
	}
)

func (x BidRequestLightWeight_AdSlot_APIFramework) Enum() *BidRequestLightWeight_AdSlot_APIFramework {
	p := new(BidRequestLightWeight_AdSlot_APIFramework)
	*p = x
	return p
}

func (x BidRequestLightWeight_AdSlot_APIFramework) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequestLightWeight_AdSlot_APIFramework) Descriptor() protoreflect.EnumDescriptor {
	return file_bid_proto_enumTypes[11].Descriptor()
}

func (BidRequestLightWeight_AdSlot_APIFramework) Type() protoreflect.EnumType {
	return &file_bid_proto_enumTypes[11]
}

func (x BidRequestLightWeight_AdSlot_APIFramework) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequestLightWeight_AdSlot_APIFramework) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequestLightWeight_AdSlot_APIFramework(num)
	return nil
}

// Deprecated: Use BidRequestLightWeight_AdSlot_APIFramework.Descriptor instead.
func (BidRequestLightWeight_AdSlot_APIFramework) EnumDescriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 11}
}

// Describes the environment where the ad auction is run:  either all
// on the server-side, server-side with sandboxed interest group bidding
// simulation, or with the contextual auction on the server-side and the
// interest group bidding and the final auction on the device.
type BidRequestLightWeight_AdSlot_AuctionEnvironment int32

const (
	// The auction determining the winning ad is held server-side.
	BidRequestLightWeight_AdSlot_SERVER_SIDE_AUCTION BidRequestLightWeight_AdSlot_AuctionEnvironment = 0
	// This value is currently not in use and will be provided only when
	// browsers start supporting on-device auctions.
	// The contextual auction that determines a winning contextual bid is held
	// server-side, and bidding functions are run on the device to determine
	// interest group bids. Both the winning contextual bid and interest
	// group bids are entered into a final auction held on the device to
	// select the winning ad. For more information regarding the TURTLEDOVE
	// on device bidding and auction, see:
	// https://github.com/WICG/turtledove and
	// https://github.com/WICG/turtledove/blob/main/FLEDGE.md
	BidRequestLightWeight_AdSlot_ON_DEVICE_INTEREST_GROUP_AUCTION BidRequestLightWeight_AdSlot_AuctionEnvironment = 1
	// An interest group auction is simulated in a sandboxed environment, and
	// its results are entered into the conventional server-side auction to
	// determine the winning ad. Experimental feature; may be subject to
	// change. For more information regarding about the TURTLEDOVE simulation
	// for RTB, see:
	// https://github.com/google/ads-privacy/tree/master/experiments/turtledove-simulation,
	// https://developers.google.com/authorized-buyers/rtb/turtledove,
	// and https://developers.google.com/authorized-buyers/rtb/fledge
	BidRequestLightWeight_AdSlot_SERVER_SIDE_AUCTION_WITH_INTEREST_GROUP_SIMULATION BidRequestLightWeight_AdSlot_AuctionEnvironment = 2
)

// Enum value maps for BidRequestLightWeight_AdSlot_AuctionEnvironment.
var (
	BidRequestLightWeight_AdSlot_AuctionEnvironment_name = map[int32]string{
		0: "SERVER_SIDE_AUCTION",
		1: "ON_DEVICE_INTEREST_GROUP_AUCTION",
		2: "SERVER_SIDE_AUCTION_WITH_INTEREST_GROUP_SIMULATION",
	}
	BidRequestLightWeight_AdSlot_AuctionEnvironment_value = map[string]int32{
		"SERVER_SIDE_AUCTION":                                0,
		"ON_DEVICE_INTEREST_GROUP_AUCTION":                   1,
		"SERVER_SIDE_AUCTION_WITH_INTEREST_GROUP_SIMULATION": 2,
	}
)

func (x BidRequestLightWeight_AdSlot_AuctionEnvironment) Enum() *BidRequestLightWeight_AdSlot_AuctionEnvironment {
	p := new(BidRequestLightWeight_AdSlot_AuctionEnvironment)
	*p = x
	return p
}

func (x BidRequestLightWeight_AdSlot_AuctionEnvironment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequestLightWeight_AdSlot_AuctionEnvironment) Descriptor() protoreflect.EnumDescriptor {
	return file_bid_proto_enumTypes[12].Descriptor()
}

func (BidRequestLightWeight_AdSlot_AuctionEnvironment) Type() protoreflect.EnumType {
	return &file_bid_proto_enumTypes[12]
}

func (x BidRequestLightWeight_AdSlot_AuctionEnvironment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequestLightWeight_AdSlot_AuctionEnvironment) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequestLightWeight_AdSlot_AuctionEnvironment(num)
	return nil
}

// Deprecated: Use BidRequestLightWeight_AdSlot_AuctionEnvironment.Descriptor instead.
func (BidRequestLightWeight_AdSlot_AuctionEnvironment) EnumDescriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 12}
}

// The type of the deal. Note that Authorized Buyers policy overrides
// apply to all Programmatic Guaranteed and Preferred Deal bids, and do
// not apply to bids for other deal types.
type BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_DealType int32

const (
	BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_UNKNOWN_DEAL_TYPE BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_DealType = 0
	// Bids are fixed-price and evaluated before the Open Auction. Bidders
	// are not required to bid with Preferred Deals when they are present
	// on the bid request. See
	// https://support.google.com/authorizedbuyers/answer/2604595 for more
	// information.
	BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_PREFERRED_DEAL BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_DealType = 1
	// Bids participate in a Private Auction against a select list of
	// buyers with specific floors. See
	// https://support.google.com/authorizedbuyers/answer/2839853 for more
	// information.
	BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_PRIVATE_AUCTION BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_DealType = 2
	// Bids are fixed-price and evaluated before the Open Auction. Bidders
	// are expected to bid with Programmatic Guaranteed deals whenever
	// they are present on a bid request in order to ensure that the
	// number of impressions agreed upon for a given deal are served. See
	// https://support.google.com/authorizedbuyers/answer/7174589 for more
	// information.
	BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_PROGRAMMATIC_GUARANTEED BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_DealType = 3
	// The deal ID is an identifier for a collection of Open Auction
	// inventory matching a given set of targeting criteria. See
	// https://support.google.com/authorizedbuyers/answer/7516884 for more
	// information.
	BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_AUCTION_PACKAGE BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_DealType = 4
)

// Enum value maps for BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_DealType.
var (
	BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_DealType_name = map[int32]string{
		0: "UNKNOWN_DEAL_TYPE",
		1: "PREFERRED_DEAL",
		2: "PRIVATE_AUCTION",
		3: "PROGRAMMATIC_GUARANTEED",
		4: "AUCTION_PACKAGE",
	}
	BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_DealType_value = map[string]int32{
		"UNKNOWN_DEAL_TYPE":       0,
		"PREFERRED_DEAL":          1,
		"PRIVATE_AUCTION":         2,
		"PROGRAMMATIC_GUARANTEED": 3,
		"AUCTION_PACKAGE":         4,
	}
)

func (x BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_DealType) Enum() *BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_DealType {
	p := new(BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_DealType)
	*p = x
	return p
}

func (x BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_DealType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_DealType) Descriptor() protoreflect.EnumDescriptor {
	return file_bid_proto_enumTypes[13].Descriptor()
}

func (BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_DealType) Type() protoreflect.EnumType {
	return &file_bid_proto_enumTypes[13]
}

func (x BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_DealType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_DealType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_DealType(num)
	return nil
}

// Deprecated: Use BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_DealType.Descriptor instead.
func (BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_DealType) EnumDescriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 3, 0, 0}
}

// Experimental field; subject to change.
// An enum declaring the host of the creative, which will only be
// populated for Programmatic Guaranteed deals.
// Currently, this field should only ever be set to
// CREATIVE_SOURCE_ADVERTISER.
type BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType int32

const (
	BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_CREATIVE_SOURCE_UNKNOWN BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType = 0
	// The creative is hosted by the advertiser, which means the bidder
	// is required to provide a creative in the bid response.
	BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_CREATIVE_SOURCE_ADVERTISER BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType = 1
	// The creative is hosted by the publisher, which means the bidder
	// does not need to include a creative in the bid response.
	// For more information on publisher-hosted creatives, see
	// https://support.google.com/admanager/answer/9243220.
	// This feature isn't currently supported for RTB bidders.
	BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_CREATIVE_SOURCE_PUBLISHER BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType = 2
)

// Enum value maps for BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType.
var (
	BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType_name = map[int32]string{
		0: "CREATIVE_SOURCE_UNKNOWN",
		1: "CREATIVE_SOURCE_ADVERTISER",
		2: "CREATIVE_SOURCE_PUBLISHER",
	}
	BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType_value = map[string]int32{
		"CREATIVE_SOURCE_UNKNOWN":    0,
		"CREATIVE_SOURCE_ADVERTISER": 1,
		"CREATIVE_SOURCE_PUBLISHER":  2,
	}
)

func (x BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType) Enum() *BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType {
	p := new(BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType)
	*p = x
	return p
}

func (x BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_bid_proto_enumTypes[14].Descriptor()
}

func (BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType) Type() protoreflect.EnumType {
	return &file_bid_proto_enumTypes[14]
}

func (x BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType(num)
	return nil
}

// Deprecated: Use BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType.Descriptor instead.
func (BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType) EnumDescriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 3, 0, 1}
}

// Creative policy enforcement level that applies to this request.
// Creatives that don't adhere to the specified policy will be filtered
// before the auction. The status of the creatives with their respective
// policies can be retrieved via Creative API.
// https://developers.google.com/authorized-buyers/apis/guides/rtb-api/creatives
// Bids on deals may override the policy enforcement applicable to the
// request.
type BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PolicyEnforcement int32

const (
	BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_POLICY_ENFORCEMENT_UNKNOWN BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PolicyEnforcement = 0
	// Baseline policy for all ads serving through any of Google's ads
	// platform products. Learn more at:
	// https://support.google.com/platformspolicy/answer/3013851.
	BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_POLICY_ENFORCEMENT_PLATFORM_POLICY BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PolicyEnforcement = 1
	// Policy for ads serving through Google's ad network. This includes the
	// baseline policy for all ads serving through any of Google's ads
	// platform products. Learn more at:
	// https://support.google.com/authorizedbuyers/answer/1325008.
	BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_POLICY_ENFORCEMENT_NETWORK_AND_PLATFORM_POLICY BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PolicyEnforcement = 2
)

// Enum value maps for BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PolicyEnforcement.
var (
	BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PolicyEnforcement_name = map[int32]string{
		0: "POLICY_ENFORCEMENT_UNKNOWN",
		1: "POLICY_ENFORCEMENT_PLATFORM_POLICY",
		2: "POLICY_ENFORCEMENT_NETWORK_AND_PLATFORM_POLICY",
	}
	BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PolicyEnforcement_value = map[string]int32{
		"POLICY_ENFORCEMENT_UNKNOWN":                     0,
		"POLICY_ENFORCEMENT_PLATFORM_POLICY":             1,
		"POLICY_ENFORCEMENT_NETWORK_AND_PLATFORM_POLICY": 2,
	}
)

func (x BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PolicyEnforcement) Enum() *BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PolicyEnforcement {
	p := new(BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PolicyEnforcement)
	*p = x
	return p
}

func (x BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PolicyEnforcement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PolicyEnforcement) Descriptor() protoreflect.EnumDescriptor {
	return file_bid_proto_enumTypes[15].Descriptor()
}

func (BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PolicyEnforcement) Type() protoreflect.EnumType {
	return &file_bid_proto_enumTypes[15]
}

func (x BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PolicyEnforcement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PolicyEnforcement) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PolicyEnforcement(num)
	return nil
}

// Deprecated: Use BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PolicyEnforcement.Descriptor instead.
func (BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PolicyEnforcement) EnumDescriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 6, 0}
}

// Creative publisher blocks enforcement level that applies to this
// request. Publisher blocks allow publishers to control which creatives
// can be shown on their properties.
// Deals may also override publisher blocks. Please refer to adslot.
// matching_ad_data.direct_deal.publisher_blocks_overridden field.
type BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement int32

const (
	BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PUBLISHER_BLOCKS_ENFORCEMENT_UNKNOWN BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement = 0
	// The publisher's blocking controls are enforced on creatives
	// submitted. Publisher blocks enforcement settings are provided in the
	// following fields:
	// - publisher_settings_list_id
	// - excluded_sensitive_category
	// - allowed_restricted_category
	// - excluded_product_category
	// - allowed_vendor_type
	// - excluded_attribute
	BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PUBLISHER_BLOCKS_ENFORCEMENT_APPLIES BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement = 1
	// The publisher's blocking controls are not enforced on creatives
	// submitted.
	BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PUBLISHER_BLOCKS_ENFORCEMENT_OVERRIDDEN BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement = 2
)

// Enum value maps for BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement.
var (
	BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement_name = map[int32]string{
		0: "PUBLISHER_BLOCKS_ENFORCEMENT_UNKNOWN",
		1: "PUBLISHER_BLOCKS_ENFORCEMENT_APPLIES",
		2: "PUBLISHER_BLOCKS_ENFORCEMENT_OVERRIDDEN",
	}
	BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement_value = map[string]int32{
		"PUBLISHER_BLOCKS_ENFORCEMENT_UNKNOWN":    0,
		"PUBLISHER_BLOCKS_ENFORCEMENT_APPLIES":    1,
		"PUBLISHER_BLOCKS_ENFORCEMENT_OVERRIDDEN": 2,
	}
)

func (x BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement) Enum() *BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement {
	p := new(BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement)
	*p = x
	return p
}

func (x BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement) Descriptor() protoreflect.EnumDescriptor {
	return file_bid_proto_enumTypes[16].Descriptor()
}

func (BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement) Type() protoreflect.EnumType {
	return &file_bid_proto_enumTypes[16]
}

func (x BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement(num)
	return nil
}

// Deprecated: Use BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement.Descriptor instead.
func (BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement) EnumDescriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 6, 1}
}

// Defines the bits used in required_fields and recommended_fields. There
// is one bit for each of the fields in BidResponse.Ad.NativeAd
type BidRequestLightWeight_AdSlot_NativeAdTemplate_Fields int32

const (
	BidRequestLightWeight_AdSlot_NativeAdTemplate_NO_FIELDS        BidRequestLightWeight_AdSlot_NativeAdTemplate_Fields = 0
	BidRequestLightWeight_AdSlot_NativeAdTemplate_HEADLINE         BidRequestLightWeight_AdSlot_NativeAdTemplate_Fields = 1
	BidRequestLightWeight_AdSlot_NativeAdTemplate_BODY             BidRequestLightWeight_AdSlot_NativeAdTemplate_Fields = 2
	BidRequestLightWeight_AdSlot_NativeAdTemplate_CALL_TO_ACTION   BidRequestLightWeight_AdSlot_NativeAdTemplate_Fields = 4
	BidRequestLightWeight_AdSlot_NativeAdTemplate_ADVERTISER       BidRequestLightWeight_AdSlot_NativeAdTemplate_Fields = 8
	BidRequestLightWeight_AdSlot_NativeAdTemplate_IMAGE            BidRequestLightWeight_AdSlot_NativeAdTemplate_Fields = 16
	BidRequestLightWeight_AdSlot_NativeAdTemplate_LOGO             BidRequestLightWeight_AdSlot_NativeAdTemplate_Fields = 32
	BidRequestLightWeight_AdSlot_NativeAdTemplate_APP_ICON         BidRequestLightWeight_AdSlot_NativeAdTemplate_Fields = 64
	BidRequestLightWeight_AdSlot_NativeAdTemplate_STAR_RATING      BidRequestLightWeight_AdSlot_NativeAdTemplate_Fields = 128
	BidRequestLightWeight_AdSlot_NativeAdTemplate_PRICE            BidRequestLightWeight_AdSlot_NativeAdTemplate_Fields = 256
	BidRequestLightWeight_AdSlot_NativeAdTemplate_DEPRECATED_STORE BidRequestLightWeight_AdSlot_NativeAdTemplate_Fields = 512
	BidRequestLightWeight_AdSlot_NativeAdTemplate_VIDEO            BidRequestLightWeight_AdSlot_NativeAdTemplate_Fields = 1024
)

// Enum value maps for BidRequestLightWeight_AdSlot_NativeAdTemplate_Fields.
var (
	BidRequestLightWeight_AdSlot_NativeAdTemplate_Fields_name = map[int32]string{
		0:    "NO_FIELDS",
		1:    "HEADLINE",
		2:    "BODY",
		4:    "CALL_TO_ACTION",
		8:    "ADVERTISER",
		16:   "IMAGE",
		32:   "LOGO",
		64:   "APP_ICON",
		128:  "STAR_RATING",
		256:  "PRICE",
		512:  "DEPRECATED_STORE",
		1024: "VIDEO",
	}
	BidRequestLightWeight_AdSlot_NativeAdTemplate_Fields_value = map[string]int32{
		"NO_FIELDS":        0,
		"HEADLINE":         1,
		"BODY":             2,
		"CALL_TO_ACTION":   4,
		"ADVERTISER":       8,
		"IMAGE":            16,
		"LOGO":             32,
		"APP_ICON":         64,
		"STAR_RATING":      128,
		"PRICE":            256,
		"DEPRECATED_STORE": 512,
		"VIDEO":            1024,
	}
)

func (x BidRequestLightWeight_AdSlot_NativeAdTemplate_Fields) Enum() *BidRequestLightWeight_AdSlot_NativeAdTemplate_Fields {
	p := new(BidRequestLightWeight_AdSlot_NativeAdTemplate_Fields)
	*p = x
	return p
}

func (x BidRequestLightWeight_AdSlot_NativeAdTemplate_Fields) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequestLightWeight_AdSlot_NativeAdTemplate_Fields) Descriptor() protoreflect.EnumDescriptor {
	return file_bid_proto_enumTypes[17].Descriptor()
}

func (BidRequestLightWeight_AdSlot_NativeAdTemplate_Fields) Type() protoreflect.EnumType {
	return &file_bid_proto_enumTypes[17]
}

func (x BidRequestLightWeight_AdSlot_NativeAdTemplate_Fields) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequestLightWeight_AdSlot_NativeAdTemplate_Fields) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequestLightWeight_AdSlot_NativeAdTemplate_Fields(num)
	return nil
}

// Deprecated: Use BidRequestLightWeight_AdSlot_NativeAdTemplate_Fields.Descriptor instead.
func (BidRequestLightWeight_AdSlot_NativeAdTemplate_Fields) EnumDescriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 7, 0}
}

// Type of style layout for each native ad template.
type BidRequestLightWeight_AdSlot_NativeAdTemplate_LayoutType int32

const (
	BidRequestLightWeight_AdSlot_NativeAdTemplate_PIXEL BidRequestLightWeight_AdSlot_NativeAdTemplate_LayoutType = 0
	BidRequestLightWeight_AdSlot_NativeAdTemplate_FLUID BidRequestLightWeight_AdSlot_NativeAdTemplate_LayoutType = 1
)

// Enum value maps for BidRequestLightWeight_AdSlot_NativeAdTemplate_LayoutType.
var (
	BidRequestLightWeight_AdSlot_NativeAdTemplate_LayoutType_name = map[int32]string{
		0: "PIXEL",
		1: "FLUID",
	}
	BidRequestLightWeight_AdSlot_NativeAdTemplate_LayoutType_value = map[string]int32{
		"PIXEL": 0,
		"FLUID": 1,
	}
)

func (x BidRequestLightWeight_AdSlot_NativeAdTemplate_LayoutType) Enum() *BidRequestLightWeight_AdSlot_NativeAdTemplate_LayoutType {
	p := new(BidRequestLightWeight_AdSlot_NativeAdTemplate_LayoutType)
	*p = x
	return p
}

func (x BidRequestLightWeight_AdSlot_NativeAdTemplate_LayoutType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequestLightWeight_AdSlot_NativeAdTemplate_LayoutType) Descriptor() protoreflect.EnumDescriptor {
	return file_bid_proto_enumTypes[18].Descriptor()
}

func (BidRequestLightWeight_AdSlot_NativeAdTemplate_LayoutType) Type() protoreflect.EnumType {
	return &file_bid_proto_enumTypes[18]
}

func (x BidRequestLightWeight_AdSlot_NativeAdTemplate_LayoutType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequestLightWeight_AdSlot_NativeAdTemplate_LayoutType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequestLightWeight_AdSlot_NativeAdTemplate_LayoutType(num)
	return nil
}

// Deprecated: Use BidRequestLightWeight_AdSlot_NativeAdTemplate_LayoutType.Descriptor instead.
func (BidRequestLightWeight_AdSlot_NativeAdTemplate_LayoutType) EnumDescriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 7, 1}
}

type BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType int32

const (
	BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings_UNKNOWN_AUTO_REFRESH_TYPE BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType = 0
	BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings_USER_ACTION               BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType = 1 // Refresh triggered by user-initiated action such
	// as scrolling.
	BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings_EVENT BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType = 2 // Event-driven content change. For example, ads refresh
	// when the football game score changes on the page.
	BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings_TIME BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType = 3 // Time-based refresh. Ads refresh on a predefined time
)

// Enum value maps for BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType.
var (
	BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_name = map[int32]string{
		0: "UNKNOWN_AUTO_REFRESH_TYPE",
		1: "USER_ACTION",
		2: "EVENT",
		3: "TIME",
	}
	BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_value = map[string]int32{
		"UNKNOWN_AUTO_REFRESH_TYPE": 0,
		"USER_ACTION":               1,
		"EVENT":                     2,
		"TIME":                      3,
	}
)

func (x BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType) Enum() *BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType {
	p := new(BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType)
	*p = x
	return p
}

func (x BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType) Descriptor() protoreflect.EnumDescriptor {
	return file_bid_proto_enumTypes[19].Descriptor()
}

func (BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType) Type() protoreflect.EnumType {
	return &file_bid_proto_enumTypes[19]
}

func (x BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType(num)
	return nil
}

// Deprecated: Use BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType.Descriptor instead.
func (BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType) EnumDescriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 8, 0, 0}
}

// Specifies the allowable sticky settings values.
type BidRequestLightWeight_AdSlot_StickySettings_Stickiness int32

const (
	BidRequestLightWeight_AdSlot_StickySettings_UNKNOWN_STICKINESS BidRequestLightWeight_AdSlot_StickySettings_Stickiness = 0
	BidRequestLightWeight_AdSlot_StickySettings_IS_STICKY          BidRequestLightWeight_AdSlot_StickySettings_Stickiness = 1
)

// Enum value maps for BidRequestLightWeight_AdSlot_StickySettings_Stickiness.
var (
	BidRequestLightWeight_AdSlot_StickySettings_Stickiness_name = map[int32]string{
		0: "UNKNOWN_STICKINESS",
		1: "IS_STICKY",
	}
	BidRequestLightWeight_AdSlot_StickySettings_Stickiness_value = map[string]int32{
		"UNKNOWN_STICKINESS": 0,
		"IS_STICKY":          1,
	}
)

func (x BidRequestLightWeight_AdSlot_StickySettings_Stickiness) Enum() *BidRequestLightWeight_AdSlot_StickySettings_Stickiness {
	p := new(BidRequestLightWeight_AdSlot_StickySettings_Stickiness)
	*p = x
	return p
}

func (x BidRequestLightWeight_AdSlot_StickySettings_Stickiness) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequestLightWeight_AdSlot_StickySettings_Stickiness) Descriptor() protoreflect.EnumDescriptor {
	return file_bid_proto_enumTypes[20].Descriptor()
}

func (BidRequestLightWeight_AdSlot_StickySettings_Stickiness) Type() protoreflect.EnumType {
	return &file_bid_proto_enumTypes[20]
}

func (x BidRequestLightWeight_AdSlot_StickySettings_Stickiness) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequestLightWeight_AdSlot_StickySettings_Stickiness) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequestLightWeight_AdSlot_StickySettings_Stickiness(num)
	return nil
}

// Deprecated: Use BidRequestLightWeight_AdSlot_StickySettings_Stickiness.Descriptor instead.
func (BidRequestLightWeight_AdSlot_StickySettings_Stickiness) EnumDescriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 9, 0}
}

// This is the message that Google uses to request bids. A BidRequest
// includes the ad slot from a single impression.
//
type BidRequestLightWeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique request id generated by Google. This is 16 bytes long.
	Id []byte `protobuf:"bytes,2,req,name=id" json:"id,omitempty"`
	// A string that identifies the browser and type of device that sent the
	// request. Certain data may be redacted or replaced.
	UserAgent           *string                                      `protobuf:"bytes,6,opt,name=user_agent,json=userAgent" json:"user_agent,omitempty"`
	BidResponseFeedback []*BidRequestLightWeight_BidResponseFeedback `protobuf:"bytes,44,rep,name=bid_response_feedback,json=bidResponseFeedback" json:"bid_response_feedback,omitempty"`
	Geo                 *BidRequestLightWeight_Geo                   `protobuf:"bytes,62,opt,name=geo" json:"geo,omitempty"`
	GeoCriteriaId       *int32                                       `protobuf:"varint,39,opt,name=geo_criteria_id,json=geoCriteriaId" json:"geo_criteria_id,omitempty"`
	KeyValue            []*BidRequestLightWeight_KeyValue            `protobuf:"bytes,38,rep,name=key_value,json=keyValue" json:"key_value,omitempty"`
	Adslot              []*BidRequestLightWeight_AdSlot              `protobuf:"bytes,14,rep,name=adslot" json:"adslot,omitempty"`
}

func (x *BidRequestLightWeight) Reset() {
	*x = BidRequestLightWeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bid_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequestLightWeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequestLightWeight) ProtoMessage() {}

func (x *BidRequestLightWeight) ProtoReflect() protoreflect.Message {
	mi := &file_bid_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequestLightWeight.ProtoReflect.Descriptor instead.
func (*BidRequestLightWeight) Descriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0}
}

func (x *BidRequestLightWeight) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BidRequestLightWeight) GetUserAgent() string {
	if x != nil && x.UserAgent != nil {
		return *x.UserAgent
	}
	return ""
}

func (x *BidRequestLightWeight) GetBidResponseFeedback() []*BidRequestLightWeight_BidResponseFeedback {
	if x != nil {
		return x.BidResponseFeedback
	}
	return nil
}

func (x *BidRequestLightWeight) GetGeo() *BidRequestLightWeight_Geo {
	if x != nil {
		return x.Geo
	}
	return nil
}

func (x *BidRequestLightWeight) GetGeoCriteriaId() int32 {
	if x != nil && x.GeoCriteriaId != nil {
		return *x.GeoCriteriaId
	}
	return 0
}

func (x *BidRequestLightWeight) GetKeyValue() []*BidRequestLightWeight_KeyValue {
	if x != nil {
		return x.KeyValue
	}
	return nil
}

func (x *BidRequestLightWeight) GetAdslot() []*BidRequestLightWeight_AdSlot {
	if x != nil {
		return x.Adslot
	}
	return nil
}

type BidResponseLightWeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ad               []*BidResponseLightWeight_Ad `protobuf:"bytes,2,rep,name=ad" json:"ad,omitempty"`
	ProcessingTimeMs *int32                       `protobuf:"varint,4,opt,name=processing_time_ms,json=processingTimeMs" json:"processing_time_ms,omitempty"`
}

func (x *BidResponseLightWeight) Reset() {
	*x = BidResponseLightWeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bid_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidResponseLightWeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidResponseLightWeight) ProtoMessage() {}

func (x *BidResponseLightWeight) ProtoReflect() protoreflect.Message {
	mi := &file_bid_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidResponseLightWeight.ProtoReflect.Descriptor instead.
func (*BidResponseLightWeight) Descriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{1}
}

func (x *BidResponseLightWeight) GetAd() []*BidResponseLightWeight_Ad {
	if x != nil {
		return x.Ad
	}
	return nil
}

func (x *BidResponseLightWeight) GetProcessingTimeMs() int32 {
	if x != nil && x.ProcessingTimeMs != nil {
		return *x.ProcessingTimeMs
	}
	return 0
}

type BidRequestLightWeight_BidResponseFeedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique id from BidRequest.id
	RequestId []byte `protobuf:"bytes,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	// The index of the BidResponse_Ad if there was more than one. The index
	// starts at zero for the first creative.
	CreativeIndex *int32 `protobuf:"varint,2,opt,name=creative_index,json=creativeIndex" json:"creative_index,omitempty"`
	// The status code for the ad. See creative-status-codes.txt in the
	// technical documentation for a list of ids.
	CreativeStatusCode *int32 `protobuf:"varint,3,opt,name=creative_status_code,json=creativeStatusCode" json:"creative_status_code,omitempty"`
	// If the bid won the auction, this is the price paid in your account
	// currency. If the bid participated in the auction but was out-bid, this
	// is the CPM that should have been exceeded in order to win. This is not
	// set if the bid was filtered prior to the auction, if the publisher or
	// winning bidder has opted out of price feedback or if your account has
	// opted out of sharing winning prices with other bidders. For first-price
	// auctions, minimum_bid_to_win is populated instead of this field.
	CpmMicros *int64 `protobuf:"varint,4,opt,name=cpm_micros,json=cpmMicros" json:"cpm_micros,omitempty"`
	// The minimum bid value necessary to have won the auction, in micros of
	// your account currency. If your bid won the auction, this is the second
	// highest bid that was not filtered (including the floor price). If your
	// bid did not win the auction, this is the winning candidate's bid. This
	// field will only be populated if your bid participated in a first-price
	// auction, and will not be populated if your bid was filtered prior to the
	// auction.
	MinimumBidToWin *int64 `protobuf:"varint,7,opt,name=minimum_bid_to_win,json=minimumBidToWin" json:"minimum_bid_to_win,omitempty"`
	// When a publisher uses an RTB auction and waterfall-based SDK mediation on
	// the same query, the winner of the real-time auction must also compete in
	// a mediation waterfall (which is ordered by price) to win the impression.
	// If the bid participated in the auction and there was no waterfall, the
	// value of this field is 0. If the bid participated in the auction and
	// there was a waterfall, the value of this field is a price representing a
	// sample bid from the eligible mediation networks that were higher than the
	// auction winner, weighted by expected fill rate. This field can be used
	// in conjunction with minimum_bid_to_win to train bidding models. The CPM
	// is in micros of your account currency.
	SampledMediationCpmAheadOfAuctionWinner *int64 `protobuf:"varint,10,opt,name=sampled_mediation_cpm_ahead_of_auction_winner,json=sampledMediationCpmAheadOfAuctionWinner" json:"sampled_mediation_cpm_ahead_of_auction_winner,omitempty"`
	// Event notification token that was included in the bid response.
	EventNotificationToken []byte `protobuf:"bytes,5,opt,name=event_notification_token,json=eventNotificationToken" json:"event_notification_token,omitempty"`
	// Buyer creative ID that was included in the bid response.
	BuyerCreativeId *string `protobuf:"bytes,6,opt,name=buyer_creative_id,json=buyerCreativeId" json:"buyer_creative_id,omitempty"`
}

func (x *BidRequestLightWeight_BidResponseFeedback) Reset() {
	*x = BidRequestLightWeight_BidResponseFeedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bid_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequestLightWeight_BidResponseFeedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequestLightWeight_BidResponseFeedback) ProtoMessage() {}

func (x *BidRequestLightWeight_BidResponseFeedback) ProtoReflect() protoreflect.Message {
	mi := &file_bid_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequestLightWeight_BidResponseFeedback.ProtoReflect.Descriptor instead.
func (*BidRequestLightWeight_BidResponseFeedback) Descriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 0}
}

func (x *BidRequestLightWeight_BidResponseFeedback) GetRequestId() []byte {
	if x != nil {
		return x.RequestId
	}
	return nil
}

func (x *BidRequestLightWeight_BidResponseFeedback) GetCreativeIndex() int32 {
	if x != nil && x.CreativeIndex != nil {
		return *x.CreativeIndex
	}
	return 0
}

func (x *BidRequestLightWeight_BidResponseFeedback) GetCreativeStatusCode() int32 {
	if x != nil && x.CreativeStatusCode != nil {
		return *x.CreativeStatusCode
	}
	return 0
}

func (x *BidRequestLightWeight_BidResponseFeedback) GetCpmMicros() int64 {
	if x != nil && x.CpmMicros != nil {
		return *x.CpmMicros
	}
	return 0
}

func (x *BidRequestLightWeight_BidResponseFeedback) GetMinimumBidToWin() int64 {
	if x != nil && x.MinimumBidToWin != nil {
		return *x.MinimumBidToWin
	}
	return 0
}

func (x *BidRequestLightWeight_BidResponseFeedback) GetSampledMediationCpmAheadOfAuctionWinner() int64 {
	if x != nil && x.SampledMediationCpmAheadOfAuctionWinner != nil {
		return *x.SampledMediationCpmAheadOfAuctionWinner
	}
	return 0
}

func (x *BidRequestLightWeight_BidResponseFeedback) GetEventNotificationToken() []byte {
	if x != nil {
		return x.EventNotificationToken
	}
	return nil
}

func (x *BidRequestLightWeight_BidResponseFeedback) GetBuyerCreativeId() string {
	if x != nil && x.BuyerCreativeId != nil {
		return *x.BuyerCreativeId
	}
	return ""
}

type BidRequestLightWeight_Geo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Latitude from -90.0 to +90.0, where negative is south.
	Lat *float64 `protobuf:"fixed64,1,opt,name=lat" json:"lat,omitempty"`
	// Longitude from -180.0 to +180.0, where negative is west.
	Lon *float64 `protobuf:"fixed64,2,opt,name=lon" json:"lon,omitempty"`
	// Country using ISO-3166-1 Alpha-3.
	Country *string `protobuf:"bytes,3,opt,name=country" json:"country,omitempty"`
	// Region code using ISO-3166-2; 2-letter state code if USA.
	Region *string `protobuf:"bytes,4,opt,name=region" json:"region,omitempty"`
	// Google metro code; similar to but not exactly Nielsen DMAs.
	Metro *string `protobuf:"bytes,6,opt,name=metro" json:"metro,omitempty"`
	// City using United Nations Code for Trade & Transport Locations.
	// (https://www.unece.org/cefact/locode/service/location.htm).
	City *string `protobuf:"bytes,7,opt,name=city" json:"city,omitempty"`
	// Zip/postal code.
	Zip *string `protobuf:"bytes,8,opt,name=zip" json:"zip,omitempty"`
	// Estimated location accuracy in meters.
	Accuracy *int32 `protobuf:"varint,11,opt,name=accuracy" json:"accuracy,omitempty"`
	// Local time as the number +/- of minutes from UTC.
	Utcoffset *int32 `protobuf:"varint,10,opt,name=utcoffset" json:"utcoffset,omitempty"`
}

func (x *BidRequestLightWeight_Geo) Reset() {
	*x = BidRequestLightWeight_Geo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bid_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequestLightWeight_Geo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequestLightWeight_Geo) ProtoMessage() {}

func (x *BidRequestLightWeight_Geo) ProtoReflect() protoreflect.Message {
	mi := &file_bid_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequestLightWeight_Geo.ProtoReflect.Descriptor instead.
func (*BidRequestLightWeight_Geo) Descriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 1}
}

func (x *BidRequestLightWeight_Geo) GetLat() float64 {
	if x != nil && x.Lat != nil {
		return *x.Lat
	}
	return 0
}

func (x *BidRequestLightWeight_Geo) GetLon() float64 {
	if x != nil && x.Lon != nil {
		return *x.Lon
	}
	return 0
}

func (x *BidRequestLightWeight_Geo) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *BidRequestLightWeight_Geo) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *BidRequestLightWeight_Geo) GetMetro() string {
	if x != nil && x.Metro != nil {
		return *x.Metro
	}
	return ""
}

func (x *BidRequestLightWeight_Geo) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *BidRequestLightWeight_Geo) GetZip() string {
	if x != nil && x.Zip != nil {
		return *x.Zip
	}
	return ""
}

func (x *BidRequestLightWeight_Geo) GetAccuracy() int32 {
	if x != nil && x.Accuracy != nil {
		return *x.Accuracy
	}
	return 0
}

func (x *BidRequestLightWeight_Geo) GetUtcoffset() int32 {
	if x != nil && x.Utcoffset != nil {
		return *x.Utcoffset
	}
	return 0
}

// Additional key-value attributes. Currently unused.
type BidRequestLightWeight_KeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *BidRequestLightWeight_KeyValue) Reset() {
	*x = BidRequestLightWeight_KeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bid_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequestLightWeight_KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequestLightWeight_KeyValue) ProtoMessage() {}

func (x *BidRequestLightWeight_KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_bid_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequestLightWeight_KeyValue.ProtoReflect.Descriptor instead.
func (*BidRequestLightWeight_KeyValue) Descriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 2}
}

func (x *BidRequestLightWeight_KeyValue) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *BidRequestLightWeight_KeyValue) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type BidRequestLightWeight_AdSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An arbitrarily assigned slot id that is unique on a given page and
	// usually starts counting from 1. You use this to identify which slot to
	// bid on in the BidResponse.
	Id *int32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// A stable identifier for the combination of publisher, ad slot, and page.
	AdBlockKey *uint64 `protobuf:"varint,14,opt,name=ad_block_key,json=adBlockKey" json:"ad_block_key,omitempty"`
	// Set of channels of which this ad slot is a member. A channel is a set of
	// ad slots on a site. You can target a channel (like "the sports section",
	// or "all top banners") to get more fine-grained control over where your ad
	// shows. Channel names are provided by the publisher.
	TargetableChannel []string `protobuf:"bytes,10,rep,name=targetable_channel,json=targetableChannel" json:"targetable_channel,omitempty"`
	// The width and height in pixels of the allowed ad sizes. Most requests
	// allow only a single size, but some allow more than one. Widths and
	// heights are at the same index. For example, if the width values are
	// [728, 300, 468] and the height values are [90, 250, 60], then the allowed
	// formats are 728x90, 300x250, and 468x60.
	//
	// For VAST video ad requests a single width/height pair specifies the
	// Google-detected video player size. If Google cannot detect the player
	// size the publisher-provided player size, if available, is used. For
	// VAST video ads, this size is informational; there is no restriction on
	// the size of the video ad that you can return.
	//
	// For mobile interstitial ads (including ones where video ads are eligible)
	// the first width height pair is the slot size (this is also the video
	// player size for VAST video ads). For many interstitials, this is the
	// screen size. Subsequent pairs are recommended interstitial ad sizes that
	// also meet the requirements for this interstitial.
	Width  []int32 `protobuf:"varint,2,rep,name=width" json:"width,omitempty"`
	Height []int32 `protobuf:"varint,3,rep,name=height" json:"height,omitempty"`
	// If the adslot is flexible, this contains settings on how the slot
	// may be resized.
	FlexibleAdslotSettings *BidRequestLightWeight_AdSlot_FlexibleAdSlotSettings `protobuf:"bytes,50,opt,name=flexible_adslot_settings,json=flexibleAdslotSettings" json:"flexible_adslot_settings,omitempty"`
	// The disallowed attribute ids for the ads that can show in this slot. See
	// the publisher-excludable-creative-attributes.txt file in the technical
	// documentation for a list of ids.
	ExcludedAttribute []int32 `protobuf:"varint,4,rep,packed,name=excluded_attribute,json=excludedAttribute" json:"excluded_attribute,omitempty"`
	// The allowed vendor types. See the vendors.txt file in the technical
	// documentation for a list of ids. This field does not apply to deals with
	// block overrides (see
	// https://support.google.com/authorizedbuyers/answer/6114194).
	AllowedVendorType []int32 `protobuf:"varint,6,rep,packed,name=allowed_vendor_type,json=allowedVendorType" json:"allowed_vendor_type,omitempty"`
	// Information about the ad tech providers for whom the publisher has
	// specified to Google that its EEA user has consented to the use of their
	// personal data for ads personalization in accordance with Google's EU User
	// Consent Policy. This field will only be populated when regs_gdpr is true.
	ConsentedProvidersSettings *BidRequestLightWeight_AdSlot_ConsentedProvidersSettings `protobuf:"bytes,42,opt,name=consented_providers_settings,json=consentedProvidersSettings" json:"consented_providers_settings,omitempty"`
	// This field will be set to true in either of the two following cases:
	//   1. Google receives a valid IAB Transparency and Consent Framework (TCF)
	//      v2 consent string and the Consent Management Platform indicates that
	//      GDPR applies to this ad request.
	//   2. Google does not receive an IAB TCF v2 consent string and, based on
	//      information available to Google, this impression will serve to an
	//      EEA user.
	// It does not constitute legal guidance on GDPR. This field is equivalent
	// to Regs.ext.gdpr in Google OpenRTB.
	RegsGdpr *bool `protobuf:"varint,43,opt,name=regs_gdpr,json=regsGdpr" json:"regs_gdpr,omitempty"`
	// This field will be set to true when, based on information available to
	// Google, this impression will serve to a user in Brazil. See
	// https://storage.googleapis.com/adx-rtb-dictionaries/lgpd-providers.csv
	// for the list of ad tech providers that are allowed to
	// serve on LGPD-enforced requests.
	//
	// See https://support.google.com/authorizedbuyers/answer/9928204 for more
	// information on LGPD.
	RegsLgpd *bool `protobuf:"varint,54,opt,name=regs_lgpd,json=regsLgpd" json:"regs_lgpd,omitempty"`
	// The disallowed sensitive ad categories. See the
	// ad-sensitive-categories.txt file in the technical documentation for a
	// list of ids. You should enforce these exclusions if you have the ability
	// to classify ads into the listed categories. This field does not apply to
	// deals with block overrides (see
	// https://support.google.com/authorizedbuyers/answer/6114194).
	ExcludedSensitiveCategory []int32 `protobuf:"varint,7,rep,packed,name=excluded_sensitive_category,json=excludedSensitiveCategory" json:"excluded_sensitive_category,omitempty"`
	// The allowed restricted ad categories for private and open auctions. See
	// the ad-restricted-categories.txt file in the technical documentation for
	// a list of ids. These only apply for private and open auction bids. See
	// the allowed_restricted_category_for_deals field for preferred deals or
	// programmatic guarantees. If you bid with an ad in a restricted category,
	// you MUST ALWAYS declare the category in the bid response regardless of
	// the values in this field.
	AllowedRestrictedCategory []int32 `protobuf:"varint,16,rep,packed,name=allowed_restricted_category,json=allowedRestrictedCategory" json:"allowed_restricted_category,omitempty"`
	// The allowed restricted ad categories for preferred deals or programmatic
	// guarantees. See the ad-restricted-categories.txt file in the technical
	// documentation for a list of ids. These only apply for preferred deals or
	// programmatic guarantees. See the allowed_restricted_category field for
	// private and open auctions. In some cases, restricted categories are only
	// allowed on preferred deals or programmatic guarantees, so this field
	// lists all categories in allowed_restricted_category, and additionally,
	// restricted categories that are only allowed for preferred deals or
	// programmatic guarantees. If you bid with an ad in a restricted category,
	// you MUST ALWAYS declare the category in the bid response regardless of
	// the values in this field.
	AllowedRestrictedCategoryForDeals []int32 `protobuf:"varint,22,rep,packed,name=allowed_restricted_category_for_deals,json=allowedRestrictedCategoryForDeals" json:"allowed_restricted_category_for_deals,omitempty"`
	// List of creative languages allowed by the publisher. The order is
	// arbitrary. The codes are 2 or 5 characters and are documented at
	// https://developers.google.com/google-ads/api/reference/data/codes-formats#languages.
	// When not set, all languages are allowed.
	AllowedLanguages []string `protobuf:"bytes,27,rep,name=allowed_languages,json=allowedLanguages" json:"allowed_languages,omitempty"`
	// The disallowed ad product categories. See the ad-product-categories.txt
	// file in the technical documentation for a list of ids. You should enforce
	// these exclusions if you have the ability to classify ads into the listed
	// categories. This field does not apply to deals with block overrides (see
	// https://support.google.com/authorizedbuyers/answer/6114194).
	ExcludedProductCategory []int32 `protobuf:"varint,13,rep,packed,name=excluded_product_category,json=excludedProductCategory" json:"excluded_product_category,omitempty"`
	// Creatives that are disallowed for the impression. Submitting a bid with
	// one of the creatives in this list will result in such bid being filtered
	// before the auction. Please contact your account manager if you would like
	// to enable this feature.
	ExcludedCreatives []*BidRequestLightWeight_AdSlot_ExcludedCreative `protobuf:"bytes,18,rep,name=excluded_creatives,json=excludedCreatives" json:"excluded_creatives,omitempty"`
	// Whether the adslot is only eligible for deals bids. Bids for the open
	// auction will be filtered when this field is set to true. Bidders can bid
	// on the open auction or deals when this field is set to false.
	OnlyDealBidsAccepted *bool                                          `protobuf:"varint,49,opt,name=only_deal_bids_accepted,json=onlyDealBidsAccepted" json:"only_deal_bids_accepted,omitempty"`
	MatchingAdData       []*BidRequestLightWeight_AdSlot_MatchingAdData `protobuf:"bytes,9,rep,name=matching_ad_data,json=matchingAdData" json:"matching_ad_data,omitempty"`
	// The publisher settings list ids that apply to this slot. See the RTB
	// Publisher Settings guide at
	// https://developers.google.com/authorized-buyers/rtb/pub-settings-guide
	// for details.
	PublisherSettingsListId     []uint64                                                  `protobuf:"fixed64,15,rep,name=publisher_settings_list_id,json=publisherSettingsListId" json:"publisher_settings_list_id,omitempty"`
	ExchangeBidding             *BidRequestLightWeight_AdSlot_ExchangeBidding             `protobuf:"bytes,28,opt,name=exchange_bidding,json=exchangeBidding" json:"exchange_bidding,omitempty"`
	OpenBidding                 *BidRequestLightWeight_AdSlot_OpenBidding                 `protobuf:"bytes,53,opt,name=open_bidding,json=openBidding" json:"open_bidding,omitempty"`
	CreativeEnforcementSettings *BidRequestLightWeight_AdSlot_CreativeEnforcementSettings `protobuf:"bytes,58,opt,name=creative_enforcement_settings,json=creativeEnforcementSettings" json:"creative_enforcement_settings,omitempty"`
	// The ad unit code (https://support.google.com/admanager/topic/4426071)
	// This is currently only set for exchange bidding requests.
	DfpAdUnitCode  *string                                      `protobuf:"bytes,33,opt,name=dfp_ad_unit_code,json=dfpAdUnitCode" json:"dfp_ad_unit_code,omitempty"`
	SlotVisibility *BidRequestLightWeight_AdSlot_SlotVisibility `protobuf:"varint,12,opt,name=slot_visibility,json=slotVisibility,enum=BidRequestLightWeight_AdSlot_SlotVisibility,def=0" json:"slot_visibility,omitempty"`
	// Viewability percentage for the ad slot. This is an estimate of the
	// likelihood that this slot will be viewable by the end user based on
	// historical and environment data. It is expressed as a percentage in the
	// range of [0, 100]. The default value -1 indicates that viewability could
	// not be estimated.
	Viewability *int32 `protobuf:"varint,21,opt,name=viewability,def=-1" json:"viewability,omitempty"`
	// Historical click-through rate for ads served in the ad slot. This is
	// expressed as a fraction in the range [0.0, 1.0]. The default value of
	// -1.0 indicates that historical click-through rate data is not available.
	// This figure does not include data aggregated from Google Ads.
	ClickThroughRate *float32 `protobuf:"fixed32,25,opt,name=click_through_rate,json=clickThroughRate,def=-1" json:"click_through_rate,omitempty"`
	// Historical completion rate for video ads served in the ad slot. This is
	// expressed as a fraction in the range [0.0, 1.0]. The default value of
	// -1.0 indicates that historical completion rate data is not available.
	// This field is only applicable to video inventory, and does not include
	// data aggregated from Google Ads.
	VideoCompletionRate *float32                                          `protobuf:"fixed32,30,opt,name=video_completion_rate,json=videoCompletionRate,def=-1" json:"video_completion_rate,omitempty"`
	IframingState       *BidRequestLightWeight_AdSlot_IFramingState       `protobuf:"varint,19,opt,name=iframing_state,json=iframingState,enum=BidRequestLightWeight_AdSlot_IFramingState,def=0" json:"iframing_state,omitempty"`
	IframingDepth       *BidRequestLightWeight_AdSlot_IFramingDepth       `protobuf:"varint,20,opt,name=iframing_depth,json=iframingDepth,enum=BidRequestLightWeight_AdSlot_IFramingDepth,def=0" json:"iframing_depth,omitempty"`
	NativeAdTemplate    []*BidRequestLightWeight_AdSlot_NativeAdTemplate  `protobuf:"bytes,51,rep,name=native_ad_template,json=nativeAdTemplate" json:"native_ad_template,omitempty"`
	NativePlacementType *BidRequestLightWeight_AdSlot_NativePlacementType `protobuf:"varint,45,opt,name=native_placement_type,json=nativePlacementType,enum=BidRequestLightWeight_AdSlot_NativePlacementType,def=0" json:"native_placement_type,omitempty"`
	MediationStatus     *BidRequestLightWeight_AdSlot_MediationStatus     `protobuf:"varint,52,opt,name=mediation_status,json=mediationStatus,enum=BidRequestLightWeight_AdSlot_MediationStatus,def=0" json:"mediation_status,omitempty"`
	AutoRefresh         *BidRequestLightWeight_AdSlot_AutoRefresh         `protobuf:"bytes,23,opt,name=auto_refresh,json=autoRefresh" json:"auto_refresh,omitempty"`
	StickySettings      *BidRequestLightWeight_AdSlot_StickySettings      `protobuf:"bytes,31,opt,name=sticky_settings,json=stickySettings" json:"sticky_settings,omitempty"`
	// Publisher declaration stating that this ad slot may serve on
	// non-browser inventory, like desktop apps.
	NonBrowserSlotSource *BidRequestLightWeight_AdSlot_NonBrowserSource     `protobuf:"varint,34,opt,name=non_browser_slot_source,json=nonBrowserSlotSource,enum=BidRequestLightWeight_AdSlot_NonBrowserSource,def=0" json:"non_browser_slot_source,omitempty"`
	Renderer             *BidRequestLightWeight_AdSlot_Renderer             `protobuf:"varint,26,opt,name=renderer,enum=BidRequestLightWeight_AdSlot_Renderer,def=0" json:"renderer,omitempty"`
	AmpAdRequestType     *BidRequestLightWeight_AdSlot_AmpAdRequestType     `protobuf:"varint,29,opt,name=amp_ad_request_type,json=ampAdRequestType,enum=BidRequestLightWeight_AdSlot_AmpAdRequestType,def=1" json:"amp_ad_request_type,omitempty"`
	IsAmpPage            *BidRequestLightWeight_AdSlot_AmpPage              `protobuf:"varint,38,opt,name=is_amp_page,json=isAmpPage,enum=BidRequestLightWeight_AdSlot_AmpPage" json:"is_amp_page,omitempty"`
	AmpAdRequirementType *BidRequestLightWeight_AdSlot_AmpAdRequirementType `protobuf:"varint,39,opt,name=amp_ad_requirement_type,json=ampAdRequirementType,enum=BidRequestLightWeight_AdSlot_AmpAdRequirementType" json:"amp_ad_requirement_type,omitempty"`
	// Whether the user receives a reward for viewing the ad. For video ads,
	// typical implementations allow users to read an additional news article
	// for free, receive an extra life in a game, or get a sponsored ad-free
	// music session. The reward is typically distributed after the video ad is
	// completed.
	IsRewarded     *bool                                        `protobuf:"varint,32,opt,name=is_rewarded,json=isRewarded,def=0" json:"is_rewarded,omitempty"`
	AllowedAdTypes []BidRequestLightWeight_AdSlot_AllowedAdType `protobuf:"varint,36,rep,packed,name=allowed_ad_types,json=allowedAdTypes,enum=BidRequestLightWeight_AdSlot_AllowedAdType" json:"allowed_ad_types,omitempty"`
	// Total number of impressions served to this user (within this specific
	// site or app) in this browsing session, plus 1. A session ends after 30
	// minutes inactivity. The default value of -1 indicates that the session
	// depth cannot be estimated.
	SessionDepth              *int32                                                    `protobuf:"varint,40,opt,name=session_depth,json=sessionDepth,def=-1" json:"session_depth,omitempty"`
	BuyerGeneratedRequestData []*BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData `protobuf:"bytes,41,rep,name=buyer_generated_request_data,json=buyerGeneratedRequestData" json:"buyer_generated_request_data,omitempty"`
	// List of supported API frameworks for this impression.
	Api []BidRequestLightWeight_AdSlot_APIFramework `protobuf:"varint,46,rep,packed,name=api,enum=BidRequestLightWeight_AdSlot_APIFramework" json:"api,omitempty"`
	// For ads rendered using a custom SDK only: multiplier applied to bid in
	// the auction. The adjustment reflects the likelihood that your bid would
	// generate a billable event (i.e. the ad renders successfully) if it won
	// the auction, relative to the probability that other bids generate a
	// billable event if they won the auction. This adjustment can be larger or
	// smaller than 1. This affects the final ranking in the auction only; in
	// particular, this multiplier does not affect the payment.
	BillableEventRateAdjustment *float64                                       `protobuf:"fixed64,59,opt,name=billable_event_rate_adjustment,json=billableEventRateAdjustment,def=1" json:"billable_event_rate_adjustment,omitempty"`
	MultiAdsCellInfo            *BidRequestLightWeight_AdSlot_MultiAdsCellInfo `protobuf:"bytes,55,opt,name=multi_ads_cell_info,json=multiAdsCellInfo" json:"multi_ads_cell_info,omitempty"`
	// Identifier of the OM SDK integration. For more info, see the OpenRTB
	// Advisory for Open Measurement SDK:
	// https://github.com/InteractiveAdvertisingBureau/AdCOM/blob/master/OpenRTB%20support%20for%20OMSDK.md#openrtb-and-adcom.
	Omidpn *string `protobuf:"bytes,56,opt,name=omidpn" json:"omidpn,omitempty"`
	// Version of the OM SDK integration. For more info, see the OpenRTB
	// Advisory for Open Measurement SDK:
	// https://github.com/InteractiveAdvertisingBureau/AdCOM/blob/master/OpenRTB%20support%20for%20OMSDK.md#openrtb-and-adcom.
	Omidpv *string `protobuf:"bytes,57,opt,name=omidpv" json:"omidpv,omitempty"`
	// Specifies where the ad auction runs.
	AuctionEnvironment *BidRequestLightWeight_AdSlot_AuctionEnvironment `protobuf:"varint,61,opt,name=auction_environment,json=auctionEnvironment,enum=BidRequestLightWeight_AdSlot_AuctionEnvironment,def=0" json:"auction_environment,omitempty"`
}

// Default values for BidRequestLightWeight_AdSlot fields.
const (
	Default_BidRequestLightWeight_AdSlot_SlotVisibility              = BidRequestLightWeight_AdSlot_NO_DETECTION
	Default_BidRequestLightWeight_AdSlot_Viewability                 = int32(-1)
	Default_BidRequestLightWeight_AdSlot_ClickThroughRate            = float32(-1)
	Default_BidRequestLightWeight_AdSlot_VideoCompletionRate         = float32(-1)
	Default_BidRequestLightWeight_AdSlot_IframingState               = BidRequestLightWeight_AdSlot_UNKNOWN_IFRAME_STATE
	Default_BidRequestLightWeight_AdSlot_IframingDepth               = BidRequestLightWeight_AdSlot_UNKNOWN_IFRAME_DEPTH
	Default_BidRequestLightWeight_AdSlot_NativePlacementType         = BidRequestLightWeight_AdSlot_PLACEMENT_UNKNOWN
	Default_BidRequestLightWeight_AdSlot_MediationStatus             = BidRequestLightWeight_AdSlot_UNKNOWN
	Default_BidRequestLightWeight_AdSlot_NonBrowserSlotSource        = BidRequestLightWeight_AdSlot_UNDECLARED_SOURCE
	Default_BidRequestLightWeight_AdSlot_Renderer                    = BidRequestLightWeight_AdSlot_UNKNOWN_RENDERER
	Default_BidRequestLightWeight_AdSlot_AmpAdRequestType            = BidRequestLightWeight_AdSlot_NON_AMP_PAGE
	Default_BidRequestLightWeight_AdSlot_IsRewarded                  = bool(false)
	Default_BidRequestLightWeight_AdSlot_SessionDepth                = int32(-1)
	Default_BidRequestLightWeight_AdSlot_BillableEventRateAdjustment = float64(1)
	Default_BidRequestLightWeight_AdSlot_AuctionEnvironment          = BidRequestLightWeight_AdSlot_SERVER_SIDE_AUCTION
)

func (x *BidRequestLightWeight_AdSlot) Reset() {
	*x = BidRequestLightWeight_AdSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bid_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequestLightWeight_AdSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequestLightWeight_AdSlot) ProtoMessage() {}

func (x *BidRequestLightWeight_AdSlot) ProtoReflect() protoreflect.Message {
	mi := &file_bid_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequestLightWeight_AdSlot.ProtoReflect.Descriptor instead.
func (*BidRequestLightWeight_AdSlot) Descriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3}
}

func (x *BidRequestLightWeight_AdSlot) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *BidRequestLightWeight_AdSlot) GetAdBlockKey() uint64 {
	if x != nil && x.AdBlockKey != nil {
		return *x.AdBlockKey
	}
	return 0
}

func (x *BidRequestLightWeight_AdSlot) GetTargetableChannel() []string {
	if x != nil {
		return x.TargetableChannel
	}
	return nil
}

func (x *BidRequestLightWeight_AdSlot) GetWidth() []int32 {
	if x != nil {
		return x.Width
	}
	return nil
}

func (x *BidRequestLightWeight_AdSlot) GetHeight() []int32 {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *BidRequestLightWeight_AdSlot) GetFlexibleAdslotSettings() *BidRequestLightWeight_AdSlot_FlexibleAdSlotSettings {
	if x != nil {
		return x.FlexibleAdslotSettings
	}
	return nil
}

func (x *BidRequestLightWeight_AdSlot) GetExcludedAttribute() []int32 {
	if x != nil {
		return x.ExcludedAttribute
	}
	return nil
}

func (x *BidRequestLightWeight_AdSlot) GetAllowedVendorType() []int32 {
	if x != nil {
		return x.AllowedVendorType
	}
	return nil
}

func (x *BidRequestLightWeight_AdSlot) GetConsentedProvidersSettings() *BidRequestLightWeight_AdSlot_ConsentedProvidersSettings {
	if x != nil {
		return x.ConsentedProvidersSettings
	}
	return nil
}

func (x *BidRequestLightWeight_AdSlot) GetRegsGdpr() bool {
	if x != nil && x.RegsGdpr != nil {
		return *x.RegsGdpr
	}
	return false
}

func (x *BidRequestLightWeight_AdSlot) GetRegsLgpd() bool {
	if x != nil && x.RegsLgpd != nil {
		return *x.RegsLgpd
	}
	return false
}

func (x *BidRequestLightWeight_AdSlot) GetExcludedSensitiveCategory() []int32 {
	if x != nil {
		return x.ExcludedSensitiveCategory
	}
	return nil
}

func (x *BidRequestLightWeight_AdSlot) GetAllowedRestrictedCategory() []int32 {
	if x != nil {
		return x.AllowedRestrictedCategory
	}
	return nil
}

func (x *BidRequestLightWeight_AdSlot) GetAllowedRestrictedCategoryForDeals() []int32 {
	if x != nil {
		return x.AllowedRestrictedCategoryForDeals
	}
	return nil
}

func (x *BidRequestLightWeight_AdSlot) GetAllowedLanguages() []string {
	if x != nil {
		return x.AllowedLanguages
	}
	return nil
}

func (x *BidRequestLightWeight_AdSlot) GetExcludedProductCategory() []int32 {
	if x != nil {
		return x.ExcludedProductCategory
	}
	return nil
}

func (x *BidRequestLightWeight_AdSlot) GetExcludedCreatives() []*BidRequestLightWeight_AdSlot_ExcludedCreative {
	if x != nil {
		return x.ExcludedCreatives
	}
	return nil
}

func (x *BidRequestLightWeight_AdSlot) GetOnlyDealBidsAccepted() bool {
	if x != nil && x.OnlyDealBidsAccepted != nil {
		return *x.OnlyDealBidsAccepted
	}
	return false
}

func (x *BidRequestLightWeight_AdSlot) GetMatchingAdData() []*BidRequestLightWeight_AdSlot_MatchingAdData {
	if x != nil {
		return x.MatchingAdData
	}
	return nil
}

func (x *BidRequestLightWeight_AdSlot) GetPublisherSettingsListId() []uint64 {
	if x != nil {
		return x.PublisherSettingsListId
	}
	return nil
}

func (x *BidRequestLightWeight_AdSlot) GetExchangeBidding() *BidRequestLightWeight_AdSlot_ExchangeBidding {
	if x != nil {
		return x.ExchangeBidding
	}
	return nil
}

func (x *BidRequestLightWeight_AdSlot) GetOpenBidding() *BidRequestLightWeight_AdSlot_OpenBidding {
	if x != nil {
		return x.OpenBidding
	}
	return nil
}

func (x *BidRequestLightWeight_AdSlot) GetCreativeEnforcementSettings() *BidRequestLightWeight_AdSlot_CreativeEnforcementSettings {
	if x != nil {
		return x.CreativeEnforcementSettings
	}
	return nil
}

func (x *BidRequestLightWeight_AdSlot) GetDfpAdUnitCode() string {
	if x != nil && x.DfpAdUnitCode != nil {
		return *x.DfpAdUnitCode
	}
	return ""
}

func (x *BidRequestLightWeight_AdSlot) GetSlotVisibility() BidRequestLightWeight_AdSlot_SlotVisibility {
	if x != nil && x.SlotVisibility != nil {
		return *x.SlotVisibility
	}
	return Default_BidRequestLightWeight_AdSlot_SlotVisibility
}

func (x *BidRequestLightWeight_AdSlot) GetViewability() int32 {
	if x != nil && x.Viewability != nil {
		return *x.Viewability
	}
	return Default_BidRequestLightWeight_AdSlot_Viewability
}

func (x *BidRequestLightWeight_AdSlot) GetClickThroughRate() float32 {
	if x != nil && x.ClickThroughRate != nil {
		return *x.ClickThroughRate
	}
	return Default_BidRequestLightWeight_AdSlot_ClickThroughRate
}

func (x *BidRequestLightWeight_AdSlot) GetVideoCompletionRate() float32 {
	if x != nil && x.VideoCompletionRate != nil {
		return *x.VideoCompletionRate
	}
	return Default_BidRequestLightWeight_AdSlot_VideoCompletionRate
}

func (x *BidRequestLightWeight_AdSlot) GetIframingState() BidRequestLightWeight_AdSlot_IFramingState {
	if x != nil && x.IframingState != nil {
		return *x.IframingState
	}
	return Default_BidRequestLightWeight_AdSlot_IframingState
}

func (x *BidRequestLightWeight_AdSlot) GetIframingDepth() BidRequestLightWeight_AdSlot_IFramingDepth {
	if x != nil && x.IframingDepth != nil {
		return *x.IframingDepth
	}
	return Default_BidRequestLightWeight_AdSlot_IframingDepth
}

func (x *BidRequestLightWeight_AdSlot) GetNativeAdTemplate() []*BidRequestLightWeight_AdSlot_NativeAdTemplate {
	if x != nil {
		return x.NativeAdTemplate
	}
	return nil
}

func (x *BidRequestLightWeight_AdSlot) GetNativePlacementType() BidRequestLightWeight_AdSlot_NativePlacementType {
	if x != nil && x.NativePlacementType != nil {
		return *x.NativePlacementType
	}
	return Default_BidRequestLightWeight_AdSlot_NativePlacementType
}

func (x *BidRequestLightWeight_AdSlot) GetMediationStatus() BidRequestLightWeight_AdSlot_MediationStatus {
	if x != nil && x.MediationStatus != nil {
		return *x.MediationStatus
	}
	return Default_BidRequestLightWeight_AdSlot_MediationStatus
}

func (x *BidRequestLightWeight_AdSlot) GetAutoRefresh() *BidRequestLightWeight_AdSlot_AutoRefresh {
	if x != nil {
		return x.AutoRefresh
	}
	return nil
}

func (x *BidRequestLightWeight_AdSlot) GetStickySettings() *BidRequestLightWeight_AdSlot_StickySettings {
	if x != nil {
		return x.StickySettings
	}
	return nil
}

func (x *BidRequestLightWeight_AdSlot) GetNonBrowserSlotSource() BidRequestLightWeight_AdSlot_NonBrowserSource {
	if x != nil && x.NonBrowserSlotSource != nil {
		return *x.NonBrowserSlotSource
	}
	return Default_BidRequestLightWeight_AdSlot_NonBrowserSlotSource
}

func (x *BidRequestLightWeight_AdSlot) GetRenderer() BidRequestLightWeight_AdSlot_Renderer {
	if x != nil && x.Renderer != nil {
		return *x.Renderer
	}
	return Default_BidRequestLightWeight_AdSlot_Renderer
}

func (x *BidRequestLightWeight_AdSlot) GetAmpAdRequestType() BidRequestLightWeight_AdSlot_AmpAdRequestType {
	if x != nil && x.AmpAdRequestType != nil {
		return *x.AmpAdRequestType
	}
	return Default_BidRequestLightWeight_AdSlot_AmpAdRequestType
}

func (x *BidRequestLightWeight_AdSlot) GetIsAmpPage() BidRequestLightWeight_AdSlot_AmpPage {
	if x != nil && x.IsAmpPage != nil {
		return *x.IsAmpPage
	}
	return BidRequestLightWeight_AdSlot_UNKNOWN_AMP_PAGE
}

func (x *BidRequestLightWeight_AdSlot) GetAmpAdRequirementType() BidRequestLightWeight_AdSlot_AmpAdRequirementType {
	if x != nil && x.AmpAdRequirementType != nil {
		return *x.AmpAdRequirementType
	}
	return BidRequestLightWeight_AdSlot_UNKNOWN_AMP_AD_REQUIREMENT_TYPE
}

func (x *BidRequestLightWeight_AdSlot) GetIsRewarded() bool {
	if x != nil && x.IsRewarded != nil {
		return *x.IsRewarded
	}
	return Default_BidRequestLightWeight_AdSlot_IsRewarded
}

func (x *BidRequestLightWeight_AdSlot) GetAllowedAdTypes() []BidRequestLightWeight_AdSlot_AllowedAdType {
	if x != nil {
		return x.AllowedAdTypes
	}
	return nil
}

func (x *BidRequestLightWeight_AdSlot) GetSessionDepth() int32 {
	if x != nil && x.SessionDepth != nil {
		return *x.SessionDepth
	}
	return Default_BidRequestLightWeight_AdSlot_SessionDepth
}

func (x *BidRequestLightWeight_AdSlot) GetBuyerGeneratedRequestData() []*BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData {
	if x != nil {
		return x.BuyerGeneratedRequestData
	}
	return nil
}

func (x *BidRequestLightWeight_AdSlot) GetApi() []BidRequestLightWeight_AdSlot_APIFramework {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *BidRequestLightWeight_AdSlot) GetBillableEventRateAdjustment() float64 {
	if x != nil && x.BillableEventRateAdjustment != nil {
		return *x.BillableEventRateAdjustment
	}
	return Default_BidRequestLightWeight_AdSlot_BillableEventRateAdjustment
}

func (x *BidRequestLightWeight_AdSlot) GetMultiAdsCellInfo() *BidRequestLightWeight_AdSlot_MultiAdsCellInfo {
	if x != nil {
		return x.MultiAdsCellInfo
	}
	return nil
}

func (x *BidRequestLightWeight_AdSlot) GetOmidpn() string {
	if x != nil && x.Omidpn != nil {
		return *x.Omidpn
	}
	return ""
}

func (x *BidRequestLightWeight_AdSlot) GetOmidpv() string {
	if x != nil && x.Omidpv != nil {
		return *x.Omidpv
	}
	return ""
}

func (x *BidRequestLightWeight_AdSlot) GetAuctionEnvironment() BidRequestLightWeight_AdSlot_AuctionEnvironment {
	if x != nil && x.AuctionEnvironment != nil {
		return *x.AuctionEnvironment
	}
	return Default_BidRequestLightWeight_AdSlot_AuctionEnvironment
}

type BidRequestLightWeight_AdSlot_FlexibleAdSlotSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxWidth  *int32 `protobuf:"varint,1,opt,name=max_width,json=maxWidth" json:"max_width,omitempty"`
	MaxHeight *int32 `protobuf:"varint,2,opt,name=max_height,json=maxHeight" json:"max_height,omitempty"`
	MinWidth  *int32 `protobuf:"varint,3,opt,name=min_width,json=minWidth" json:"min_width,omitempty"`
	MinHeight *int32 `protobuf:"varint,4,opt,name=min_height,json=minHeight" json:"min_height,omitempty"`
}

func (x *BidRequestLightWeight_AdSlot_FlexibleAdSlotSettings) Reset() {
	*x = BidRequestLightWeight_AdSlot_FlexibleAdSlotSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bid_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequestLightWeight_AdSlot_FlexibleAdSlotSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequestLightWeight_AdSlot_FlexibleAdSlotSettings) ProtoMessage() {}

func (x *BidRequestLightWeight_AdSlot_FlexibleAdSlotSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bid_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequestLightWeight_AdSlot_FlexibleAdSlotSettings.ProtoReflect.Descriptor instead.
func (*BidRequestLightWeight_AdSlot_FlexibleAdSlotSettings) Descriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *BidRequestLightWeight_AdSlot_FlexibleAdSlotSettings) GetMaxWidth() int32 {
	if x != nil && x.MaxWidth != nil {
		return *x.MaxWidth
	}
	return 0
}

func (x *BidRequestLightWeight_AdSlot_FlexibleAdSlotSettings) GetMaxHeight() int32 {
	if x != nil && x.MaxHeight != nil {
		return *x.MaxHeight
	}
	return 0
}

func (x *BidRequestLightWeight_AdSlot_FlexibleAdSlotSettings) GetMinWidth() int32 {
	if x != nil && x.MinWidth != nil {
		return *x.MinWidth
	}
	return 0
}

func (x *BidRequestLightWeight_AdSlot_FlexibleAdSlotSettings) GetMinHeight() int32 {
	if x != nil && x.MinHeight != nil {
		return *x.MinHeight
	}
	return 0
}

type BidRequestLightWeight_AdSlot_ConsentedProvidersSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set of IDs corresponding to ad tech providers (ATPs) for whom the
	// publisher has specified to Google that its EEA users have given legally
	// valid consent to: 1) the use of cookies or other local storage where
	// legally required; and 2) the collection, sharing, and use of personal
	// data for personalization of ads by an ATP in accordance with Google's
	// EU User Consent Policy.
	//
	// If a publisher is using the IAB Transparency and Consent Framework
	// (TCF) v2 to manage user consent, this is the set of ATPs consented via
	// the Additional Consent string (see
	// https://support.google.com/admanager/answer/9681920 for details about
	// Google's Additional Consent mode). ATPs consented via the TCF v2
	// consent string are represented in the
	// ConsentedProvidersSettings.tcf_consent_string field.
	//
	// A mapping of ATP ID to ATP name is posted at providers.csv.
	ConsentedProviders []int64 `protobuf:"varint,2,rep,packed,name=consented_providers,json=consentedProviders" json:"consented_providers,omitempty"`
	// The web-safe base64-encoded IAB Transparency and Consent Framework
	// (TCF) v2 consent string fetched from the publisher's IAB Consent
	// Management Platform (CMP). The structure of the string is defined by
	// the IAB TCF v2. This field will be populated if the publisher has
	// integrated with a CMP for TCF v2 and that CMP indicates that GDPR
	// applies to this ad request and provides a valid consent string. See
	// https://support.google.com/authorizedbuyers/answer/9789378 for
	// additional information about the Google TCF v2 integration.
	//
	// See the IAB Global Vendor List at
	// https://vendor-list.consensu.org/v2/vendor-list.json for details about
	// the vendors listed in the consent string.
	TcfConsentString *string `protobuf:"bytes,3,opt,name=tcf_consent_string,json=tcfConsentString" json:"tcf_consent_string,omitempty"`
	// The raw Additional Consent string, which contains a list of certain
	// Google Ad Tech Providers (ATPs). These ATPs are not registered with IAB
	// TCF v2, but publishers or their Consent Management Providers (CMPs)
	// have ensured that certain disclosures are given to, and consents are
	// obtained from, end users, as required by Google's EU User Consent
	// Policy. This field is only populated with the use of CMPs that are
	// integrated with IAB TCF v2. Such CMPs use the raw Additional Consent
	// string to indicate vendors that are not registered with IAB, and
	// communicate end users' CMP choices to those vendors. The
	// consented_providers field contains the set of vendors that mirrors the
	// one represented by the additional_consent_string field, which is in the
	// raw form. Vendors or any other third-party service providers must not
	// create AC strings themselves.
	//
	// See https://support.google.com/admanager/answer/9681920 for more
	// details about this field.
	AdditionalConsentString *string `protobuf:"bytes,4,opt,name=additional_consent_string,json=additionalConsentString" json:"additional_consent_string,omitempty"`
}

func (x *BidRequestLightWeight_AdSlot_ConsentedProvidersSettings) Reset() {
	*x = BidRequestLightWeight_AdSlot_ConsentedProvidersSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bid_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequestLightWeight_AdSlot_ConsentedProvidersSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequestLightWeight_AdSlot_ConsentedProvidersSettings) ProtoMessage() {}

func (x *BidRequestLightWeight_AdSlot_ConsentedProvidersSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bid_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequestLightWeight_AdSlot_ConsentedProvidersSettings.ProtoReflect.Descriptor instead.
func (*BidRequestLightWeight_AdSlot_ConsentedProvidersSettings) Descriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 1}
}

func (x *BidRequestLightWeight_AdSlot_ConsentedProvidersSettings) GetConsentedProviders() []int64 {
	if x != nil {
		return x.ConsentedProviders
	}
	return nil
}

func (x *BidRequestLightWeight_AdSlot_ConsentedProvidersSettings) GetTcfConsentString() string {
	if x != nil && x.TcfConsentString != nil {
		return *x.TcfConsentString
	}
	return ""
}

func (x *BidRequestLightWeight_AdSlot_ConsentedProvidersSettings) GetAdditionalConsentString() string {
	if x != nil && x.AdditionalConsentString != nil {
		return *x.AdditionalConsentString
	}
	return ""
}

// A creative that is disallowed to bid on this impression due to Ad
// Exchange policies or creative disapproval, excluded creative attributes,
// excluded product or sensitive categories, allowed vendor types,
// restricted categories or languages applicable to the bid request.
type BidRequestLightWeight_AdSlot_ExcludedCreative struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Buyer creative ID of the disallowed creative.
	BuyerCreativeId *string `protobuf:"bytes,1,opt,name=buyer_creative_id,json=buyerCreativeId" json:"buyer_creative_id,omitempty"`
}

func (x *BidRequestLightWeight_AdSlot_ExcludedCreative) Reset() {
	*x = BidRequestLightWeight_AdSlot_ExcludedCreative{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bid_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequestLightWeight_AdSlot_ExcludedCreative) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequestLightWeight_AdSlot_ExcludedCreative) ProtoMessage() {}

func (x *BidRequestLightWeight_AdSlot_ExcludedCreative) ProtoReflect() protoreflect.Message {
	mi := &file_bid_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequestLightWeight_AdSlot_ExcludedCreative.ProtoReflect.Descriptor instead.
func (*BidRequestLightWeight_AdSlot_ExcludedCreative) Descriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 2}
}

func (x *BidRequestLightWeight_AdSlot_ExcludedCreative) GetBuyerCreativeId() string {
	if x != nil && x.BuyerCreativeId != nil {
		return *x.BuyerCreativeId
	}
	return ""
}

// Information about the pre-targeting configs that matched.
//
type BidRequestLightWeight_AdSlot_MatchingAdData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The billing ids corresponding to the pretargeting configs that matched.
	BillingId []int64 `protobuf:"varint,2,rep,name=billing_id,json=billingId" json:"billing_id,omitempty"`
	// The minimum CPM value that you can bid to not be filtered before the
	// auction. This may be a global minimum, or it may be a minimum set by
	// the publisher. The value is in micros of the bidding currency.
	// The bidding currency is determined by:
	// 1. The bidder-level currency, if configured.
	// 2. Otherwise, the currency of the buyer accounts indicated by the
	// billing IDs in the billing_id field.
	MinimumCpmMicros *int64                                                    `protobuf:"varint,5,opt,name=minimum_cpm_micros,json=minimumCpmMicros" json:"minimum_cpm_micros,omitempty"`
	DirectDeal       []*BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal `protobuf:"bytes,6,rep,name=direct_deal,json=directDeal" json:"direct_deal,omitempty"`
}

func (x *BidRequestLightWeight_AdSlot_MatchingAdData) Reset() {
	*x = BidRequestLightWeight_AdSlot_MatchingAdData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bid_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequestLightWeight_AdSlot_MatchingAdData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequestLightWeight_AdSlot_MatchingAdData) ProtoMessage() {}

func (x *BidRequestLightWeight_AdSlot_MatchingAdData) ProtoReflect() protoreflect.Message {
	mi := &file_bid_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequestLightWeight_AdSlot_MatchingAdData.ProtoReflect.Descriptor instead.
func (*BidRequestLightWeight_AdSlot_MatchingAdData) Descriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 3}
}

func (x *BidRequestLightWeight_AdSlot_MatchingAdData) GetBillingId() []int64 {
	if x != nil {
		return x.BillingId
	}
	return nil
}

func (x *BidRequestLightWeight_AdSlot_MatchingAdData) GetMinimumCpmMicros() int64 {
	if x != nil && x.MinimumCpmMicros != nil {
		return *x.MinimumCpmMicros
	}
	return 0
}

func (x *BidRequestLightWeight_AdSlot_MatchingAdData) GetDirectDeal() []*BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal {
	if x != nil {
		return x.DirectDeal
	}
	return nil
}

// Parameters related to exchange bidding (third party exchanges doing
// real-time bidding on DFP). This is never populated in calls to AdX
// real-time bidders.
//
type BidRequestLightWeight_AdSlot_ExchangeBidding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Repeated KeyValue pairs to be sent from the publisher to the
	// exchange bidder.
	KeyValue []*BidRequestLightWeight_KeyValue `protobuf:"bytes,3,rep,name=key_value,json=keyValue" json:"key_value,omitempty"`
}

func (x *BidRequestLightWeight_AdSlot_ExchangeBidding) Reset() {
	*x = BidRequestLightWeight_AdSlot_ExchangeBidding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bid_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequestLightWeight_AdSlot_ExchangeBidding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequestLightWeight_AdSlot_ExchangeBidding) ProtoMessage() {}

func (x *BidRequestLightWeight_AdSlot_ExchangeBidding) ProtoReflect() protoreflect.Message {
	mi := &file_bid_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequestLightWeight_AdSlot_ExchangeBidding.ProtoReflect.Descriptor instead.
func (*BidRequestLightWeight_AdSlot_ExchangeBidding) Descriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 4}
}

func (x *BidRequestLightWeight_AdSlot_ExchangeBidding) GetKeyValue() []*BidRequestLightWeight_KeyValue {
	if x != nil {
		return x.KeyValue
	}
	return nil
}

// Parameters related to Open Bidding.
type BidRequestLightWeight_AdSlot_OpenBidding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field is set to true if the publisher set up a yield group or a
	// mediation group that targets this adslot and this bidder. See
	// https://support.google.com/admanager/answer/7128453 for information on
	// Open Bidding and its effects on the bidding process.
	IsOpenBidding *bool `protobuf:"varint,2,opt,name=is_open_bidding,json=isOpenBidding" json:"is_open_bidding,omitempty"`
}

func (x *BidRequestLightWeight_AdSlot_OpenBidding) Reset() {
	*x = BidRequestLightWeight_AdSlot_OpenBidding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bid_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequestLightWeight_AdSlot_OpenBidding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequestLightWeight_AdSlot_OpenBidding) ProtoMessage() {}

func (x *BidRequestLightWeight_AdSlot_OpenBidding) ProtoReflect() protoreflect.Message {
	mi := &file_bid_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequestLightWeight_AdSlot_OpenBidding.ProtoReflect.Descriptor instead.
func (*BidRequestLightWeight_AdSlot_OpenBidding) Descriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 5}
}

func (x *BidRequestLightWeight_AdSlot_OpenBidding) GetIsOpenBidding() bool {
	if x != nil && x.IsOpenBidding != nil {
		return *x.IsOpenBidding
	}
	return false
}

// Indicates the creative policy and publisher blocks that applies to this
// request.
type BidRequestLightWeight_AdSlot_CreativeEnforcementSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyEnforcement          *BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PolicyEnforcement          `protobuf:"varint,1,opt,name=policy_enforcement,json=policyEnforcement,enum=BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PolicyEnforcement" json:"policy_enforcement,omitempty"`
	PublisherBlocksEnforcement *BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement `protobuf:"varint,3,opt,name=publisher_blocks_enforcement,json=publisherBlocksEnforcement,enum=BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement" json:"publisher_blocks_enforcement,omitempty"`
	// Deprecated. This will be removed in August 2022.
	//
	// Indicates whether the policy, scan and publisher blocks level
	// combination is the default combination for this bidder. Please use
	// policy_enforcement and publisher_blocks_enforcement in
	// CreativeEnforcementSettings to learn which creative policy and
	// publisher blocks apply to the request.
	//
	// Deprecated: Do not use.
	IsDefault *bool `protobuf:"varint,4,opt,name=is_default,json=isDefault" json:"is_default,omitempty"`
}

func (x *BidRequestLightWeight_AdSlot_CreativeEnforcementSettings) Reset() {
	*x = BidRequestLightWeight_AdSlot_CreativeEnforcementSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bid_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequestLightWeight_AdSlot_CreativeEnforcementSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequestLightWeight_AdSlot_CreativeEnforcementSettings) ProtoMessage() {}

func (x *BidRequestLightWeight_AdSlot_CreativeEnforcementSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bid_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequestLightWeight_AdSlot_CreativeEnforcementSettings.ProtoReflect.Descriptor instead.
func (*BidRequestLightWeight_AdSlot_CreativeEnforcementSettings) Descriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 6}
}

func (x *BidRequestLightWeight_AdSlot_CreativeEnforcementSettings) GetPolicyEnforcement() BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PolicyEnforcement {
	if x != nil && x.PolicyEnforcement != nil {
		return *x.PolicyEnforcement
	}
	return BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_POLICY_ENFORCEMENT_UNKNOWN
}

func (x *BidRequestLightWeight_AdSlot_CreativeEnforcementSettings) GetPublisherBlocksEnforcement() BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement {
	if x != nil && x.PublisherBlocksEnforcement != nil {
		return *x.PublisherBlocksEnforcement
	}
	return BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PUBLISHER_BLOCKS_ENFORCEMENT_UNKNOWN
}

// Deprecated: Do not use.
func (x *BidRequestLightWeight_AdSlot_CreativeEnforcementSettings) GetIsDefault() bool {
	if x != nil && x.IsDefault != nil {
		return *x.IsDefault
	}
	return false
}

// A native ad consists of pieces that are rendered by the publisher. A
// publisher may support multiple distinct native ad templates. If the
// request also allows banners or videos, you can respond with other
// types of ads by setting html_snippet or video_url instead. If only
// native templates exist, you must set the native_ad field in any
// response you send.
//
type BidRequestLightWeight_AdSlot_NativeAdTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bitfield describing which fields are required by the publisher. Bid
	// responses with no value for these fields will be rejected. Click and
	// view tracking urls are always implicitly required.
	RequiredFields *int64 `protobuf:"varint,1,opt,name=required_fields,json=requiredFields" json:"required_fields,omitempty"`
	// Bitfield describing which fields are recommended by the publisher. All
	// recommended fields are supported, but not all recommended fields are
	// required.
	RecommendedFields *int64 `protobuf:"varint,2,opt,name=recommended_fields,json=recommendedFields" json:"recommended_fields,omitempty"`
	// max_safe_length indicates the maximum number of Unicode characters that
	// are guaranteed to be shown without truncation. Longer strings may be
	// truncated and ellipsized by Ad Exchange or the publisher during
	// rendering.
	HeadlineMaxSafeLength     *int32 `protobuf:"varint,3,opt,name=headline_max_safe_length,json=headlineMaxSafeLength" json:"headline_max_safe_length,omitempty"`
	BodyMaxSafeLength         *int32 `protobuf:"varint,4,opt,name=body_max_safe_length,json=bodyMaxSafeLength" json:"body_max_safe_length,omitempty"`
	CallToActionMaxSafeLength *int32 `protobuf:"varint,5,opt,name=call_to_action_max_safe_length,json=callToActionMaxSafeLength" json:"call_to_action_max_safe_length,omitempty"`
	AdvertiserMaxSafeLength   *int32 `protobuf:"varint,6,opt,name=advertiser_max_safe_length,json=advertiserMaxSafeLength" json:"advertiser_max_safe_length,omitempty"`
	PriceMaxSafeLength        *int32 `protobuf:"varint,15,opt,name=price_max_safe_length,json=priceMaxSafeLength" json:"price_max_safe_length,omitempty"`
	// The width and height from which to calculate the required aspect ratio.
	// You can provide a larger image in the response. Images that have aspect
	// ratios substantially different than those implied by the height and
	// width may be filtered.
	ImageWidth    *int32 `protobuf:"varint,7,opt,name=image_width,json=imageWidth" json:"image_width,omitempty"`
	ImageHeight   *int32 `protobuf:"varint,8,opt,name=image_height,json=imageHeight" json:"image_height,omitempty"`
	LogoWidth     *int32 `protobuf:"varint,9,opt,name=logo_width,json=logoWidth" json:"logo_width,omitempty"`
	LogoHeight    *int32 `protobuf:"varint,10,opt,name=logo_height,json=logoHeight" json:"logo_height,omitempty"`
	AppIconWidth  *int32 `protobuf:"varint,11,opt,name=app_icon_width,json=appIconWidth" json:"app_icon_width,omitempty"`
	AppIconHeight *int32 `protobuf:"varint,12,opt,name=app_icon_height,json=appIconHeight" json:"app_icon_height,omitempty"`
	// Globally distinct id for the specific style, HTML, and CSS with which
	// the native ad is rendered.
	StyleId         *int32                                                    `protobuf:"varint,16,opt,name=style_id,json=styleId" json:"style_id,omitempty"`
	StyleLayoutType *BidRequestLightWeight_AdSlot_NativeAdTemplate_LayoutType `protobuf:"varint,17,opt,name=style_layout_type,json=styleLayoutType,enum=BidRequestLightWeight_AdSlot_NativeAdTemplate_LayoutType,def=0" json:"style_layout_type,omitempty"`
	// If the style_layout_type is Pixel, width and height of the
	// entire native ad after rendering. If the style_layout_type is
	// Fluid, the style_height and style_width may optionally
	// not be populated.
	StyleHeight *int32 `protobuf:"varint,18,opt,name=style_height,json=styleHeight" json:"style_height,omitempty"`
	StyleWidth  *int32 `protobuf:"varint,19,opt,name=style_width,json=styleWidth" json:"style_width,omitempty"`
}

// Default values for BidRequestLightWeight_AdSlot_NativeAdTemplate fields.
const (
	Default_BidRequestLightWeight_AdSlot_NativeAdTemplate_StyleLayoutType = BidRequestLightWeight_AdSlot_NativeAdTemplate_PIXEL
)

func (x *BidRequestLightWeight_AdSlot_NativeAdTemplate) Reset() {
	*x = BidRequestLightWeight_AdSlot_NativeAdTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bid_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequestLightWeight_AdSlot_NativeAdTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequestLightWeight_AdSlot_NativeAdTemplate) ProtoMessage() {}

func (x *BidRequestLightWeight_AdSlot_NativeAdTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_bid_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequestLightWeight_AdSlot_NativeAdTemplate.ProtoReflect.Descriptor instead.
func (*BidRequestLightWeight_AdSlot_NativeAdTemplate) Descriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 7}
}

func (x *BidRequestLightWeight_AdSlot_NativeAdTemplate) GetRequiredFields() int64 {
	if x != nil && x.RequiredFields != nil {
		return *x.RequiredFields
	}
	return 0
}

func (x *BidRequestLightWeight_AdSlot_NativeAdTemplate) GetRecommendedFields() int64 {
	if x != nil && x.RecommendedFields != nil {
		return *x.RecommendedFields
	}
	return 0
}

func (x *BidRequestLightWeight_AdSlot_NativeAdTemplate) GetHeadlineMaxSafeLength() int32 {
	if x != nil && x.HeadlineMaxSafeLength != nil {
		return *x.HeadlineMaxSafeLength
	}
	return 0
}

func (x *BidRequestLightWeight_AdSlot_NativeAdTemplate) GetBodyMaxSafeLength() int32 {
	if x != nil && x.BodyMaxSafeLength != nil {
		return *x.BodyMaxSafeLength
	}
	return 0
}

func (x *BidRequestLightWeight_AdSlot_NativeAdTemplate) GetCallToActionMaxSafeLength() int32 {
	if x != nil && x.CallToActionMaxSafeLength != nil {
		return *x.CallToActionMaxSafeLength
	}
	return 0
}

func (x *BidRequestLightWeight_AdSlot_NativeAdTemplate) GetAdvertiserMaxSafeLength() int32 {
	if x != nil && x.AdvertiserMaxSafeLength != nil {
		return *x.AdvertiserMaxSafeLength
	}
	return 0
}

func (x *BidRequestLightWeight_AdSlot_NativeAdTemplate) GetPriceMaxSafeLength() int32 {
	if x != nil && x.PriceMaxSafeLength != nil {
		return *x.PriceMaxSafeLength
	}
	return 0
}

func (x *BidRequestLightWeight_AdSlot_NativeAdTemplate) GetImageWidth() int32 {
	if x != nil && x.ImageWidth != nil {
		return *x.ImageWidth
	}
	return 0
}

func (x *BidRequestLightWeight_AdSlot_NativeAdTemplate) GetImageHeight() int32 {
	if x != nil && x.ImageHeight != nil {
		return *x.ImageHeight
	}
	return 0
}

func (x *BidRequestLightWeight_AdSlot_NativeAdTemplate) GetLogoWidth() int32 {
	if x != nil && x.LogoWidth != nil {
		return *x.LogoWidth
	}
	return 0
}

func (x *BidRequestLightWeight_AdSlot_NativeAdTemplate) GetLogoHeight() int32 {
	if x != nil && x.LogoHeight != nil {
		return *x.LogoHeight
	}
	return 0
}

func (x *BidRequestLightWeight_AdSlot_NativeAdTemplate) GetAppIconWidth() int32 {
	if x != nil && x.AppIconWidth != nil {
		return *x.AppIconWidth
	}
	return 0
}

func (x *BidRequestLightWeight_AdSlot_NativeAdTemplate) GetAppIconHeight() int32 {
	if x != nil && x.AppIconHeight != nil {
		return *x.AppIconHeight
	}
	return 0
}

func (x *BidRequestLightWeight_AdSlot_NativeAdTemplate) GetStyleId() int32 {
	if x != nil && x.StyleId != nil {
		return *x.StyleId
	}
	return 0
}

func (x *BidRequestLightWeight_AdSlot_NativeAdTemplate) GetStyleLayoutType() BidRequestLightWeight_AdSlot_NativeAdTemplate_LayoutType {
	if x != nil && x.StyleLayoutType != nil {
		return *x.StyleLayoutType
	}
	return Default_BidRequestLightWeight_AdSlot_NativeAdTemplate_StyleLayoutType
}

func (x *BidRequestLightWeight_AdSlot_NativeAdTemplate) GetStyleHeight() int32 {
	if x != nil && x.StyleHeight != nil {
		return *x.StyleHeight
	}
	return 0
}

func (x *BidRequestLightWeight_AdSlot_NativeAdTemplate) GetStyleWidth() int32 {
	if x != nil && x.StyleWidth != nil {
		return *x.StyleWidth
	}
	return 0
}

// Auto refresh settings.
type BidRequestLightWeight_AdSlot_AutoRefresh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The auto-refresh settings that the publisher has on this
	// inventory. This is repeated because publishers may
	// do multiple types of auto refresh on one piece of inventory.
	RefreshSettings []*BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings `protobuf:"bytes,1,rep,name=refresh_settings,json=refreshSettings" json:"refresh_settings,omitempty"`
	// The number of times this ad slot had been refreshed since last page
	// load.
	RefreshCount *int32 `protobuf:"varint,2,opt,name=refresh_count,json=refreshCount,def=0" json:"refresh_count,omitempty"`
}

// Default values for BidRequestLightWeight_AdSlot_AutoRefresh fields.
const (
	Default_BidRequestLightWeight_AdSlot_AutoRefresh_RefreshCount = int32(0)
)

func (x *BidRequestLightWeight_AdSlot_AutoRefresh) Reset() {
	*x = BidRequestLightWeight_AdSlot_AutoRefresh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bid_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequestLightWeight_AdSlot_AutoRefresh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequestLightWeight_AdSlot_AutoRefresh) ProtoMessage() {}

func (x *BidRequestLightWeight_AdSlot_AutoRefresh) ProtoReflect() protoreflect.Message {
	mi := &file_bid_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequestLightWeight_AdSlot_AutoRefresh.ProtoReflect.Descriptor instead.
func (*BidRequestLightWeight_AdSlot_AutoRefresh) Descriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 8}
}

func (x *BidRequestLightWeight_AdSlot_AutoRefresh) GetRefreshSettings() []*BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings {
	if x != nil {
		return x.RefreshSettings
	}
	return nil
}

func (x *BidRequestLightWeight_AdSlot_AutoRefresh) GetRefreshCount() int32 {
	if x != nil && x.RefreshCount != nil {
		return *x.RefreshCount
	}
	return Default_BidRequestLightWeight_AdSlot_AutoRefresh_RefreshCount
}

// Stickiness settings declared by the publisher.
// Next Tag: 4
type BidRequestLightWeight_AdSlot_StickySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the ad slot is a sidebar that sticks on screen when user
	// scrolls.
	VerticalStickiness *BidRequestLightWeight_AdSlot_StickySettings_Stickiness `protobuf:"varint,1,opt,name=vertical_stickiness,json=verticalStickiness,enum=BidRequestLightWeight_AdSlot_StickySettings_Stickiness,def=0" json:"vertical_stickiness,omitempty"`
	// Whether the ad slot is a horizontal slot that sticks on the top of the
	// screen when user scrolls.
	TopHorizontalStickiness *BidRequestLightWeight_AdSlot_StickySettings_Stickiness `protobuf:"varint,2,opt,name=top_horizontal_stickiness,json=topHorizontalStickiness,enum=BidRequestLightWeight_AdSlot_StickySettings_Stickiness,def=0" json:"top_horizontal_stickiness,omitempty"`
	// Whether the ad slot is a horizontal slot that sticks on the bottom of
	// the screen when user scrolls.
	BottomHorizontalStickiness *BidRequestLightWeight_AdSlot_StickySettings_Stickiness `protobuf:"varint,3,opt,name=bottom_horizontal_stickiness,json=bottomHorizontalStickiness,enum=BidRequestLightWeight_AdSlot_StickySettings_Stickiness,def=0" json:"bottom_horizontal_stickiness,omitempty"`
}

// Default values for BidRequestLightWeight_AdSlot_StickySettings fields.
const (
	Default_BidRequestLightWeight_AdSlot_StickySettings_VerticalStickiness         = BidRequestLightWeight_AdSlot_StickySettings_UNKNOWN_STICKINESS
	Default_BidRequestLightWeight_AdSlot_StickySettings_TopHorizontalStickiness    = BidRequestLightWeight_AdSlot_StickySettings_UNKNOWN_STICKINESS
	Default_BidRequestLightWeight_AdSlot_StickySettings_BottomHorizontalStickiness = BidRequestLightWeight_AdSlot_StickySettings_UNKNOWN_STICKINESS
)

func (x *BidRequestLightWeight_AdSlot_StickySettings) Reset() {
	*x = BidRequestLightWeight_AdSlot_StickySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bid_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequestLightWeight_AdSlot_StickySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequestLightWeight_AdSlot_StickySettings) ProtoMessage() {}

func (x *BidRequestLightWeight_AdSlot_StickySettings) ProtoReflect() protoreflect.Message {
	mi := &file_bid_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequestLightWeight_AdSlot_StickySettings.ProtoReflect.Descriptor instead.
func (*BidRequestLightWeight_AdSlot_StickySettings) Descriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 9}
}

func (x *BidRequestLightWeight_AdSlot_StickySettings) GetVerticalStickiness() BidRequestLightWeight_AdSlot_StickySettings_Stickiness {
	if x != nil && x.VerticalStickiness != nil {
		return *x.VerticalStickiness
	}
	return Default_BidRequestLightWeight_AdSlot_StickySettings_VerticalStickiness
}

func (x *BidRequestLightWeight_AdSlot_StickySettings) GetTopHorizontalStickiness() BidRequestLightWeight_AdSlot_StickySettings_Stickiness {
	if x != nil && x.TopHorizontalStickiness != nil {
		return *x.TopHorizontalStickiness
	}
	return Default_BidRequestLightWeight_AdSlot_StickySettings_TopHorizontalStickiness
}

func (x *BidRequestLightWeight_AdSlot_StickySettings) GetBottomHorizontalStickiness() BidRequestLightWeight_AdSlot_StickySettings_Stickiness {
	if x != nil && x.BottomHorizontalStickiness != nil {
		return *x.BottomHorizontalStickiness
	}
	return Default_BidRequestLightWeight_AdSlot_StickySettings_BottomHorizontalStickiness
}

// Encrypted data to be passed to a buyer by the publisher.
type BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The source (provider) of the signal.
	//
	// Types that are assignable to Source:
	//	*BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceApp_
	//	*BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceJs_
	Source isBidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_Source `protobuf_oneof:"source"`
	// The encrypted signal.
	Data *string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (x *BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData) Reset() {
	*x = BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bid_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData) ProtoMessage() {}

func (x *BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData) ProtoReflect() protoreflect.Message {
	mi := &file_bid_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData.ProtoReflect.Descriptor instead.
func (*BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData) Descriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 10}
}

func (m *BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData) GetSource() isBidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData) GetSourceApp() *BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceApp {
	if x, ok := x.GetSource().(*BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceApp_); ok {
		return x.SourceApp
	}
	return nil
}

func (x *BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData) GetSourceJs() *BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceJs {
	if x, ok := x.GetSource().(*BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceJs_); ok {
		return x.SourceJs
	}
	return nil
}

func (x *BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData) GetData() string {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return ""
}

type isBidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_Source interface {
	isBidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_Source()
}

type BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceApp_ struct {
	SourceApp *BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceApp `protobuf:"bytes,1,opt,name=source_app,json=sourceApp,oneof"`
}

type BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceJs_ struct {
	SourceJs *BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceJs `protobuf:"bytes,3,opt,name=source_js,json=sourceJs,oneof"`
}

func (*BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceApp_) isBidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_Source() {
}

func (*BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceJs_) isBidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_Source() {
}

// Note: This feature is currently in beta testing for publishers
// and is subject to change.
// This message is populated when the request is for an individual cell
// within a multi-ad grid. It provides cell level information as well as
// information about the grid this cell belongs to in the AdSlot.
// Only native ads are supported for cells in a multi-ad grid at this time.
type BidRequestLightWeight_AdSlot_MultiAdsCellInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The row this cell belongs to.
	CellRow *int32 `protobuf:"varint,1,opt,name=cell_row,json=cellRow" json:"cell_row,omitempty"`
	// The column this cell belongs to.
	CellColumn *int32 `protobuf:"varint,2,opt,name=cell_column,json=cellColumn" json:"cell_column,omitempty"`
	// Total number of rows in the grid for this cell.
	GridRows *int32 `protobuf:"varint,3,opt,name=grid_rows,json=gridRows" json:"grid_rows,omitempty"`
	// Total number of columns in the grid for this cell.
	GridColumns *int32 `protobuf:"varint,4,opt,name=grid_columns,json=gridColumns" json:"grid_columns,omitempty"`
	// Unique ID for the grid. It identifies a single grid on a single
	// instance of a page and is the same for all cells within that grid. If a
	// page has multiple grids, the grid_id for other grids would be
	// different. It would also be different for the same grid in two
	// different pageviews.
	// This is distinct from the google_query_id, which will differ for every
	// request for a cell in the grid.
	GridId *int64 `protobuf:"varint,5,opt,name=grid_id,json=gridId" json:"grid_id,omitempty"`
}

func (x *BidRequestLightWeight_AdSlot_MultiAdsCellInfo) Reset() {
	*x = BidRequestLightWeight_AdSlot_MultiAdsCellInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bid_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequestLightWeight_AdSlot_MultiAdsCellInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequestLightWeight_AdSlot_MultiAdsCellInfo) ProtoMessage() {}

func (x *BidRequestLightWeight_AdSlot_MultiAdsCellInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bid_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequestLightWeight_AdSlot_MultiAdsCellInfo.ProtoReflect.Descriptor instead.
func (*BidRequestLightWeight_AdSlot_MultiAdsCellInfo) Descriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 11}
}

func (x *BidRequestLightWeight_AdSlot_MultiAdsCellInfo) GetCellRow() int32 {
	if x != nil && x.CellRow != nil {
		return *x.CellRow
	}
	return 0
}

func (x *BidRequestLightWeight_AdSlot_MultiAdsCellInfo) GetCellColumn() int32 {
	if x != nil && x.CellColumn != nil {
		return *x.CellColumn
	}
	return 0
}

func (x *BidRequestLightWeight_AdSlot_MultiAdsCellInfo) GetGridRows() int32 {
	if x != nil && x.GridRows != nil {
		return *x.GridRows
	}
	return 0
}

func (x *BidRequestLightWeight_AdSlot_MultiAdsCellInfo) GetGridColumns() int32 {
	if x != nil && x.GridColumns != nil {
		return *x.GridColumns
	}
	return 0
}

func (x *BidRequestLightWeight_AdSlot_MultiAdsCellInfo) GetGridId() int64 {
	if x != nil && x.GridId != nil {
		return *x.GridId
	}
	return 0
}

// Information about any deals that matched for this inventory.
//
type BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An id identifying the deal.
	DirectDealId *int64 `protobuf:"varint,1,opt,name=direct_deal_id,json=directDealId" json:"direct_deal_id,omitempty"`
	// For deal_type=PREFERRED_DEAL or deal_type=PROGRAMMATIC_GUARANTEED,
	// you must bid at least fixed_cpm_micros (in micros of the bidding
	// currency) in order to participate in the deal. If you win, you will
	// be charged fixed_cpm_micros. For deal_type=PRIVATE_AUCTION or
	// deal_type=AUCTION_PACKAGE you must bid at least fixed_cpm_micros.
	// Bidding higher CPM than fixed_cpm_micros will increase your chance
	// to win when deal_type=PRIVATE_AUCTION or deal_type=AUCTION_PACKAGE,
	// however it will not increase your chance to win for other types of
	// deals.
	// The bidding currency is determined by:
	// 1. The bidder-level currency, if configured.
	// 2. Otherwise, the currency of the buyer accounts indicated by the
	// billing IDs in the billing_id field.
	FixedCpmMicros *int64                                                           `protobuf:"varint,2,opt,name=fixed_cpm_micros,json=fixedCpmMicros" json:"fixed_cpm_micros,omitempty"`
	DealType       *BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_DealType `protobuf:"varint,3,opt,name=deal_type,json=dealType,enum=BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_DealType,def=0" json:"deal_type,omitempty"`
	// Whether the publisher has exempted this deal from configured blocks.
	// This setting does not override AdX policies or Ad Review Center
	// decisions.
	PublisherBlocksOverridden *bool                                                                      `protobuf:"varint,4,opt,name=publisher_blocks_overridden,json=publisherBlocksOverridden,def=0" json:"publisher_blocks_overridden,omitempty"`
	CreativeSource            *BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType `protobuf:"varint,16,opt,name=creative_source,json=creativeSource,enum=BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType,def=1" json:"creative_source,omitempty"`
	// This field is only applicable to Programmatic Guaranteed deals. The
	// buyer is allowed to skip bidding on the impression if this field is
	// false. When it is true, the buyer is required to bid on this deal for
	// this impression opportunity.
	MustBid *bool `protobuf:"varint,9,opt,name=must_bid,json=mustBid,def=1" json:"must_bid,omitempty"`
}

// Default values for BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal fields.
const (
	Default_BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_DealType                  = BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_UNKNOWN_DEAL_TYPE
	Default_BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_PublisherBlocksOverridden = bool(false)
	Default_BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_CreativeSource            = BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_CREATIVE_SOURCE_ADVERTISER
	Default_BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_MustBid                   = bool(true)
)

func (x *BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal) Reset() {
	*x = BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bid_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal) ProtoMessage() {}

func (x *BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal) ProtoReflect() protoreflect.Message {
	mi := &file_bid_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal.ProtoReflect.Descriptor instead.
func (*BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal) Descriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 3, 0}
}

func (x *BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal) GetDirectDealId() int64 {
	if x != nil && x.DirectDealId != nil {
		return *x.DirectDealId
	}
	return 0
}

func (x *BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal) GetFixedCpmMicros() int64 {
	if x != nil && x.FixedCpmMicros != nil {
		return *x.FixedCpmMicros
	}
	return 0
}

func (x *BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal) GetDealType() BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_DealType {
	if x != nil && x.DealType != nil {
		return *x.DealType
	}
	return Default_BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_DealType
}

func (x *BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal) GetPublisherBlocksOverridden() bool {
	if x != nil && x.PublisherBlocksOverridden != nil {
		return *x.PublisherBlocksOverridden
	}
	return Default_BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_PublisherBlocksOverridden
}

func (x *BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal) GetCreativeSource() BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType {
	if x != nil && x.CreativeSource != nil {
		return *x.CreativeSource
	}
	return Default_BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_CreativeSource
}

func (x *BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal) GetMustBid() bool {
	if x != nil && x.MustBid != nil {
		return *x.MustBid
	}
	return Default_BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_MustBid
}

type BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the declared auto refresh.
	RefreshType *BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType `protobuf:"varint,1,opt,name=refresh_type,json=refreshType,enum=BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType,def=0" json:"refresh_type,omitempty"`
	// The minimum refresh interval. This applies to all refresh types.
	MinRefreshIntervalSeconds *int32 `protobuf:"varint,2,opt,name=min_refresh_interval_seconds,json=minRefreshIntervalSeconds" json:"min_refresh_interval_seconds,omitempty"`
}

// Default values for BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings fields.
const (
	Default_BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings_RefreshType = BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings_UNKNOWN_AUTO_REFRESH_TYPE
)

func (x *BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings) Reset() {
	*x = BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bid_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings) ProtoMessage() {}

func (x *BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings) ProtoReflect() protoreflect.Message {
	mi := &file_bid_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings.ProtoReflect.Descriptor instead.
func (*BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings) Descriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 8, 0}
}

func (x *BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings) GetRefreshType() BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType {
	if x != nil && x.RefreshType != nil {
		return *x.RefreshType
	}
	return Default_BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings_RefreshType
}

func (x *BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings) GetMinRefreshIntervalSeconds() int32 {
	if x != nil && x.MinRefreshIntervalSeconds != nil {
		return *x.MinRefreshIntervalSeconds
	}
	return 0
}

// The source of the signal when this request is from an app.
type BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier for the SDK that generated this data. It will match the id
	// in mobile.installed_sdk.id.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (x *BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceApp) Reset() {
	*x = BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bid_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceApp) ProtoMessage() {}

func (x *BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceApp) ProtoReflect() protoreflect.Message {
	mi := &file_bid_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceApp.ProtoReflect.Descriptor instead.
func (*BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceApp) Descriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 10, 0}
}

func (x *BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceApp) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

// The source of the signal when this request is from a web page.
type BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceJs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the JavaScript library that generated this data
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (x *BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceJs) Reset() {
	*x = BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceJs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bid_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceJs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceJs) ProtoMessage() {}

func (x *BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceJs) ProtoReflect() protoreflect.Message {
	mi := &file_bid_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceJs.ProtoReflect.Descriptor instead.
func (*BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceJs) Descriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{0, 3, 10, 1}
}

func (x *BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceJs) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

type BidResponseLightWeight_Ad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Adslot []*BidResponseLightWeight_Ad_AdSlot `protobuf:"bytes,3,rep,name=adslot" json:"adslot,omitempty"`
}

func (x *BidResponseLightWeight_Ad) Reset() {
	*x = BidResponseLightWeight_Ad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bid_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidResponseLightWeight_Ad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidResponseLightWeight_Ad) ProtoMessage() {}

func (x *BidResponseLightWeight_Ad) ProtoReflect() protoreflect.Message {
	mi := &file_bid_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidResponseLightWeight_Ad.ProtoReflect.Descriptor instead.
func (*BidResponseLightWeight_Ad) Descriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{1, 0}
}

func (x *BidResponseLightWeight_Ad) GetAdslot() []*BidResponseLightWeight_Ad_AdSlot {
	if x != nil {
		return x.Adslot
	}
	return nil
}

type BidResponseLightWeight_Ad_AdSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The slot id from the BidRequest that the ad may appear in.
	Id           *int32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	MaxCpmMicros *int64 `protobuf:"varint,2,req,name=max_cpm_micros,json=maxCpmMicros" json:"max_cpm_micros,omitempty"`
	MinCpmMicros *int64 `protobuf:"varint,3,opt,name=min_cpm_micros,json=minCpmMicros" json:"min_cpm_micros,omitempty"`
}

func (x *BidResponseLightWeight_Ad_AdSlot) Reset() {
	*x = BidResponseLightWeight_Ad_AdSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bid_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidResponseLightWeight_Ad_AdSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidResponseLightWeight_Ad_AdSlot) ProtoMessage() {}

func (x *BidResponseLightWeight_Ad_AdSlot) ProtoReflect() protoreflect.Message {
	mi := &file_bid_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidResponseLightWeight_Ad_AdSlot.ProtoReflect.Descriptor instead.
func (*BidResponseLightWeight_Ad_AdSlot) Descriptor() ([]byte, []int) {
	return file_bid_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *BidResponseLightWeight_Ad_AdSlot) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *BidResponseLightWeight_Ad_AdSlot) GetMaxCpmMicros() int64 {
	if x != nil && x.MaxCpmMicros != nil {
		return *x.MaxCpmMicros
	}
	return 0
}

func (x *BidResponseLightWeight_Ad_AdSlot) GetMinCpmMicros() int64 {
	if x != nil && x.MinCpmMicros != nil {
		return *x.MinCpmMicros
	}
	return 0
}

var File_bid_proto protoreflect.FileDescriptor

var file_bid_proto_rawDesc = []byte{
	0x0a, 0x09, 0x62, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe2, 0x52, 0x0a, 0x15, 0x42, 0x69,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x15, 0x62, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x2c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x13, 0x62,
	0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x12, 0x2c, 0x0a, 0x03, 0x67, 0x65, 0x6f, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x47, 0x65, 0x6f, 0x52, 0x03, 0x67, 0x65, 0x6f,
	0x12, 0x26, 0x0a, 0x0f, 0x67, 0x65, 0x6f, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x5f, 0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x67, 0x65, 0x6f, 0x43, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x42, 0x69,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x35, 0x0a, 0x06, 0x61, 0x64, 0x73, 0x6c, 0x6f, 0x74,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x41,
	0x64, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x06, 0x61, 0x64, 0x73, 0x6c, 0x6f, 0x74, 0x1a, 0x9f, 0x03,
	0x0a, 0x13, 0x42, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x30, 0x0a, 0x14, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x70, 0x6d, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x70, 0x6d, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x2b, 0x0a, 0x12,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x77,
	0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75,
	0x6d, 0x42, 0x69, 0x64, 0x54, 0x6f, 0x57, 0x69, 0x6e, 0x12, 0x5e, 0x0a, 0x2d, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x70, 0x6d, 0x5f, 0x61, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x27, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x70, 0x6d, 0x41, 0x68, 0x65, 0x61, 0x64, 0x4f, 0x66, 0x41, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x18, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x64, 0x1a,
	0xd1, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x65,
	0x74, 0x72, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x7a, 0x69, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x7a, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x63, 0x63,
	0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x74, 0x63, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x74, 0x63, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x1a, 0x32, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xc4, 0x4a, 0x0a, 0x06, 0x41, 0x64, 0x53, 0x6c,
	0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x4b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x6e, 0x0a, 0x18, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x64,
	0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4c, 0x69, 0x67, 0x68, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c,
	0x6f, 0x74, 0x2e, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x53, 0x6c, 0x6f,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x16, 0x66, 0x6c, 0x65, 0x78, 0x69,
	0x62, 0x6c, 0x65, 0x41, 0x64, 0x73, 0x6c, 0x6f, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x31, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10,
	0x01, 0x52, 0x11, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x7a, 0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x5f,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x73, 0x5f, 0x67, 0x64, 0x70,
	0x72, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x67, 0x73, 0x47, 0x64, 0x70,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x73, 0x5f, 0x6c, 0x67, 0x70, 0x64, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x67, 0x73, 0x4c, 0x67, 0x70, 0x64, 0x12, 0x42,
	0x0a, 0x1b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x19, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x64, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x42, 0x0a, 0x1b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x10, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x19, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x54, 0x0a, 0x25, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x73, 0x18,
	0x16, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x21, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x61, 0x6c, 0x73, 0x12, 0x2b, 0x0a, 0x11,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x19, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01,
	0x52, 0x17, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x5d, 0x0a, 0x12, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x41, 0x64,
	0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x11, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x6f, 0x6e, 0x6c, 0x79,
	0x5f, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x62, 0x69, 0x64, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6f, 0x6e, 0x6c, 0x79, 0x44,
	0x65, 0x61, 0x6c, 0x42, 0x69, 0x64, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12,
	0x56, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x42, 0x69, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x41, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x41, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x06, 0x52, 0x17, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x58, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x62, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x4c,
	0x0a, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x62, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x35,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x41, 0x64, 0x53,
	0x6c, 0x6f, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x7d, 0x0a, 0x1d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x3a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4c, 0x69, 0x67, 0x68, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c,
	0x6f, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x1b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x27, 0x0a, 0x10, 0x64,
	0x66, 0x70, 0x5f, 0x61, 0x64, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x66, 0x70, 0x41, 0x64, 0x55, 0x6e, 0x69, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x63, 0x0a, 0x0f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e,
	0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x53, 0x6c, 0x6f,
	0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x3a, 0x0c, 0x4e, 0x4f, 0x5f,
	0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x0e, 0x73, 0x6c, 0x6f, 0x74, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0b, 0x76, 0x69, 0x65,
	0x77, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02,
	0x2d, 0x31, 0x52, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x30, 0x0a, 0x12, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x02, 0x2d, 0x31, 0x52,
	0x10, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x36, 0x0a, 0x15, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x02,
	0x3a, 0x02, 0x2d, 0x31, 0x52, 0x13, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x68, 0x0a, 0x0e, 0x69, 0x66, 0x72,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2b, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74,
	0x2e, 0x49, 0x46, 0x72, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x14,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x49, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x52, 0x0d, 0x69, 0x66, 0x72, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x68, 0x0a, 0x0e, 0x69, 0x66, 0x72, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x42, 0x69,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x49, 0x46, 0x72, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x44, 0x65, 0x70, 0x74, 0x68, 0x3a, 0x14, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x49, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x54, 0x48, 0x52, 0x0d,
	0x69, 0x66, 0x72, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x5c, 0x0a,
	0x12, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x64, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0x33, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x42, 0x69, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41,
	0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x10, 0x6e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x41, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x78, 0x0a, 0x15, 0x6e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x42, 0x69, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x11, 0x50,
	0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x52, 0x13, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x61, 0x0a, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2d, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x52, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x55, 0x0a, 0x0f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0e, 0x73,
	0x74, 0x69, 0x63, 0x6b, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x78, 0x0a,
	0x17, 0x6e, 0x6f, 0x6e, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x6c, 0x6f,
	0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e,
	0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x4e, 0x6f,
	0x6e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3a, 0x11,
	0x55, 0x4e, 0x44, 0x45, 0x43, 0x4c, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x52, 0x14, 0x6e, 0x6f, 0x6e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x53, 0x6c, 0x6f,
	0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x54, 0x0a, 0x08, 0x72, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x42, 0x69, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65,
	0x72, 0x3a, 0x10, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x52, 0x45, 0x4e, 0x44, 0x45,
	0x52, 0x45, 0x52, 0x52, 0x08, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x12, 0x6b, 0x0a,
	0x13, 0x61, 0x6d, 0x70, 0x5f, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x42, 0x69, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x41, 0x6d, 0x70, 0x41, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0c, 0x4e, 0x4f, 0x4e, 0x5f,
	0x41, 0x4d, 0x50, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x52, 0x10, 0x61, 0x6d, 0x70, 0x41, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x61, 0x6d, 0x70, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x41,
	0x6d, 0x70, 0x50, 0x61, 0x67, 0x65, 0x52, 0x09, 0x69, 0x73, 0x41, 0x6d, 0x70, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x69, 0x0a, 0x17, 0x61, 0x6d, 0x70, 0x5f, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x32, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c,
	0x69, 0x67, 0x68, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f,
	0x74, 0x2e, 0x41, 0x6d, 0x70, 0x41, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x61, 0x6d, 0x70, 0x41, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x65, 0x64, 0x12, 0x59, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f,
	0x61, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2b,
	0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x02, 0x10, 0x01, 0x52,
	0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x78, 0x0a, 0x1c, 0x62, 0x75, 0x79, 0x65,
	0x72, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x42, 0x75,
	0x79, 0x65, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x19, 0x62, 0x75, 0x79, 0x65, 0x72, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x40, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x67, 0x68,
	0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x41,
	0x50, 0x49, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x02, 0x10, 0x01, 0x52,
	0x03, 0x61, 0x70, 0x69, 0x12, 0x46, 0x0a, 0x1e, 0x62, 0x69, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x01, 0x31, 0x52,
	0x1b, 0x62, 0x69, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x61,
	0x74, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x13,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x61, 0x64, 0x73, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x42, 0x69, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x64,
	0x73, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x41, 0x64, 0x73, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x6d, 0x69, 0x64, 0x70, 0x6e, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x6d, 0x69,
	0x64, 0x70, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6d, 0x69, 0x64, 0x70, 0x76, 0x18, 0x39, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x6d, 0x69, 0x64, 0x70, 0x76, 0x12, 0x76, 0x0a, 0x13, 0x61,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x13, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x52, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x52,
	0x12, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x1a, 0x90, 0x01, 0x0a, 0x16, 0x46, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65,
	0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x61, 0x78, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6d, 0x61, 0x78, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69,
	0x6e, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d,
	0x69, 0x6e, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x69, 0x6e,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0xbb, 0x01, 0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x33, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74,
	0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x03, 0x42, 0x02, 0x10, 0x01, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x63,
	0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x63, 0x66, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x19, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x1a, 0x3e, 0x0a, 0x10, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x75, 0x79, 0x65,
	0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x49, 0x64, 0x1a, 0xf6, 0x06, 0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x41, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0a, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x10, 0x00, 0x52,
	0x09, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69,
	0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x63, 0x70, 0x6d, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x43,
	0x70, 0x6d, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x58, 0x0a, 0x0b, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x52, 0x0a, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x61, 0x6c, 0x1a, 0xb8, 0x05, 0x0a, 0x0a, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65, 0x61,
	0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x44, 0x65, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x5f, 0x63, 0x70, 0x6d, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x66, 0x69, 0x78, 0x65, 0x64, 0x43, 0x70, 0x6d, 0x4d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x12, 0x70, 0x0a, 0x09, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x41, 0x64, 0x53,
	0x6c, 0x6f, 0x74, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x2e, 0x44, 0x65,
	0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x11, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x44, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x08, 0x64, 0x65, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x1b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x19, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x8f, 0x01, 0x0a, 0x0f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x4a, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x41, 0x64, 0x53,
	0x6c, 0x6f, 0x74, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x1a, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x52, 0x52, 0x0e, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x08,
	0x6d, 0x75, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04,
	0x74, 0x72, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x75, 0x73, 0x74, 0x42, 0x69, 0x64, 0x22, 0x7c, 0x0a,
	0x08, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x45,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f,
	0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f,
	0x47, 0x52, 0x41, 0x4d, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x47, 0x55, 0x41, 0x52, 0x41, 0x4e,
	0x54, 0x45, 0x45, 0x44, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x04, 0x22, 0x70, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1e,
	0x0a, 0x1a, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x1d,
	0x0a, 0x19, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x52, 0x10, 0x02, 0x1a, 0x4f, 0x0a,
	0x0f, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x3c, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4c, 0x69, 0x67, 0x68, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x4b, 0x65, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x35,
	0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a,
	0x0f, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x62, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x69,
	0x64, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0x87, 0x05, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x7a, 0x0a, 0x12, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x4b, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x96, 0x01, 0x0a, 0x1c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x54, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x1a,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x45,
	0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x8f, 0x01,
	0x0a, 0x11, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x45, 0x4e,
	0x46, 0x4f, 0x52, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x45, 0x4e,
	0x46, 0x4f, 0x52, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f,
	0x52, 0x4d, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x01, 0x12, 0x32, 0x0a, 0x2e, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x45, 0x4e, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x50, 0x4c,
	0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x02, 0x22,
	0x9d, 0x01, 0x0a, 0x1a, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x24, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x52, 0x5f, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x53, 0x5f, 0x45, 0x4e, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x55, 0x42, 0x4c,
	0x49, 0x53, 0x48, 0x45, 0x52, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x5f, 0x45, 0x4e, 0x46,
	0x4f, 0x52, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x53,
	0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x52, 0x5f,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x5f, 0x45, 0x4e, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x02, 0x1a,
	0x84, 0x08, 0x0a, 0x10, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x64, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2d, 0x0a,
	0x12, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x18,
	0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x61, 0x66,
	0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x61, 0x78, 0x53, 0x61, 0x66, 0x65, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x14, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x62, 0x6f, 0x64, 0x79, 0x4d, 0x61, 0x78, 0x53, 0x61, 0x66, 0x65,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x41, 0x0a, 0x1e, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74,
	0x6f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x61, 0x66,
	0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19,
	0x63, 0x61, 0x6c, 0x6c, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78, 0x53,
	0x61, 0x66, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x61, 0x66, 0x65,
	0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x53, 0x61, 0x66, 0x65,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x78, 0x53,
	0x61, 0x66, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x6f, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x6f, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x49, 0x63, 0x6f, 0x6e, 0x57, 0x69,
	0x64, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x70,
	0x70, 0x49, 0x63, 0x6f, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x6c, 0x0a, 0x11, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f,
	0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x39, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74,
	0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x05, 0x50, 0x49,
	0x58, 0x45, 0x4c, 0x52, 0x0f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x22, 0xb7, 0x01, 0x0a, 0x06, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x53,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x45, 0x41, 0x44, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x44, 0x59, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41,
	0x4c, 0x4c, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x0e,
	0x0a, 0x0a, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x52, 0x10, 0x08, 0x12, 0x09,
	0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x10, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x47,
	0x4f, 0x10, 0x20, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x10,
	0x40, 0x12, 0x10, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x80, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x80, 0x02, 0x12,
	0x15, 0x0a, 0x10, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x54,
	0x4f, 0x52, 0x45, 0x10, 0x80, 0x04, 0x12, 0x0a, 0x0a, 0x05, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10,
	0x80, 0x08, 0x22, 0x22, 0x0a, 0x0a, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x09, 0x0a, 0x05, 0x50, 0x49, 0x58, 0x45, 0x4c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x46,
	0x4c, 0x55, 0x49, 0x44, 0x10, 0x01, 0x1a, 0xde, 0x03, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x6f, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x68, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3d, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x67,
	0x68, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e,
	0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x0f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x26, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xbc, 0x02, 0x0a, 0x13, 0x41, 0x75, 0x74,
	0x6f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x8b, 0x01, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e,
	0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x19, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x41, 0x55, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f,
	0x0a, 0x1c, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22,
	0x56, 0x0a, 0x0f, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x55,
	0x54, 0x4f, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x03, 0x1a, 0xdd, 0x03, 0x0a, 0x0e, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x7c, 0x0a, 0x13, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e,
	0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x3a, 0x12, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x49, 0x43, 0x4b, 0x49,
	0x4e, 0x45, 0x53, 0x53, 0x52, 0x12, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x74,
	0x69, 0x63, 0x6b, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x87, 0x01, 0x0a, 0x19, 0x74, 0x6f, 0x70,
	0x5f, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x42,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x3a, 0x12, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53,
	0x54, 0x49, 0x43, 0x4b, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x52, 0x17, 0x74, 0x6f, 0x70, 0x48, 0x6f,
	0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x1c, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x42, 0x69, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x3a, 0x12, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x49, 0x43,
	0x4b, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x52, 0x1a, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x48, 0x6f,
	0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x22, 0x33, 0x0a, 0x0a, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x12, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x49, 0x43,
	0x4b, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x53, 0x5f, 0x53,
	0x54, 0x49, 0x43, 0x4b, 0x59, 0x10, 0x01, 0x1a, 0xb7, 0x02, 0x0a, 0x19, 0x42, 0x75, 0x79, 0x65,
	0x72, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x62, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x61, 0x70, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x42, 0x69, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x42, 0x75, 0x79, 0x65, 0x72, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x70, 0x70, 0x48, 0x00, 0x52, 0x09,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x70, 0x70, 0x12, 0x5f, 0x0a, 0x09, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6a, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x42,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x42, 0x75, 0x79, 0x65,
	0x72, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4a, 0x73, 0x48, 0x00,
	0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4a, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x1b,
	0x0a, 0x09, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x70, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x1a, 0x1a, 0x0a, 0x08, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4a, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x1a, 0xa7, 0x01, 0x0a, 0x10, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x64, 0x73, 0x43, 0x65,
	0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x72,
	0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x52, 0x6f,
	0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x69, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x72, 0x69, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x67, 0x72, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x67, 0x72, 0x69, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x72, 0x69, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x72, 0x69, 0x64, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x0e, 0x53,
	0x6c, 0x6f, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a,
	0x0c, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x41, 0x42, 0x4f, 0x56, 0x45, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x46, 0x4f, 0x4c,
	0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x45, 0x4c, 0x4f, 0x57, 0x5f, 0x54, 0x48, 0x45,
	0x5f, 0x46, 0x4f, 0x4c, 0x44, 0x10, 0x02, 0x22, 0x69, 0x0a, 0x0d, 0x49, 0x46, 0x72, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x49, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f, 0x49, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e,
	0x5f, 0x49, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x52, 0x4f,
	0x53, 0x53, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x49, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x10, 0x03, 0x22, 0x61, 0x0a, 0x0d, 0x49, 0x46, 0x72, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x70, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x49,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x54, 0x48, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x49, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x4e, 0x45, 0x5f, 0x49, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x45, 0x5f, 0x49, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x10, 0x03, 0x22, 0x93, 0x01, 0x0a, 0x13, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x50,
	0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x4f, 0x4d, 0x49, 0x43, 0x5f,
	0x55, 0x4e, 0x49, 0x54, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x53, 0x49, 0x44, 0x45, 0x10, 0x03, 0x12, 0x1c, 0x0a,
	0x18, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d,
	0x4d, 0x45, 0x4e, 0x44, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x22, 0x32, 0x0a, 0x0f, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x22,
	0x3a, 0x0a, 0x10, 0x4e, 0x6f, 0x6e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e, 0x44, 0x45, 0x43, 0x4c, 0x41, 0x52, 0x45,
	0x44, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45,
	0x53, 0x4b, 0x54, 0x4f, 0x50, 0x5f, 0x41, 0x50, 0x50, 0x10, 0x01, 0x22, 0x3b, 0x0a, 0x08, 0x52,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x53, 0x48, 0x45, 0x52, 0x10, 0x02, 0x22, 0x50, 0x0a, 0x10, 0x41, 0x6d, 0x70, 0x41,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x4d, 0x50, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x4e, 0x4f, 0x4e, 0x5f, 0x41, 0x4d, 0x50, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x41, 0x4d, 0x50, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x5f, 0x4c, 0x41, 0x54, 0x45,
	0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x22, 0x47, 0x0a, 0x07, 0x41, 0x6d,
	0x70, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x41, 0x4d, 0x50, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x44,
	0x49, 0x41, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x48, 0x54, 0x4d, 0x4c, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x44, 0x49, 0x41, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x48, 0x54, 0x4d, 0x4c, 0x5f, 0x41, 0x4d,
	0x50, 0x10, 0x02, 0x22, 0xba, 0x01, 0x0a, 0x14, 0x41, 0x6d, 0x70, 0x41, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x4d, 0x50, 0x5f, 0x41, 0x44, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x4d, 0x50, 0x5f, 0x41, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x4d, 0x50,
	0x5f, 0x41, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x41, 0x4e, 0x44, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x5f, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21, 0x41, 0x4d, 0x50, 0x5f, 0x41, 0x44, 0x5f, 0x41,
	0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x45, 0x41, 0x52, 0x4c, 0x59,
	0x5f, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x41,
	0x4d, 0x50, 0x5f, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04,
	0x22, 0xa3, 0x01, 0x0a, 0x0d, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x17, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x4c,
	0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x4c, 0x4c, 0x4f,
	0x57, 0x45, 0x44, 0x5f, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x4e,
	0x45, 0x52, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f,
	0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x41, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x41,
	0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x55, 0x44, 0x49, 0x4f, 0x10, 0x03, 0x22, 0x58, 0x0a, 0x0c, 0x41, 0x50, 0x49, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x4d, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x31, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x52,
	0x41, 0x49, 0x44, 0x5f, 0x32, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x52, 0x41, 0x49, 0x44,
	0x5f, 0x33, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4d, 0x49, 0x44, 0x5f, 0x31, 0x10, 0x07,
	0x22, 0x8b, 0x01, 0x0a, 0x12, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x45, 0x52, 0x56, 0x45,
	0x52, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00,
	0x12, 0x24, 0x0a, 0x20, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x55, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x36, 0x0a, 0x32, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52,
	0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x49,
	0x54, 0x48, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x5f, 0x53, 0x49, 0x4d, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x22, 0x9a,
	0x02, 0x0a, 0x16, 0x42, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69,
	0x67, 0x68, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a, 0x02, 0x61, 0x64, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x41,
	0x64, 0x52, 0x02, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x4d, 0x73, 0x1a, 0xa5, 0x01, 0x0a, 0x02, 0x41, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x61, 0x64,
	0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x42, 0x69, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x2e, 0x41, 0x64, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x06, 0x61,
	0x64, 0x73, 0x6c, 0x6f, 0x74, 0x1a, 0x64, 0x0a, 0x06, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x70, 0x6d, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x43, 0x70, 0x6d, 0x4d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x70, 0x6d,
	0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6d,
	0x69, 0x6e, 0x43, 0x70, 0x6d, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x42, 0x12, 0x5a, 0x10, 0x2f,
	0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x62, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67,
}

var (
	file_bid_proto_rawDescOnce sync.Once
	file_bid_proto_rawDescData = file_bid_proto_rawDesc
)

func file_bid_proto_rawDescGZIP() []byte {
	file_bid_proto_rawDescOnce.Do(func() {
		file_bid_proto_rawDescData = protoimpl.X.CompressGZIP(file_bid_proto_rawDescData)
	})
	return file_bid_proto_rawDescData
}

var file_bid_proto_enumTypes = make([]protoimpl.EnumInfo, 21)
var file_bid_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_bid_proto_goTypes = []interface{}{
	(BidRequestLightWeight_AdSlot_SlotVisibility)(0),                                         // 0: BidRequestLightWeight.AdSlot.SlotVisibility
	(BidRequestLightWeight_AdSlot_IFramingState)(0),                                          // 1: BidRequestLightWeight.AdSlot.IFramingState
	(BidRequestLightWeight_AdSlot_IFramingDepth)(0),                                          // 2: BidRequestLightWeight.AdSlot.IFramingDepth
	(BidRequestLightWeight_AdSlot_NativePlacementType)(0),                                    // 3: BidRequestLightWeight.AdSlot.NativePlacementType
	(BidRequestLightWeight_AdSlot_MediationStatus)(0),                                        // 4: BidRequestLightWeight.AdSlot.MediationStatus
	(BidRequestLightWeight_AdSlot_NonBrowserSource)(0),                                       // 5: BidRequestLightWeight.AdSlot.NonBrowserSource
	(BidRequestLightWeight_AdSlot_Renderer)(0),                                               // 6: BidRequestLightWeight.AdSlot.Renderer
	(BidRequestLightWeight_AdSlot_AmpAdRequestType)(0),                                       // 7: BidRequestLightWeight.AdSlot.AmpAdRequestType
	(BidRequestLightWeight_AdSlot_AmpPage)(0),                                                // 8: BidRequestLightWeight.AdSlot.AmpPage
	(BidRequestLightWeight_AdSlot_AmpAdRequirementType)(0),                                   // 9: BidRequestLightWeight.AdSlot.AmpAdRequirementType
	(BidRequestLightWeight_AdSlot_AllowedAdType)(0),                                          // 10: BidRequestLightWeight.AdSlot.AllowedAdType
	(BidRequestLightWeight_AdSlot_APIFramework)(0),                                           // 11: BidRequestLightWeight.AdSlot.APIFramework
	(BidRequestLightWeight_AdSlot_AuctionEnvironment)(0),                                     // 12: BidRequestLightWeight.AdSlot.AuctionEnvironment
	(BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_DealType)(0),                     // 13: BidRequestLightWeight.AdSlot.MatchingAdData.DirectDeal.DealType
	(BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType)(0),           // 14: BidRequestLightWeight.AdSlot.MatchingAdData.DirectDeal.CreativeSourceType
	(BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PolicyEnforcement)(0),          // 15: BidRequestLightWeight.AdSlot.CreativeEnforcementSettings.PolicyEnforcement
	(BidRequestLightWeight_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement)(0), // 16: BidRequestLightWeight.AdSlot.CreativeEnforcementSettings.PublisherBlocksEnforcement
	(BidRequestLightWeight_AdSlot_NativeAdTemplate_Fields)(0),                                // 17: BidRequestLightWeight.AdSlot.NativeAdTemplate.Fields
	(BidRequestLightWeight_AdSlot_NativeAdTemplate_LayoutType)(0),                            // 18: BidRequestLightWeight.AdSlot.NativeAdTemplate.LayoutType
	(BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType)(0),        // 19: BidRequestLightWeight.AdSlot.AutoRefresh.AutoRefreshSettings.AutoRefreshType
	(BidRequestLightWeight_AdSlot_StickySettings_Stickiness)(0),                              // 20: BidRequestLightWeight.AdSlot.StickySettings.Stickiness
	(*BidRequestLightWeight)(nil),                                                            // 21: BidRequestLightWeight
	(*BidResponseLightWeight)(nil),                                                           // 22: BidResponseLightWeight
	(*BidRequestLightWeight_BidResponseFeedback)(nil),                                        // 23: BidRequestLightWeight.BidResponseFeedback
	(*BidRequestLightWeight_Geo)(nil),                                                        // 24: BidRequestLightWeight.Geo
	(*BidRequestLightWeight_KeyValue)(nil),                                                   // 25: BidRequestLightWeight.KeyValue
	(*BidRequestLightWeight_AdSlot)(nil),                                                     // 26: BidRequestLightWeight.AdSlot
	(*BidRequestLightWeight_AdSlot_FlexibleAdSlotSettings)(nil),                              // 27: BidRequestLightWeight.AdSlot.FlexibleAdSlotSettings
	(*BidRequestLightWeight_AdSlot_ConsentedProvidersSettings)(nil),                          // 28: BidRequestLightWeight.AdSlot.ConsentedProvidersSettings
	(*BidRequestLightWeight_AdSlot_ExcludedCreative)(nil),                                    // 29: BidRequestLightWeight.AdSlot.ExcludedCreative
	(*BidRequestLightWeight_AdSlot_MatchingAdData)(nil),                                      // 30: BidRequestLightWeight.AdSlot.MatchingAdData
	(*BidRequestLightWeight_AdSlot_ExchangeBidding)(nil),                                     // 31: BidRequestLightWeight.AdSlot.ExchangeBidding
	(*BidRequestLightWeight_AdSlot_OpenBidding)(nil),                                         // 32: BidRequestLightWeight.AdSlot.OpenBidding
	(*BidRequestLightWeight_AdSlot_CreativeEnforcementSettings)(nil),                         // 33: BidRequestLightWeight.AdSlot.CreativeEnforcementSettings
	(*BidRequestLightWeight_AdSlot_NativeAdTemplate)(nil),                                    // 34: BidRequestLightWeight.AdSlot.NativeAdTemplate
	(*BidRequestLightWeight_AdSlot_AutoRefresh)(nil),                                         // 35: BidRequestLightWeight.AdSlot.AutoRefresh
	(*BidRequestLightWeight_AdSlot_StickySettings)(nil),                                      // 36: BidRequestLightWeight.AdSlot.StickySettings
	(*BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData)(nil),                           // 37: BidRequestLightWeight.AdSlot.BuyerGeneratedRequestData
	(*BidRequestLightWeight_AdSlot_MultiAdsCellInfo)(nil),                                    // 38: BidRequestLightWeight.AdSlot.MultiAdsCellInfo
	(*BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal)(nil),                           // 39: BidRequestLightWeight.AdSlot.MatchingAdData.DirectDeal
	(*BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings)(nil),                     // 40: BidRequestLightWeight.AdSlot.AutoRefresh.AutoRefreshSettings
	(*BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceApp)(nil),                 // 41: BidRequestLightWeight.AdSlot.BuyerGeneratedRequestData.SourceApp
	(*BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceJs)(nil),                  // 42: BidRequestLightWeight.AdSlot.BuyerGeneratedRequestData.SourceJs
	(*BidResponseLightWeight_Ad)(nil),                                                        // 43: BidResponseLightWeight.Ad
	(*BidResponseLightWeight_Ad_AdSlot)(nil),                                                 // 44: BidResponseLightWeight.Ad.AdSlot
}
var file_bid_proto_depIdxs = []int32{
	23, // 0: BidRequestLightWeight.bid_response_feedback:type_name -> BidRequestLightWeight.BidResponseFeedback
	24, // 1: BidRequestLightWeight.geo:type_name -> BidRequestLightWeight.Geo
	25, // 2: BidRequestLightWeight.key_value:type_name -> BidRequestLightWeight.KeyValue
	26, // 3: BidRequestLightWeight.adslot:type_name -> BidRequestLightWeight.AdSlot
	43, // 4: BidResponseLightWeight.ad:type_name -> BidResponseLightWeight.Ad
	27, // 5: BidRequestLightWeight.AdSlot.flexible_adslot_settings:type_name -> BidRequestLightWeight.AdSlot.FlexibleAdSlotSettings
	28, // 6: BidRequestLightWeight.AdSlot.consented_providers_settings:type_name -> BidRequestLightWeight.AdSlot.ConsentedProvidersSettings
	29, // 7: BidRequestLightWeight.AdSlot.excluded_creatives:type_name -> BidRequestLightWeight.AdSlot.ExcludedCreative
	30, // 8: BidRequestLightWeight.AdSlot.matching_ad_data:type_name -> BidRequestLightWeight.AdSlot.MatchingAdData
	31, // 9: BidRequestLightWeight.AdSlot.exchange_bidding:type_name -> BidRequestLightWeight.AdSlot.ExchangeBidding
	32, // 10: BidRequestLightWeight.AdSlot.open_bidding:type_name -> BidRequestLightWeight.AdSlot.OpenBidding
	33, // 11: BidRequestLightWeight.AdSlot.creative_enforcement_settings:type_name -> BidRequestLightWeight.AdSlot.CreativeEnforcementSettings
	0,  // 12: BidRequestLightWeight.AdSlot.slot_visibility:type_name -> BidRequestLightWeight.AdSlot.SlotVisibility
	1,  // 13: BidRequestLightWeight.AdSlot.iframing_state:type_name -> BidRequestLightWeight.AdSlot.IFramingState
	2,  // 14: BidRequestLightWeight.AdSlot.iframing_depth:type_name -> BidRequestLightWeight.AdSlot.IFramingDepth
	34, // 15: BidRequestLightWeight.AdSlot.native_ad_template:type_name -> BidRequestLightWeight.AdSlot.NativeAdTemplate
	3,  // 16: BidRequestLightWeight.AdSlot.native_placement_type:type_name -> BidRequestLightWeight.AdSlot.NativePlacementType
	4,  // 17: BidRequestLightWeight.AdSlot.mediation_status:type_name -> BidRequestLightWeight.AdSlot.MediationStatus
	35, // 18: BidRequestLightWeight.AdSlot.auto_refresh:type_name -> BidRequestLightWeight.AdSlot.AutoRefresh
	36, // 19: BidRequestLightWeight.AdSlot.sticky_settings:type_name -> BidRequestLightWeight.AdSlot.StickySettings
	5,  // 20: BidRequestLightWeight.AdSlot.non_browser_slot_source:type_name -> BidRequestLightWeight.AdSlot.NonBrowserSource
	6,  // 21: BidRequestLightWeight.AdSlot.renderer:type_name -> BidRequestLightWeight.AdSlot.Renderer
	7,  // 22: BidRequestLightWeight.AdSlot.amp_ad_request_type:type_name -> BidRequestLightWeight.AdSlot.AmpAdRequestType
	8,  // 23: BidRequestLightWeight.AdSlot.is_amp_page:type_name -> BidRequestLightWeight.AdSlot.AmpPage
	9,  // 24: BidRequestLightWeight.AdSlot.amp_ad_requirement_type:type_name -> BidRequestLightWeight.AdSlot.AmpAdRequirementType
	10, // 25: BidRequestLightWeight.AdSlot.allowed_ad_types:type_name -> BidRequestLightWeight.AdSlot.AllowedAdType
	37, // 26: BidRequestLightWeight.AdSlot.buyer_generated_request_data:type_name -> BidRequestLightWeight.AdSlot.BuyerGeneratedRequestData
	11, // 27: BidRequestLightWeight.AdSlot.api:type_name -> BidRequestLightWeight.AdSlot.APIFramework
	38, // 28: BidRequestLightWeight.AdSlot.multi_ads_cell_info:type_name -> BidRequestLightWeight.AdSlot.MultiAdsCellInfo
	12, // 29: BidRequestLightWeight.AdSlot.auction_environment:type_name -> BidRequestLightWeight.AdSlot.AuctionEnvironment
	39, // 30: BidRequestLightWeight.AdSlot.MatchingAdData.direct_deal:type_name -> BidRequestLightWeight.AdSlot.MatchingAdData.DirectDeal
	25, // 31: BidRequestLightWeight.AdSlot.ExchangeBidding.key_value:type_name -> BidRequestLightWeight.KeyValue
	15, // 32: BidRequestLightWeight.AdSlot.CreativeEnforcementSettings.policy_enforcement:type_name -> BidRequestLightWeight.AdSlot.CreativeEnforcementSettings.PolicyEnforcement
	16, // 33: BidRequestLightWeight.AdSlot.CreativeEnforcementSettings.publisher_blocks_enforcement:type_name -> BidRequestLightWeight.AdSlot.CreativeEnforcementSettings.PublisherBlocksEnforcement
	18, // 34: BidRequestLightWeight.AdSlot.NativeAdTemplate.style_layout_type:type_name -> BidRequestLightWeight.AdSlot.NativeAdTemplate.LayoutType
	40, // 35: BidRequestLightWeight.AdSlot.AutoRefresh.refresh_settings:type_name -> BidRequestLightWeight.AdSlot.AutoRefresh.AutoRefreshSettings
	20, // 36: BidRequestLightWeight.AdSlot.StickySettings.vertical_stickiness:type_name -> BidRequestLightWeight.AdSlot.StickySettings.Stickiness
	20, // 37: BidRequestLightWeight.AdSlot.StickySettings.top_horizontal_stickiness:type_name -> BidRequestLightWeight.AdSlot.StickySettings.Stickiness
	20, // 38: BidRequestLightWeight.AdSlot.StickySettings.bottom_horizontal_stickiness:type_name -> BidRequestLightWeight.AdSlot.StickySettings.Stickiness
	41, // 39: BidRequestLightWeight.AdSlot.BuyerGeneratedRequestData.source_app:type_name -> BidRequestLightWeight.AdSlot.BuyerGeneratedRequestData.SourceApp
	42, // 40: BidRequestLightWeight.AdSlot.BuyerGeneratedRequestData.source_js:type_name -> BidRequestLightWeight.AdSlot.BuyerGeneratedRequestData.SourceJs
	13, // 41: BidRequestLightWeight.AdSlot.MatchingAdData.DirectDeal.deal_type:type_name -> BidRequestLightWeight.AdSlot.MatchingAdData.DirectDeal.DealType
	14, // 42: BidRequestLightWeight.AdSlot.MatchingAdData.DirectDeal.creative_source:type_name -> BidRequestLightWeight.AdSlot.MatchingAdData.DirectDeal.CreativeSourceType
	19, // 43: BidRequestLightWeight.AdSlot.AutoRefresh.AutoRefreshSettings.refresh_type:type_name -> BidRequestLightWeight.AdSlot.AutoRefresh.AutoRefreshSettings.AutoRefreshType
	44, // 44: BidResponseLightWeight.Ad.adslot:type_name -> BidResponseLightWeight.Ad.AdSlot
	45, // [45:45] is the sub-list for method output_type
	45, // [45:45] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_bid_proto_init() }
func file_bid_proto_init() {
	if File_bid_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bid_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequestLightWeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bid_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidResponseLightWeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bid_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequestLightWeight_BidResponseFeedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bid_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequestLightWeight_Geo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bid_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequestLightWeight_KeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bid_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequestLightWeight_AdSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bid_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequestLightWeight_AdSlot_FlexibleAdSlotSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bid_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequestLightWeight_AdSlot_ConsentedProvidersSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bid_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequestLightWeight_AdSlot_ExcludedCreative); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bid_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequestLightWeight_AdSlot_MatchingAdData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bid_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequestLightWeight_AdSlot_ExchangeBidding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bid_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequestLightWeight_AdSlot_OpenBidding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bid_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequestLightWeight_AdSlot_CreativeEnforcementSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bid_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequestLightWeight_AdSlot_NativeAdTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bid_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequestLightWeight_AdSlot_AutoRefresh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bid_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequestLightWeight_AdSlot_StickySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bid_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bid_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequestLightWeight_AdSlot_MultiAdsCellInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bid_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequestLightWeight_AdSlot_MatchingAdData_DirectDeal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bid_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequestLightWeight_AdSlot_AutoRefresh_AutoRefreshSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bid_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bid_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceJs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bid_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidResponseLightWeight_Ad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bid_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidResponseLightWeight_Ad_AdSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bid_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceApp_)(nil),
		(*BidRequestLightWeight_AdSlot_BuyerGeneratedRequestData_SourceJs_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bid_proto_rawDesc,
			NumEnums:      21,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bid_proto_goTypes,
		DependencyIndexes: file_bid_proto_depIdxs,
		EnumInfos:         file_bid_proto_enumTypes,
		MessageInfos:      file_bid_proto_msgTypes,
	}.Build()
	File_bid_proto = out.File
	file_bid_proto_rawDesc = nil
	file_bid_proto_goTypes = nil
	file_bid_proto_depIdxs = nil
}
