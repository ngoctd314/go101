syntax = "proto2";
// Protocol version: v.245
// Copyright 2022 Google Inc. All Rights Reserved.

import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";

option go_package = "/realtimebidding";

// This is the message that Google uses to request bids. A BidRequest
// includes the ad slot from a single impression.
//
message BidRequestLightWeight {
  // Unique request id generated by Google. This is 16 bytes long.
  required bytes id = 2;
  // A string that identifies the browser and type of device that sent the
  // request. Certain data may be redacted or replaced.
  optional string user_agent = 6;

  message BidResponseFeedback {
    // The unique id from BidRequest.id
    optional bytes request_id = 1;

    // The index of the BidResponse_Ad if there was more than one. The index
    // starts at zero for the first creative.
    optional int32 creative_index = 2;

    // The status code for the ad. See creative-status-codes.txt in the
    // technical documentation for a list of ids.
    optional int32 creative_status_code = 3;


    // If the bid won the auction, this is the price paid in your account
    // currency. If the bid participated in the auction but was out-bid, this
    // is the CPM that should have been exceeded in order to win. This is not
    // set if the bid was filtered prior to the auction, if the publisher or
    // winning bidder has opted out of price feedback or if your account has
    // opted out of sharing winning prices with other bidders. For first-price
    // auctions, minimum_bid_to_win is populated instead of this field.
    optional int64 cpm_micros = 4;

    // The minimum bid value necessary to have won the auction, in micros of
    // your account currency. If your bid won the auction, this is the second
    // highest bid that was not filtered (including the floor price). If your
    // bid did not win the auction, this is the winning candidate's bid. This
    // field will only be populated if your bid participated in a first-price
    // auction, and will not be populated if your bid was filtered prior to the
    // auction.
    optional int64 minimum_bid_to_win = 7;

    // When a publisher uses an RTB auction and waterfall-based SDK mediation on
    // the same query, the winner of the real-time auction must also compete in
    // a mediation waterfall (which is ordered by price) to win the impression.
    // If the bid participated in the auction and there was no waterfall, the
    // value of this field is 0. If the bid participated in the auction and
    // there was a waterfall, the value of this field is a price representing a
    // sample bid from the eligible mediation networks that were higher than the
    // auction winner, weighted by expected fill rate. This field can be used
    // in conjunction with minimum_bid_to_win to train bidding models. The CPM
    // is in micros of your account currency.
    optional int64 sampled_mediation_cpm_ahead_of_auction_winner = 10;

    // Event notification token that was included in the bid response.
    optional bytes event_notification_token = 5;

    // Buyer creative ID that was included in the bid response.
    optional string buyer_creative_id = 6;
  }
  repeated BidResponseFeedback bid_response_feedback = 44;

  message Geo {
    // Latitude from -90.0 to +90.0, where negative is south.
    optional double lat = 1;

    // Longitude from -180.0 to +180.0, where negative is west.
    optional double lon = 2;

    // Country using ISO-3166-1 Alpha-3.
    optional string country = 3;

    // Region code using ISO-3166-2; 2-letter state code if USA.
    optional string region = 4;

    // Google metro code; similar to but not exactly Nielsen DMAs.
    optional string metro = 6;

    // City using United Nations Code for Trade & Transport Locations.
    // (https://www.unece.org/cefact/locode/service/location.htm).
    optional string city = 7;

    // Zip/postal code.
    optional string zip = 8;

    // Estimated location accuracy in meters.
    optional int32 accuracy = 11;

    // Local time as the number +/- of minutes from UTC.
    optional int32 utcoffset = 10;
  }
  optional Geo geo = 62;

  optional int32 geo_criteria_id = 39;

  // Additional key-value attributes. Currently unused.
  message KeyValue {
    optional string key = 1;
    optional string value = 2;
  }
  repeated KeyValue key_value = 38;

  message AdSlot {
    // An arbitrarily assigned slot id that is unique on a given page and
    // usually starts counting from 1. You use this to identify which slot to
    // bid on in the BidResponse.
    required int32 id = 1;

    // A stable identifier for the combination of publisher, ad slot, and page.
    optional uint64 ad_block_key = 14;

    // Set of channels of which this ad slot is a member. A channel is a set of
    // ad slots on a site. You can target a channel (like "the sports section",
    // or "all top banners") to get more fine-grained control over where your ad
    // shows. Channel names are provided by the publisher.
    repeated string targetable_channel = 10;

    // The width and height in pixels of the allowed ad sizes. Most requests
    // allow only a single size, but some allow more than one. Widths and
    // heights are at the same index. For example, if the width values are
    // [728, 300, 468] and the height values are [90, 250, 60], then the allowed
    // formats are 728x90, 300x250, and 468x60.
    //
    // For VAST video ad requests a single width/height pair specifies the
    // Google-detected video player size. If Google cannot detect the player
    // size the publisher-provided player size, if available, is used. For
    // VAST video ads, this size is informational; there is no restriction on
    // the size of the video ad that you can return.
    //
    // For mobile interstitial ads (including ones where video ads are eligible)
    // the first width height pair is the slot size (this is also the video
    // player size for VAST video ads). For many interstitials, this is the
    // screen size. Subsequent pairs are recommended interstitial ad sizes that
    // also meet the requirements for this interstitial.
    repeated int32 width = 2;
    repeated int32 height = 3;

    message FlexibleAdSlotSettings {
      optional int32 max_width = 1;
      optional int32 max_height = 2;
      optional int32 min_width = 3;
      optional int32 min_height = 4;
    }
    // If the adslot is flexible, this contains settings on how the slot
    // may be resized.
    optional FlexibleAdSlotSettings flexible_adslot_settings = 50;

    // The disallowed attribute ids for the ads that can show in this slot. See
    // the publisher-excludable-creative-attributes.txt file in the technical
    // documentation for a list of ids.
    repeated int32 excluded_attribute = 4 [packed = true];

    // The allowed vendor types. See the vendors.txt file in the technical
    // documentation for a list of ids. This field does not apply to deals with
    // block overrides (see
    // https://support.google.com/authorizedbuyers/answer/6114194).
    repeated int32 allowed_vendor_type = 6 [packed = true];

    message ConsentedProvidersSettings {
      // Set of IDs corresponding to ad tech providers (ATPs) for whom the
      // publisher has specified to Google that its EEA users have given legally
      // valid consent to: 1) the use of cookies or other local storage where
      // legally required; and 2) the collection, sharing, and use of personal
      // data for personalization of ads by an ATP in accordance with Google's
      // EU User Consent Policy.
      //
      // If a publisher is using the IAB Transparency and Consent Framework
      // (TCF) v2 to manage user consent, this is the set of ATPs consented via
      // the Additional Consent string (see
      // https://support.google.com/admanager/answer/9681920 for details about
      // Google's Additional Consent mode). ATPs consented via the TCF v2
      // consent string are represented in the
      // ConsentedProvidersSettings.tcf_consent_string field.
      //
      // A mapping of ATP ID to ATP name is posted at providers.csv.
      repeated int64 consented_providers = 2 [packed = true];

      // The web-safe base64-encoded IAB Transparency and Consent Framework
      // (TCF) v2 consent string fetched from the publisher's IAB Consent
      // Management Platform (CMP). The structure of the string is defined by
      // the IAB TCF v2. This field will be populated if the publisher has
      // integrated with a CMP for TCF v2 and that CMP indicates that GDPR
      // applies to this ad request and provides a valid consent string. See
      // https://support.google.com/authorizedbuyers/answer/9789378 for
      // additional information about the Google TCF v2 integration.
      //
      // See the IAB Global Vendor List at
      // https://vendor-list.consensu.org/v2/vendor-list.json for details about
      // the vendors listed in the consent string.
      optional string tcf_consent_string = 3;

      // The raw Additional Consent string, which contains a list of certain
      // Google Ad Tech Providers (ATPs). These ATPs are not registered with IAB
      // TCF v2, but publishers or their Consent Management Providers (CMPs)
      // have ensured that certain disclosures are given to, and consents are
      // obtained from, end users, as required by Google's EU User Consent
      // Policy. This field is only populated with the use of CMPs that are
      // integrated with IAB TCF v2. Such CMPs use the raw Additional Consent
      // string to indicate vendors that are not registered with IAB, and
      // communicate end users' CMP choices to those vendors. The
      // consented_providers field contains the set of vendors that mirrors the
      // one represented by the additional_consent_string field, which is in the
      // raw form. Vendors or any other third-party service providers must not
      // create AC strings themselves.
      //
      // See https://support.google.com/admanager/answer/9681920 for more
      // details about this field.
      optional string additional_consent_string = 4;
    }
    // Information about the ad tech providers for whom the publisher has
    // specified to Google that its EEA user has consented to the use of their
    // personal data for ads personalization in accordance with Google's EU User
    // Consent Policy. This field will only be populated when regs_gdpr is true.
    optional ConsentedProvidersSettings consented_providers_settings = 42;

    // This field will be set to true in either of the two following cases:
    //   1. Google receives a valid IAB Transparency and Consent Framework (TCF)
    //      v2 consent string and the Consent Management Platform indicates that
    //      GDPR applies to this ad request.
    //   2. Google does not receive an IAB TCF v2 consent string and, based on
    //      information available to Google, this impression will serve to an
    //      EEA user.
    // It does not constitute legal guidance on GDPR. This field is equivalent
    // to Regs.ext.gdpr in Google OpenRTB.
    optional bool regs_gdpr = 43;

    // This field will be set to true when, based on information available to
    // Google, this impression will serve to a user in Brazil. See
    // https://storage.googleapis.com/adx-rtb-dictionaries/lgpd-providers.csv
    // for the list of ad tech providers that are allowed to
    // serve on LGPD-enforced requests.
    //
    // See https://support.google.com/authorizedbuyers/answer/9928204 for more
    // information on LGPD.
    optional bool regs_lgpd = 54;

    // The disallowed sensitive ad categories. See the
    // ad-sensitive-categories.txt file in the technical documentation for a
    // list of ids. You should enforce these exclusions if you have the ability
    // to classify ads into the listed categories. This field does not apply to
    // deals with block overrides (see
    // https://support.google.com/authorizedbuyers/answer/6114194).
    repeated int32 excluded_sensitive_category = 7 [packed = true];

    // The allowed restricted ad categories for private and open auctions. See
    // the ad-restricted-categories.txt file in the technical documentation for
    // a list of ids. These only apply for private and open auction bids. See
    // the allowed_restricted_category_for_deals field for preferred deals or
    // programmatic guarantees. If you bid with an ad in a restricted category,
    // you MUST ALWAYS declare the category in the bid response regardless of
    // the values in this field.
    repeated int32 allowed_restricted_category = 16 [packed = true];

    // The allowed restricted ad categories for preferred deals or programmatic
    // guarantees. See the ad-restricted-categories.txt file in the technical
    // documentation for a list of ids. These only apply for preferred deals or
    // programmatic guarantees. See the allowed_restricted_category field for
    // private and open auctions. In some cases, restricted categories are only
    // allowed on preferred deals or programmatic guarantees, so this field
    // lists all categories in allowed_restricted_category, and additionally,
    // restricted categories that are only allowed for preferred deals or
    // programmatic guarantees. If you bid with an ad in a restricted category,
    // you MUST ALWAYS declare the category in the bid response regardless of
    // the values in this field.
    repeated int32 allowed_restricted_category_for_deals = 22 [packed = true];

    // List of creative languages allowed by the publisher. The order is
    // arbitrary. The codes are 2 or 5 characters and are documented at
    // https://developers.google.com/google-ads/api/reference/data/codes-formats#languages.
    // When not set, all languages are allowed.
    repeated string allowed_languages = 27;

    // The disallowed ad product categories. See the ad-product-categories.txt
    // file in the technical documentation for a list of ids. You should enforce
    // these exclusions if you have the ability to classify ads into the listed
    // categories. This field does not apply to deals with block overrides (see
    // https://support.google.com/authorizedbuyers/answer/6114194).
    repeated int32 excluded_product_category = 13 [packed = true];

    // A creative that is disallowed to bid on this impression due to Ad
    // Exchange policies or creative disapproval, excluded creative attributes,
    // excluded product or sensitive categories, allowed vendor types,
    // restricted categories or languages applicable to the bid request.
    message ExcludedCreative {
      // Buyer creative ID of the disallowed creative.
      optional string buyer_creative_id = 1;
    }

    // Creatives that are disallowed for the impression. Submitting a bid with
    // one of the creatives in this list will result in such bid being filtered
    // before the auction. Please contact your account manager if you would like
    // to enable this feature.
    repeated ExcludedCreative excluded_creatives = 18;

    // Whether the adslot is only eligible for deals bids. Bids for the open
    // auction will be filtered when this field is set to true. Bidders can bid
    // on the open auction or deals when this field is set to false.
    optional bool only_deal_bids_accepted = 49;

    // Information about the pre-targeting configs that matched.
    //
    message MatchingAdData {
      // The billing ids corresponding to the pretargeting configs that matched.
      repeated int64 billing_id = 2 [packed = false];

      // The minimum CPM value that you can bid to not be filtered before the
      // auction. This may be a global minimum, or it may be a minimum set by
      // the publisher. The value is in micros of the bidding currency.
      // The bidding currency is determined by:
      // 1. The bidder-level currency, if configured.
      // 2. Otherwise, the currency of the buyer accounts indicated by the
      // billing IDs in the billing_id field.
      optional int64 minimum_cpm_micros = 5;

      // Information about any deals that matched for this inventory.
      //
      message DirectDeal {
        // An id identifying the deal.
        optional int64 direct_deal_id = 1;

        // For deal_type=PREFERRED_DEAL or deal_type=PROGRAMMATIC_GUARANTEED,
        // you must bid at least fixed_cpm_micros (in micros of the bidding
        // currency) in order to participate in the deal. If you win, you will
        // be charged fixed_cpm_micros. For deal_type=PRIVATE_AUCTION or
        // deal_type=AUCTION_PACKAGE you must bid at least fixed_cpm_micros.
        // Bidding higher CPM than fixed_cpm_micros will increase your chance
        // to win when deal_type=PRIVATE_AUCTION or deal_type=AUCTION_PACKAGE,
        // however it will not increase your chance to win for other types of
        // deals.
        // The bidding currency is determined by:
        // 1. The bidder-level currency, if configured.
        // 2. Otherwise, the currency of the buyer accounts indicated by the
        // billing IDs in the billing_id field.
        optional int64 fixed_cpm_micros = 2;

        // The type of the deal. Note that Authorized Buyers policy overrides
        // apply to all Programmatic Guaranteed and Preferred Deal bids, and do
        // not apply to bids for other deal types.
        enum DealType {
          UNKNOWN_DEAL_TYPE = 0;

          // Bids are fixed-price and evaluated before the Open Auction. Bidders
          // are not required to bid with Preferred Deals when they are present
          // on the bid request. See
          // https://support.google.com/authorizedbuyers/answer/2604595 for more
          // information.
          PREFERRED_DEAL = 1;

          // Bids participate in a Private Auction against a select list of
          // buyers with specific floors. See
          // https://support.google.com/authorizedbuyers/answer/2839853 for more
          // information.
          PRIVATE_AUCTION = 2;

          // Bids are fixed-price and evaluated before the Open Auction. Bidders
          // are expected to bid with Programmatic Guaranteed deals whenever
          // they are present on a bid request in order to ensure that the
          // number of impressions agreed upon for a given deal are served. See
          // https://support.google.com/authorizedbuyers/answer/7174589 for more
          // information.
          PROGRAMMATIC_GUARANTEED = 3;

          // The deal ID is an identifier for a collection of Open Auction
          // inventory matching a given set of targeting criteria. See
          // https://support.google.com/authorizedbuyers/answer/7516884 for more
          // information.
          AUCTION_PACKAGE = 4;
        }
        optional DealType deal_type = 3 [default = UNKNOWN_DEAL_TYPE];

        // Whether the publisher has exempted this deal from configured blocks.
        // This setting does not override AdX policies or Ad Review Center
        // decisions.
        optional bool publisher_blocks_overridden = 4 [default = false];

        // Experimental field; subject to change.
        // An enum declaring the host of the creative, which will only be
        // populated for Programmatic Guaranteed deals.
        // Currently, this field should only ever be set to
        // CREATIVE_SOURCE_ADVERTISER.
        enum CreativeSourceType {
          CREATIVE_SOURCE_UNKNOWN = 0;
          // The creative is hosted by the advertiser, which means the bidder
          // is required to provide a creative in the bid response.
          CREATIVE_SOURCE_ADVERTISER = 1;
          // The creative is hosted by the publisher, which means the bidder
          // does not need to include a creative in the bid response.
          // For more information on publisher-hosted creatives, see
          // https://support.google.com/admanager/answer/9243220.
          // This feature isn't currently supported for RTB bidders.
          CREATIVE_SOURCE_PUBLISHER = 2;
        }
        optional CreativeSourceType creative_source = 16
            [default = CREATIVE_SOURCE_ADVERTISER];

        // This field is only applicable to Programmatic Guaranteed deals. The
        // buyer is allowed to skip bidding on the impression if this field is
        // false. When it is true, the buyer is required to bid on this deal for
        // this impression opportunity.
        optional bool must_bid = 9 [default = true];
      }
      repeated DirectDeal direct_deal = 6;
    }
    repeated MatchingAdData matching_ad_data = 9;

    // The publisher settings list ids that apply to this slot. See the RTB
    // Publisher Settings guide at
    // https://developers.google.com/authorized-buyers/rtb/pub-settings-guide
    // for details.
    repeated fixed64 publisher_settings_list_id = 15;

    // Parameters related to exchange bidding (third party exchanges doing
    // real-time bidding on DFP). This is never populated in calls to AdX
    // real-time bidders.
    //
    message ExchangeBidding {
      // Repeated KeyValue pairs to be sent from the publisher to the
      // exchange bidder.
      repeated KeyValue key_value = 3;
    }
    optional ExchangeBidding exchange_bidding = 28;

    // Parameters related to Open Bidding.
    message OpenBidding {
      // This field is set to true if the publisher set up a yield group or a
      // mediation group that targets this adslot and this bidder. See
      // https://support.google.com/admanager/answer/7128453 for information on
      // Open Bidding and its effects on the bidding process.
      optional bool is_open_bidding = 2;
    }
    optional OpenBidding open_bidding = 53;

    // Indicates the creative policy and publisher blocks that applies to this
    // request.
    message CreativeEnforcementSettings {
      // Creative policy enforcement level that applies to this request.
      // Creatives that don't adhere to the specified policy will be filtered
      // before the auction. The status of the creatives with their respective
      // policies can be retrieved via Creative API.
      // https://developers.google.com/authorized-buyers/apis/guides/rtb-api/creatives
      // Bids on deals may override the policy enforcement applicable to the
      // request.
      enum PolicyEnforcement {
        POLICY_ENFORCEMENT_UNKNOWN = 0;

        // Baseline policy for all ads serving through any of Google's ads
        // platform products. Learn more at:
        // https://support.google.com/platformspolicy/answer/3013851.
        POLICY_ENFORCEMENT_PLATFORM_POLICY = 1;

        // Policy for ads serving through Google's ad network. This includes the
        // baseline policy for all ads serving through any of Google's ads
        // platform products. Learn more at:
        // https://support.google.com/authorizedbuyers/answer/1325008.
        POLICY_ENFORCEMENT_NETWORK_AND_PLATFORM_POLICY = 2;
      }
      optional PolicyEnforcement policy_enforcement = 1;

      // Creative publisher blocks enforcement level that applies to this
      // request. Publisher blocks allow publishers to control which creatives
      // can be shown on their properties.
      // Deals may also override publisher blocks. Please refer to adslot.
      // matching_ad_data.direct_deal.publisher_blocks_overridden field.
      enum PublisherBlocksEnforcement {
        PUBLISHER_BLOCKS_ENFORCEMENT_UNKNOWN = 0;

        // The publisher's blocking controls are enforced on creatives
        // submitted. Publisher blocks enforcement settings are provided in the
        // following fields:
        // - publisher_settings_list_id
        // - excluded_sensitive_category
        // - allowed_restricted_category
        // - excluded_product_category
        // - allowed_vendor_type
        // - excluded_attribute
        PUBLISHER_BLOCKS_ENFORCEMENT_APPLIES = 1;

        // The publisher's blocking controls are not enforced on creatives
        // submitted.
        PUBLISHER_BLOCKS_ENFORCEMENT_OVERRIDDEN = 2;
      }
      optional PublisherBlocksEnforcement publisher_blocks_enforcement = 3;

      // Deprecated. This will be removed in August 2022.
      //
      // Indicates whether the policy, scan and publisher blocks level
      // combination is the default combination for this bidder. Please use
      // policy_enforcement and publisher_blocks_enforcement in
      // CreativeEnforcementSettings to learn which creative policy and
      // publisher blocks apply to the request.
      optional bool is_default = 4 [deprecated = true];
    }

    optional CreativeEnforcementSettings creative_enforcement_settings = 58;

    // The ad unit code (https://support.google.com/admanager/topic/4426071)
    // This is currently only set for exchange bidding requests.
    optional string dfp_ad_unit_code = 33;

    // Visibility information for the slot.
    enum SlotVisibility {
      NO_DETECTION = 0;
      ABOVE_THE_FOLD = 1;
      BELOW_THE_FOLD = 2;
    }
    optional SlotVisibility slot_visibility = 12 [default = NO_DETECTION];

    // Viewability percentage for the ad slot. This is an estimate of the
    // likelihood that this slot will be viewable by the end user based on
    // historical and environment data. It is expressed as a percentage in the
    // range of [0, 100]. The default value -1 indicates that viewability could
    // not be estimated.
    optional int32 viewability = 21 [default = -1];

    // Historical click-through rate for ads served in the ad slot. This is
    // expressed as a fraction in the range [0.0, 1.0]. The default value of
    // -1.0 indicates that historical click-through rate data is not available.
    // This figure does not include data aggregated from Google Ads.
    optional float click_through_rate = 25 [default = -1.0];

    // Historical completion rate for video ads served in the ad slot. This is
    // expressed as a fraction in the range [0.0, 1.0]. The default value of
    // -1.0 indicates that historical completion rate data is not available.
    // This field is only applicable to video inventory, and does not include
    // data aggregated from Google Ads.
    optional float video_completion_rate = 30 [default = -1.0];

    // iFraming state of the ad slot on the webpage where it is present.
    enum IFramingState {
      UNKNOWN_IFRAME_STATE = 0;
      NO_IFRAME = 1;
      SAME_DOMAIN_IFRAME = 2;
      CROSS_DOMAIN_IFRAME = 3;
    }
    optional IFramingState iframing_state = 19 [default = UNKNOWN_IFRAME_STATE];

    // iFrame depth of the ad slot on the webpage where it is present.
    // Currently only set for video ad requests.
    enum IFramingDepth {
      UNKNOWN_IFRAME_DEPTH = 0;
      NOT_IN_IFRAME = 1;
      ONE_IFRAME = 2;
      MULTIPLE_IFRAME = 3;
    }
    optional IFramingDepth iframing_depth = 20 [default = UNKNOWN_IFRAME_DEPTH];

    // A native ad consists of pieces that are rendered by the publisher. A
    // publisher may support multiple distinct native ad templates. If the
    // request also allows banners or videos, you can respond with other
    // types of ads by setting html_snippet or video_url instead. If only
    // native templates exist, you must set the native_ad field in any
    // response you send.
    //
    message NativeAdTemplate {
      // Defines the bits used in required_fields and recommended_fields. There
      // is one bit for each of the fields in BidResponse.Ad.NativeAd
      enum Fields {
        NO_FIELDS = 0x0;
        HEADLINE = 0x1;
        BODY = 0x2;
        CALL_TO_ACTION = 0x4;
        ADVERTISER = 0x8;
        IMAGE = 0x10;
        LOGO = 0x20;
        APP_ICON = 0x40;
        STAR_RATING = 0x80;
        PRICE = 0x100;
        DEPRECATED_STORE = 0x200;
        VIDEO = 0x400;
      }

      // Bitfield describing which fields are required by the publisher. Bid
      // responses with no value for these fields will be rejected. Click and
      // view tracking urls are always implicitly required.
      optional int64 required_fields = 1;

      // Bitfield describing which fields are recommended by the publisher. All
      // recommended fields are supported, but not all recommended fields are
      // required.
      optional int64 recommended_fields = 2;

      // max_safe_length indicates the maximum number of Unicode characters that
      // are guaranteed to be shown without truncation. Longer strings may be
      // truncated and ellipsized by Ad Exchange or the publisher during
      // rendering.
      optional int32 headline_max_safe_length = 3;
      optional int32 body_max_safe_length = 4;
      optional int32 call_to_action_max_safe_length = 5;
      optional int32 advertiser_max_safe_length = 6;
      optional int32 price_max_safe_length = 15;

      // The width and height from which to calculate the required aspect ratio.
      // You can provide a larger image in the response. Images that have aspect
      // ratios substantially different than those implied by the height and
      // width may be filtered.
      optional int32 image_width = 7;
      optional int32 image_height = 8;
      optional int32 logo_width = 9;
      optional int32 logo_height = 10;
      optional int32 app_icon_width = 11;
      optional int32 app_icon_height = 12;

      // Globally distinct id for the specific style, HTML, and CSS with which
      // the native ad is rendered.
      optional int32 style_id = 16;

      // Type of style layout for each native ad template.
      enum LayoutType {
        PIXEL = 0;
        FLUID = 1;
      }
      optional LayoutType style_layout_type = 17 [default = PIXEL];

      // If the style_layout_type is Pixel, width and height of the
      // entire native ad after rendering. If the style_layout_type is
      // Fluid, the style_height and style_width may optionally
      // not be populated.
      optional int32 style_height = 18;
      optional int32 style_width = 19;
    }
    repeated NativeAdTemplate native_ad_template = 51;

    // NativePlacementType describes placement of native ad slot with respect to
    // surrounding context.
    enum NativePlacementType {
      PLACEMENT_UNKNOWN = 0;
      // In the feed of content - for example as an item inside the organic
      // feed/grid/listing/carousel.
      PLACEMENT_IN_FEED = 1;
      // In the atomic unit of the content - i.e., in the article page or single
      // image page.
      PLACEMENT_ATOMIC_UNIT = 2;
      // Outside the core content - for example in the ads section on the right
      // rail, as a banner-style placement near the content, etc.
      PLACEMENT_OUTSIDE = 3;
      // Recommendation widget, most commonly presented below the article
      // content.
      PLACEMENT_RECOMMENDATION = 4;
    }

    optional NativePlacementType native_placement_type = 45
        [default = PLACEMENT_UNKNOWN];

    // Whether the ad request has been determined to come directly from the
    // publisher.
    enum MediationStatus {
      UNKNOWN = 0;
      DIRECT_REQUEST = 1;
    }
    optional MediationStatus mediation_status = 52 [default = UNKNOWN];

    // Auto refresh settings.
    message AutoRefresh {
      message AutoRefreshSettings {
        enum AutoRefreshType {
          UNKNOWN_AUTO_REFRESH_TYPE = 0;
          USER_ACTION = 1;  // Refresh triggered by user-initiated action such
                            // as scrolling.
          EVENT = 2;  // Event-driven content change. For example, ads refresh
                      // when the football game score changes on the page.
          TIME = 3;   // Time-based refresh. Ads refresh on a predefined time
                      // interval even without user activity.
        }
        // The type of the declared auto refresh.
        optional AutoRefreshType refresh_type = 1
            [default = UNKNOWN_AUTO_REFRESH_TYPE];

        // The minimum refresh interval. This applies to all refresh types.
        optional int32 min_refresh_interval_seconds = 2;
      }

      // The auto-refresh settings that the publisher has on this
      // inventory. This is repeated because publishers may
      // do multiple types of auto refresh on one piece of inventory.
      repeated AutoRefreshSettings refresh_settings = 1;

      // The number of times this ad slot had been refreshed since last page
      // load.
      optional int32 refresh_count = 2 [default = 0];
    }
    optional AutoRefresh auto_refresh = 23;

    // Stickiness settings declared by the publisher.
    // Next Tag: 4
    message StickySettings {
      // Specifies the allowable sticky settings values.
      enum Stickiness {
        UNKNOWN_STICKINESS = 0;
        IS_STICKY = 1;
      }

      // Whether the ad slot is a sidebar that sticks on screen when user
      // scrolls.
      optional Stickiness vertical_stickiness = 1
          [default = UNKNOWN_STICKINESS];

      // Whether the ad slot is a horizontal slot that sticks on the top of the
      // screen when user scrolls.
      optional Stickiness top_horizontal_stickiness = 2
          [default = UNKNOWN_STICKINESS];

      // Whether the ad slot is a horizontal slot that sticks on the bottom of
      // the screen when user scrolls.
      optional Stickiness bottom_horizontal_stickiness = 3
          [default = UNKNOWN_STICKINESS];
    }
    optional StickySettings sticky_settings = 31;

    // Sources for non-browser inventory.
    enum NonBrowserSource {
      UNDECLARED_SOURCE = 0;
      DESKTOP_APP = 1;
    }
    // Publisher declaration stating that this ad slot may serve on
    // non-browser inventory, like desktop apps.
    optional NonBrowserSource non_browser_slot_source = 34
        [default = UNDECLARED_SOURCE];

    // Defines who controls the environment that made the ad request and will
    // render the ad. On platforms where code written by Google will handle
    // the ad this field is set to GOOGLE. When this field is PUBLISHER the
    // publisher has placed their own code on the device to handle playback of
    // the ad. There is no technical difference in how these request are
    // handled. You may use this field to differentiate between different
    // environments for non-technical reasons. This field is only set for
    // requests that allow VAST video ads.
    enum Renderer {
      UNKNOWN_RENDERER = 0;
      GOOGLE = 1;
      PUBLISHER = 2;
    }
    optional Renderer renderer = 26 [default = UNKNOWN_RENDERER];

    // Whether this request is for an Accelerated Mobile Page (AMP). AMP HTML
    // pages load faster, by restricting parts of HTML, CSS and Javascript. For
    // more information on how AMP ads render, refer to the AMP ads README:
    // https://github.com/ampproject/amphtml/blob/master/ads/README.md
    enum AmpAdRequestType {
      // AMP status unknown. Request may or may not be from an AMP page.
      UNKNOWN_AMP = 0;

      // Not an AMP page. Could be regular HTML, VAST video, etc.
      NON_AMP_PAGE = 1;

      // Late-loading request from an AMP HTML page. Ad will render with a
      // slight delay so it will not negatively impact page render performance.
      AMP_PAGE_LATE_REQUEST = 2;
    }
    optional AmpAdRequestType amp_ad_request_type = 29 [default = NON_AMP_PAGE];

    // Whether this is an AMP page or not.
    enum AmpPage {
      // AMP page status unknown.
      UNKNOWN_AMP_PAGE = 0;
      // This is not an AMP page.
      DIALECT_HTML = 1;
      // This is an Amp page.
      DIALECT_HTML_AMP = 2;
    }
    optional AmpPage is_amp_page = 38;

    // Possible requirement types for AMP ads.
    enum AmpAdRequirementType {
      // AMP ad requirements unknown.
      UNKNOWN_AMP_AD_REQUIREMENT_TYPE = 0;
      // AMP ads are not allowed.
      AMP_AD_NOT_ALLOWED = 1;
      // Either AMP ads or non-AMP ads are allowed;
      // AMP ads are not early rendered.
      AMP_AD_ALLOWED_AND_NOT_EARLY_RENDERED = 2;
      // Either AMP ads or non-AMP ads are allowed;
      // AMP ads are early rendered.
      AMP_AD_ALLOWED_AND_EARLY_RENDERED = 3;
      // AMP ads are required.
      // Ads that are non-AMP may be rejected by the publisher.
      AMP_AD_REQUIRED = 4;
    }
    optional AmpAdRequirementType amp_ad_requirement_type = 39;

    // Whether the user receives a reward for viewing the ad. For video ads,
    // typical implementations allow users to read an additional news article
    // for free, receive an extra life in a game, or get a sponsored ad-free
    // music session. The reward is typically distributed after the video ad is
    // completed.
    optional bool is_rewarded = 32 [default = false];

    // Possible ad types that are allowed in the bid response. allowed_ad_types
    // always contains one or more values. Interstitial slots may also support
    // banner ads. An ad slot with ALLOWED_AD_TYPE_NATIVE may or may not support
    // native video, regardless of whether ALLOWED_AD_TYPE_VIDEO is set.
    // Likewise, an ad slot without ALLOWED_AD_TYPE_NATIVE does not support
    // native video, regardless of whether ALLOWED_AD_TYPE_VIDEO is set.
    enum AllowedAdType {
      UNKNOWN_ALLOWED_AD_TYPE = -1;
      ALLOWED_AD_TYPE_BANNER = 0;
      ALLOWED_AD_TYPE_NATIVE = 1;
      ALLOWED_AD_TYPE_VIDEO = 2;
      ALLOWED_AD_TYPE_AUDIO = 3;
    }
    repeated AllowedAdType allowed_ad_types = 36 [packed = true];

    // Total number of impressions served to this user (within this specific
    // site or app) in this browsing session, plus 1. A session ends after 30
    // minutes inactivity. The default value of -1 indicates that the session
    // depth cannot be estimated.
    optional int32 session_depth = 40 [default = -1];

    // Encrypted data to be passed to a buyer by the publisher.
    message BuyerGeneratedRequestData {
      // The source of the signal when this request is from an app.
      message SourceApp {
        // Identifier for the SDK that generated this data. It will match the id
        // in mobile.installed_sdk.id.
        optional string id = 1;
      }
      // The source of the signal when this request is from a web page.
      message SourceJs {
        // Identifier of the JavaScript library that generated this data
        optional string id = 1;
      }
      // The source (provider) of the signal.
      oneof source {
        SourceApp source_app = 1;
        SourceJs source_js = 3;
      }
      // The encrypted signal.
      optional string data = 2;
    }
    repeated BuyerGeneratedRequestData buyer_generated_request_data = 41;

    // Possible ad rendering API frameworks that can be supported.
    // If an API is not explicitly listed, it is assumed not to be supported.
    enum APIFramework {
      UNKNOWN_FRAMEWORK = 0;
      // Mobile Rich Media Ad Interface Definitions Version 1.0. See
      // https://www.iab.com/guidelines/mraid/.
      MRAID_1 = 3;
      // Mobile Rich Media Ad Interface Definitions Version 2.0. See
      // https://www.iab.com/guidelines/mraid/.
      MRAID_2 = 5;
      // Mobile Rich Media Ad Interface Definitions Version 3.0. See
      // https://www.iab.com/guidelines/mraid/.
      MRAID_3 = 6;
      // Open Measurement Interface Definition Version 1.0. See
      // https://iabtechlab.com/standards/open-measurement-sdk/.
      OMID_1 = 7;
    }
    // List of supported API frameworks for this impression.
    repeated APIFramework api = 46 [packed = true];

    // For ads rendered using a custom SDK only: multiplier applied to bid in
    // the auction. The adjustment reflects the likelihood that your bid would
    // generate a billable event (i.e. the ad renders successfully) if it won
    // the auction, relative to the probability that other bids generate a
    // billable event if they won the auction. This adjustment can be larger or
    // smaller than 1. This affects the final ranking in the auction only; in
    // particular, this multiplier does not affect the payment.
    optional double billable_event_rate_adjustment = 59 [default = 1.0];

    // Note: This feature is currently in beta testing for publishers
    // and is subject to change.
    // This message is populated when the request is for an individual cell
    // within a multi-ad grid. It provides cell level information as well as
    // information about the grid this cell belongs to in the AdSlot.
    // Only native ads are supported for cells in a multi-ad grid at this time.
    message MultiAdsCellInfo {
      // The row this cell belongs to.
      optional int32 cell_row = 1;
      // The column this cell belongs to.
      optional int32 cell_column = 2;
      // Total number of rows in the grid for this cell.
      optional int32 grid_rows = 3;
      // Total number of columns in the grid for this cell.
      optional int32 grid_columns = 4;
      // Unique ID for the grid. It identifies a single grid on a single
      // instance of a page and is the same for all cells within that grid. If a
      // page has multiple grids, the grid_id for other grids would be
      // different. It would also be different for the same grid in two
      // different pageviews.
      // This is distinct from the google_query_id, which will differ for every
      // request for a cell in the grid.
      optional int64 grid_id = 5;
    }
    optional MultiAdsCellInfo multi_ads_cell_info = 55;

    // Identifier of the OM SDK integration. For more info, see the OpenRTB
    // Advisory for Open Measurement SDK:
    // https://github.com/InteractiveAdvertisingBureau/AdCOM/blob/master/OpenRTB%20support%20for%20OMSDK.md#openrtb-and-adcom.
    optional string omidpn = 56;

    // Version of the OM SDK integration. For more info, see the OpenRTB
    // Advisory for Open Measurement SDK:
    // https://github.com/InteractiveAdvertisingBureau/AdCOM/blob/master/OpenRTB%20support%20for%20OMSDK.md#openrtb-and-adcom.
    optional string omidpv = 57;

    // Describes the environment where the ad auction is run:  either all
    // on the server-side, server-side with sandboxed interest group bidding
    // simulation, or with the contextual auction on the server-side and the
    // interest group bidding and the final auction on the device.
    enum AuctionEnvironment {
      // The auction determining the winning ad is held server-side.
      SERVER_SIDE_AUCTION = 0;

      // This value is currently not in use and will be provided only when
      // browsers start supporting on-device auctions.
      // The contextual auction that determines a winning contextual bid is held
      // server-side, and bidding functions are run on the device to determine
      // interest group bids. Both the winning contextual bid and interest
      // group bids are entered into a final auction held on the device to
      // select the winning ad. For more information regarding the TURTLEDOVE
      // on device bidding and auction, see:
      // https://github.com/WICG/turtledove and
      // https://github.com/WICG/turtledove/blob/main/FLEDGE.md
      ON_DEVICE_INTEREST_GROUP_AUCTION = 1;

      // An interest group auction is simulated in a sandboxed environment, and
      // its results are entered into the conventional server-side auction to
      // determine the winning ad. Experimental feature; may be subject to
      // change. For more information regarding about the TURTLEDOVE simulation
      // for RTB, see:
      // https://github.com/google/ads-privacy/tree/master/experiments/turtledove-simulation,
      // https://developers.google.com/authorized-buyers/rtb/turtledove,
      // and https://developers.google.com/authorized-buyers/rtb/fledge
      SERVER_SIDE_AUCTION_WITH_INTEREST_GROUP_SIMULATION = 2;
    }

    // Specifies where the ad auction runs.
    optional AuctionEnvironment auction_environment = 61
        [default = SERVER_SIDE_AUCTION];


  }
  repeated AdSlot adslot = 14;
}

message BidResponseLightWeight {
  message Ad {
    message AdSlot {
      // The slot id from the BidRequest that the ad may appear in.
      required int32 id = 1;
      required int64 max_cpm_micros = 2;
      optional int64 min_cpm_micros = 3;
    }
    repeated AdSlot adslot = 3;
  }
  repeated Ad ad = 2;

  optional int32 processing_time_ms = 4;
}