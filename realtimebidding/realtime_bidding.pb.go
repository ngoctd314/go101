// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.6.1
// source: googleDspManager/models-proto/r.proto

package realtimebidding

import (
	_ "github.com/golang/protobuf/ptypes/duration"
	_ "github.com/golang/protobuf/ptypes/struct"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SKAdNetwork API starting from version 2.2 supports multiple ad
// presentation options specified by the `fidelity-type` parameter of the
// SKAdNetwork signature.  The following are the fidelity types supported by
// Apple. For more info visit:
// https://developer.apple.com/documentation/storekit/skadnetwork/signing_and_providing_ads
type SKAdNetworkFidelityType int32

const (
	// Attribution for app installs within 24 hours of viewing an ad for at least
	// 3 seconds. Supported for SKAdnetwork version 2.2 and up. For more info see:
	// https://developer.apple.com/documentation/storekit/skadnetwork/generating_the_signature_to_validate_view-through_ads
	SKAdNetworkFidelityType_VIEW_THROUGH_ADS SKAdNetworkFidelityType = 0
	// Attribution for app installs initiated from the StoreKit-rendered App Store
	// product page driven by ad clicks. Supported for all SKAdNetwork versions.
	// For more info see:
	// https://developer.apple.com/documentation/storekit/skadnetwork/generating_the_signature_to_validate_storekit-rendered_ads
	SKAdNetworkFidelityType_STOREKIT_RENDERED_ADS SKAdNetworkFidelityType = 1
)

// Enum value maps for SKAdNetworkFidelityType.
var (
	SKAdNetworkFidelityType_name = map[int32]string{
		0: "VIEW_THROUGH_ADS",
		1: "STOREKIT_RENDERED_ADS",
	}
	SKAdNetworkFidelityType_value = map[string]int32{
		"VIEW_THROUGH_ADS":      0,
		"STOREKIT_RENDERED_ADS": 1,
	}
)

func (x SKAdNetworkFidelityType) Enum() *SKAdNetworkFidelityType {
	p := new(SKAdNetworkFidelityType)
	*p = x
	return p
}

func (x SKAdNetworkFidelityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SKAdNetworkFidelityType) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[0].Descriptor()
}

func (SKAdNetworkFidelityType) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[0]
}

func (x SKAdNetworkFidelityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SKAdNetworkFidelityType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SKAdNetworkFidelityType(num)
	return nil
}

// Deprecated: Use SKAdNetworkFidelityType.Descriptor instead.
func (SKAdNetworkFidelityType) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0}
}

// Reasons for special treatment of user data (google_user_id,
// hosted_match_data, IDFA, etc).
type BidRequest_UserDataTreatment int32

const (
	// The current request should be treated as child-directed for purposes of
	// the Children's Online Privacy Protection Act. See
	// https://support.google.com/admanager/answer/4442399 for more information.
	BidRequest_TAG_FOR_CHILD_DIRECTED_TREATMENT BidRequest_UserDataTreatment = 0
)

// Enum value maps for BidRequest_UserDataTreatment.
var (
	BidRequest_UserDataTreatment_name = map[int32]string{
		0: "TAG_FOR_CHILD_DIRECTED_TREATMENT",
	}
	BidRequest_UserDataTreatment_value = map[string]int32{
		"TAG_FOR_CHILD_DIRECTED_TREATMENT": 0,
	}
)

func (x BidRequest_UserDataTreatment) Enum() *BidRequest_UserDataTreatment {
	p := new(BidRequest_UserDataTreatment)
	*p = x
	return p
}

func (x BidRequest_UserDataTreatment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_UserDataTreatment) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[1].Descriptor()
}

func (BidRequest_UserDataTreatment) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[1]
}

func (x BidRequest_UserDataTreatment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_UserDataTreatment) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_UserDataTreatment(num)
	return nil
}

// Deprecated: Use BidRequest_UserDataTreatment.Descriptor instead.
func (BidRequest_UserDataTreatment) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 0}
}

// The type of auction that will be run for this query.
type BidRequest_AuctionType int32

const (
	BidRequest_UNKNOWN_AUCTION_TYPE BidRequest_AuctionType = 0
	BidRequest_FIRST_PRICE          BidRequest_AuctionType = 1
	BidRequest_SECOND_PRICE         BidRequest_AuctionType = 2
	BidRequest_FIXED_PRICE          BidRequest_AuctionType = 3
)

// Enum value maps for BidRequest_AuctionType.
var (
	BidRequest_AuctionType_name = map[int32]string{
		0: "UNKNOWN_AUCTION_TYPE",
		1: "FIRST_PRICE",
		2: "SECOND_PRICE",
		3: "FIXED_PRICE",
	}
	BidRequest_AuctionType_value = map[string]int32{
		"UNKNOWN_AUCTION_TYPE": 0,
		"FIRST_PRICE":          1,
		"SECOND_PRICE":         2,
		"FIXED_PRICE":          3,
	}
)

func (x BidRequest_AuctionType) Enum() *BidRequest_AuctionType {
	p := new(BidRequest_AuctionType)
	*p = x
	return p
}

func (x BidRequest_AuctionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_AuctionType) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[2].Descriptor()
}

func (BidRequest_AuctionType) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[2]
}

func (x BidRequest_AuctionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_AuctionType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_AuctionType(num)
	return nil
}

// Deprecated: Use BidRequest_AuctionType.Descriptor instead.
func (BidRequest_AuctionType) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 1}
}

// Publisher type of the inventory where the ad will be shown. For a given
// request, publisher inventory can be either owned and operated (O&O),
// represented by the publisher, or of unknown status.
type BidRequest_PublisherType int32

const (
	BidRequest_UNKNOWN_PUBLISHER_TYPE       BidRequest_PublisherType = 0
	BidRequest_PUBLISHER_OWNED_AND_OPERATED BidRequest_PublisherType = 1
	BidRequest_PUBLISHER_REPRESENTED        BidRequest_PublisherType = 2
	// Deprecated: Do not use.
	BidRequest_DEPRECATED_GOOGLE_REPRESENTED BidRequest_PublisherType = 3
)

// Enum value maps for BidRequest_PublisherType.
var (
	BidRequest_PublisherType_name = map[int32]string{
		0: "UNKNOWN_PUBLISHER_TYPE",
		1: "PUBLISHER_OWNED_AND_OPERATED",
		2: "PUBLISHER_REPRESENTED",
		3: "DEPRECATED_GOOGLE_REPRESENTED",
	}
	BidRequest_PublisherType_value = map[string]int32{
		"UNKNOWN_PUBLISHER_TYPE":        0,
		"PUBLISHER_OWNED_AND_OPERATED":  1,
		"PUBLISHER_REPRESENTED":         2,
		"DEPRECATED_GOOGLE_REPRESENTED": 3,
	}
)

func (x BidRequest_PublisherType) Enum() *BidRequest_PublisherType {
	p := new(BidRequest_PublisherType)
	*p = x
	return p
}

func (x BidRequest_PublisherType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_PublisherType) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[3].Descriptor()
}

func (BidRequest_PublisherType) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[3]
}

func (x BidRequest_PublisherType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_PublisherType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_PublisherType(num)
	return nil
}

// Deprecated: Use BidRequest_PublisherType.Descriptor instead.
func (BidRequest_PublisherType) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 2}
}

type BidRequest_VisibilityState int32

const (
	BidRequest_VISIBILITY_STATE_UNKNOWN BidRequest_VisibilityState = 0
	// The page is at least partially visible. For example, in the foreground
	// tab of a non-minimized window.
	BidRequest_VISIBILITY_STATE_VISIBLE BidRequest_VisibilityState = 1
	// The page is not visible to users. For example, when the page is in a
	// background browser tab, or in a minimized window.
	BidRequest_VISIBILITY_STATE_HIDDEN BidRequest_VisibilityState = 2
)

// Enum value maps for BidRequest_VisibilityState.
var (
	BidRequest_VisibilityState_name = map[int32]string{
		0: "VISIBILITY_STATE_UNKNOWN",
		1: "VISIBILITY_STATE_VISIBLE",
		2: "VISIBILITY_STATE_HIDDEN",
	}
	BidRequest_VisibilityState_value = map[string]int32{
		"VISIBILITY_STATE_UNKNOWN": 0,
		"VISIBILITY_STATE_VISIBLE": 1,
		"VISIBILITY_STATE_HIDDEN":  2,
	}
)

func (x BidRequest_VisibilityState) Enum() *BidRequest_VisibilityState {
	p := new(BidRequest_VisibilityState)
	*p = x
	return p
}

func (x BidRequest_VisibilityState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_VisibilityState) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[4].Descriptor()
}

func (BidRequest_VisibilityState) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[4]
}

func (x BidRequest_VisibilityState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_VisibilityState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_VisibilityState(num)
	return nil
}

// Deprecated: Use BidRequest_VisibilityState.Descriptor instead.
func (BidRequest_VisibilityState) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 3}
}

// Experimental feature; may be subject to change. See
// https://support.google.com/authorizedbuyers/answer/10890762 for more
// information.
//
// Describes the scope of frequency cap enforcement available for this
// request. Frequency caps to be enforced for a bid can be specified in the
// BidResponse.ad.adslot.frequency_cap field.
type BidRequest_FrequencyCappingScope int32

const (
	// Default value which should not be used, or which can indicate that
	// frequency cap scope could not be reliably determined.
	BidRequest_FREQUENCY_CAPPING_SCOPE_UNKNOWN BidRequest_FrequencyCappingScope = 0
	// Frequency capping based on bid response specifications is not available
	// for this request. A frequency-capped bid for a bid request with no
	// frequency cap availability will be filtered prior to the auction.
	BidRequest_FREQUENCY_CAPPING_SCOPE_NONE BidRequest_FrequencyCappingScope = 1
	// Frequency capping enforcement is available across multiple sites within
	// the same browser.
	BidRequest_FREQUENCY_CAPPING_SCOPE_BROWSER BidRequest_FrequencyCappingScope = 2
	// Frequency capping enforcement is available across multiple apps on the
	// device, excluding browsers.
	BidRequest_FREQUENCY_CAPPING_SCOPE_DEVICE BidRequest_FrequencyCappingScope = 3
	// Frequency capping enforcement is available within a single app.
	BidRequest_FREQUENCY_CAPPING_SCOPE_APP BidRequest_FrequencyCappingScope = 4
	// Frequency capping enforcement is available within a single site.
	BidRequest_FREQUENCY_CAPPING_SCOPE_SITE BidRequest_FrequencyCappingScope = 5
)

// Enum value maps for BidRequest_FrequencyCappingScope.
var (
	BidRequest_FrequencyCappingScope_name = map[int32]string{
		0: "FREQUENCY_CAPPING_SCOPE_UNKNOWN",
		1: "FREQUENCY_CAPPING_SCOPE_NONE",
		2: "FREQUENCY_CAPPING_SCOPE_BROWSER",
		3: "FREQUENCY_CAPPING_SCOPE_DEVICE",
		4: "FREQUENCY_CAPPING_SCOPE_APP",
		5: "FREQUENCY_CAPPING_SCOPE_SITE",
	}
	BidRequest_FrequencyCappingScope_value = map[string]int32{
		"FREQUENCY_CAPPING_SCOPE_UNKNOWN": 0,
		"FREQUENCY_CAPPING_SCOPE_NONE":    1,
		"FREQUENCY_CAPPING_SCOPE_BROWSER": 2,
		"FREQUENCY_CAPPING_SCOPE_DEVICE":  3,
		"FREQUENCY_CAPPING_SCOPE_APP":     4,
		"FREQUENCY_CAPPING_SCOPE_SITE":    5,
	}
)

func (x BidRequest_FrequencyCappingScope) Enum() *BidRequest_FrequencyCappingScope {
	p := new(BidRequest_FrequencyCappingScope)
	*p = x
	return p
}

func (x BidRequest_FrequencyCappingScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_FrequencyCappingScope) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[5].Descriptor()
}

func (BidRequest_FrequencyCappingScope) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[5]
}

func (x BidRequest_FrequencyCappingScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_FrequencyCappingScope) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_FrequencyCappingScope(num)
	return nil
}

// Deprecated: Use BidRequest_FrequencyCappingScope.Descriptor instead.
func (BidRequest_FrequencyCappingScope) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 4}
}

// Specifies the reasons that ads returned in response to this request
// should not be personalized.
type BidRequest_PrivacyTreatments_NonPersonalizedAdsReason int32

const (
	BidRequest_PrivacyTreatments_UNKNOWN BidRequest_PrivacyTreatments_NonPersonalizedAdsReason = 0
	// The publisher has declared that this request should serve
	// non-personalized ads independent of other signals.
	// https://support.google.com/admanager/answer/9005435#npa
	BidRequest_PrivacyTreatments_PUBLISHER_DECLARED_NPA BidRequest_PrivacyTreatments_NonPersonalizedAdsReason = 1
	// The publisher has requested restricted data processing for this
	// request. https://support.google.com/authorizedbuyers/answer/11121285
	BidRequest_PrivacyTreatments_RESTRICT_DATA_PROCESSING BidRequest_PrivacyTreatments_NonPersonalizedAdsReason = 2
	// The user has opted out of ads personalization.
	BidRequest_PrivacyTreatments_USER_OPT_OUT BidRequest_PrivacyTreatments_NonPersonalizedAdsReason = 3
)

// Enum value maps for BidRequest_PrivacyTreatments_NonPersonalizedAdsReason.
var (
	BidRequest_PrivacyTreatments_NonPersonalizedAdsReason_name = map[int32]string{
		0: "UNKNOWN",
		1: "PUBLISHER_DECLARED_NPA",
		2: "RESTRICT_DATA_PROCESSING",
		3: "USER_OPT_OUT",
	}
	BidRequest_PrivacyTreatments_NonPersonalizedAdsReason_value = map[string]int32{
		"UNKNOWN":                  0,
		"PUBLISHER_DECLARED_NPA":   1,
		"RESTRICT_DATA_PROCESSING": 2,
		"USER_OPT_OUT":             3,
	}
)

func (x BidRequest_PrivacyTreatments_NonPersonalizedAdsReason) Enum() *BidRequest_PrivacyTreatments_NonPersonalizedAdsReason {
	p := new(BidRequest_PrivacyTreatments_NonPersonalizedAdsReason)
	*p = x
	return p
}

func (x BidRequest_PrivacyTreatments_NonPersonalizedAdsReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_PrivacyTreatments_NonPersonalizedAdsReason) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[6].Descriptor()
}

func (BidRequest_PrivacyTreatments_NonPersonalizedAdsReason) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[6]
}

func (x BidRequest_PrivacyTreatments_NonPersonalizedAdsReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_PrivacyTreatments_NonPersonalizedAdsReason) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_PrivacyTreatments_NonPersonalizedAdsReason(num)
	return nil
}

// Deprecated: Use BidRequest_PrivacyTreatments_NonPersonalizedAdsReason.Descriptor instead.
func (BidRequest_PrivacyTreatments_NonPersonalizedAdsReason) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 0, 0}
}

// The type of device on which the ad will be shown.
type BidRequest_Device_DeviceType int32

const (
	BidRequest_Device_UNKNOWN_DEVICE BidRequest_Device_DeviceType = 0
	BidRequest_Device_HIGHEND_PHONE  BidRequest_Device_DeviceType = 1
	BidRequest_Device_TABLET         BidRequest_Device_DeviceType = 2
	// Desktop or laptop devices.
	BidRequest_Device_PERSONAL_COMPUTER BidRequest_Device_DeviceType = 3
	// Both connected TVs (that is, smart TVs) and connected devices
	// (such as Roku and Apple TV).
	BidRequest_Device_CONNECTED_TV BidRequest_Device_DeviceType = 4
	BidRequest_Device_GAME_CONSOLE BidRequest_Device_DeviceType = 5
	BidRequest_Device_SET_TOP_BOX  BidRequest_Device_DeviceType = 6
)

// Enum value maps for BidRequest_Device_DeviceType.
var (
	BidRequest_Device_DeviceType_name = map[int32]string{
		0: "UNKNOWN_DEVICE",
		1: "HIGHEND_PHONE",
		2: "TABLET",
		3: "PERSONAL_COMPUTER",
		4: "CONNECTED_TV",
		5: "GAME_CONSOLE",
		6: "SET_TOP_BOX",
	}
	BidRequest_Device_DeviceType_value = map[string]int32{
		"UNKNOWN_DEVICE":    0,
		"HIGHEND_PHONE":     1,
		"TABLET":            2,
		"PERSONAL_COMPUTER": 3,
		"CONNECTED_TV":      4,
		"GAME_CONSOLE":      5,
		"SET_TOP_BOX":       6,
	}
)

func (x BidRequest_Device_DeviceType) Enum() *BidRequest_Device_DeviceType {
	p := new(BidRequest_Device_DeviceType)
	*p = x
	return p
}

func (x BidRequest_Device_DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_Device_DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[7].Descriptor()
}

func (BidRequest_Device_DeviceType) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[7]
}

func (x BidRequest_Device_DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_Device_DeviceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_Device_DeviceType(num)
	return nil
}

// Deprecated: Use BidRequest_Device_DeviceType.Descriptor instead.
func (BidRequest_Device_DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 7, 0}
}

type BidRequest_Device_ScreenOrientation int32

const (
	BidRequest_Device_UNKNOWN_ORIENTATION BidRequest_Device_ScreenOrientation = 0
	BidRequest_Device_PORTRAIT            BidRequest_Device_ScreenOrientation = 1
	BidRequest_Device_LANDSCAPE           BidRequest_Device_ScreenOrientation = 2
)

// Enum value maps for BidRequest_Device_ScreenOrientation.
var (
	BidRequest_Device_ScreenOrientation_name = map[int32]string{
		0: "UNKNOWN_ORIENTATION",
		1: "PORTRAIT",
		2: "LANDSCAPE",
	}
	BidRequest_Device_ScreenOrientation_value = map[string]int32{
		"UNKNOWN_ORIENTATION": 0,
		"PORTRAIT":            1,
		"LANDSCAPE":           2,
	}
)

func (x BidRequest_Device_ScreenOrientation) Enum() *BidRequest_Device_ScreenOrientation {
	p := new(BidRequest_Device_ScreenOrientation)
	*p = x
	return p
}

func (x BidRequest_Device_ScreenOrientation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_Device_ScreenOrientation) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[8].Descriptor()
}

func (BidRequest_Device_ScreenOrientation) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[8]
}

func (x BidRequest_Device_ScreenOrientation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_Device_ScreenOrientation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_Device_ScreenOrientation(num)
	return nil
}

// Deprecated: Use BidRequest_Device_ScreenOrientation.Descriptor instead.
func (BidRequest_Device_ScreenOrientation) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 7, 1}
}

// The possible app tracking authorization statuses that could be applicable
// for bid requests from iOS devices. For more information about iOS's app
// tracking authorization status, see:
// https://developer.apple.com/documentation/apptrackingtransparency/attrackingmanager/authorizationstatus
type BidRequest_Device_AuthorizationStatus int32

const (
	// User has not yet received a request to authorize access to app-related
	// data that can be used for tracking the user or the device.
	BidRequest_Device_NOT_DETERMINED BidRequest_Device_AuthorizationStatus = 0
	// Authorization to access app-related data that can be used for tracking
	// the user or the device is restricted.
	BidRequest_Device_RESTRICTED BidRequest_Device_AuthorizationStatus = 1
	// User denies authorization to access app-related data that can be used
	// for tracking the user or the device.
	BidRequest_Device_DENIED BidRequest_Device_AuthorizationStatus = 2
	// User authorizes access to app-related data that can be used for
	// tracking the user or the device.
	BidRequest_Device_AUTHORIZED BidRequest_Device_AuthorizationStatus = 3
)

// Enum value maps for BidRequest_Device_AuthorizationStatus.
var (
	BidRequest_Device_AuthorizationStatus_name = map[int32]string{
		0: "NOT_DETERMINED",
		1: "RESTRICTED",
		2: "DENIED",
		3: "AUTHORIZED",
	}
	BidRequest_Device_AuthorizationStatus_value = map[string]int32{
		"NOT_DETERMINED": 0,
		"RESTRICTED":     1,
		"DENIED":         2,
		"AUTHORIZED":     3,
	}
)

func (x BidRequest_Device_AuthorizationStatus) Enum() *BidRequest_Device_AuthorizationStatus {
	p := new(BidRequest_Device_AuthorizationStatus)
	*p = x
	return p
}

func (x BidRequest_Device_AuthorizationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_Device_AuthorizationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[9].Descriptor()
}

func (BidRequest_Device_AuthorizationStatus) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[9]
}

func (x BidRequest_Device_AuthorizationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_Device_AuthorizationStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_Device_AuthorizationStatus(num)
	return nil
}

// Deprecated: Use BidRequest_Device_AuthorizationStatus.Descriptor instead.
func (BidRequest_Device_AuthorizationStatus) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 7, 2}
}

// Describes where the video ad will play.
type BidRequest_Video_Placement int32

const (
	BidRequest_Video_UNKNOWN_PLACEMENT BidRequest_Video_Placement = 0
	// Instream means the ad plays before, during, or after other video
	// content. This is similar to a traditional TV commercial. The video
	// content the user is watching does not play while the ad is playing.
	BidRequest_Video_INSTREAM BidRequest_Video_Placement = 1
	// Interstitial means the video ad plays in front of non-video content,
	// (e.g., a news article or video game). The ad covers all or nearly all
	// of the space on the screen occupied by the content and the user is not
	// able to proceed to the content until the ad has finished or been
	// skipped.
	BidRequest_Video_INTERSTITIAL BidRequest_Video_Placement = 2
	// The in-feed video format is a video creative that shows within a feed
	// of content, typically a social app feed, a list of editorial content
	// items, etc, as the user is scrolling. It renders centered and not to
	// the side.
	BidRequest_Video_IN_FEED BidRequest_Video_Placement = 3
	// Audio is a request for an ad that is an audio stream. It is distinct
	// from INSTREAM above as that is exclusive to video requests.
	BidRequest_Video_AUDIO BidRequest_Video_Placement = 4
	// The in-article video format is a video creative that loads and plays
	// between paragraphs of editorial content as a standalone video player.
	BidRequest_Video_IN_ARTICLE BidRequest_Video_Placement = 5
)

// Enum value maps for BidRequest_Video_Placement.
var (
	BidRequest_Video_Placement_name = map[int32]string{
		0: "UNKNOWN_PLACEMENT",
		1: "INSTREAM",
		2: "INTERSTITIAL",
		3: "IN_FEED",
		4: "AUDIO",
		5: "IN_ARTICLE",
	}
	BidRequest_Video_Placement_value = map[string]int32{
		"UNKNOWN_PLACEMENT": 0,
		"INSTREAM":          1,
		"INTERSTITIAL":      2,
		"IN_FEED":           3,
		"AUDIO":             4,
		"IN_ARTICLE":        5,
	}
)

func (x BidRequest_Video_Placement) Enum() *BidRequest_Video_Placement {
	p := new(BidRequest_Video_Placement)
	*p = x
	return p
}

func (x BidRequest_Video_Placement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_Video_Placement) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[10].Descriptor()
}

func (BidRequest_Video_Placement) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[10]
}

func (x BidRequest_Video_Placement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_Video_Placement) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_Video_Placement(num)
	return nil
}

// Deprecated: Use BidRequest_Video_Placement.Descriptor instead.
func (BidRequest_Video_Placement) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 10, 0}
}

// Describes how the video ad will be played. The playback method is
// determined to be auto-play, click-to-play or mouse-over based on the best
// measurement available. This includes things like how recently the user
// interacted with a web page. For auto-play, ads can start playing with the
// sound on or off. Some ads (e.g., in-feed ads) are muted until the user
// interacts with the ad. Alternatively, if an ad would normally play with
// the sound on but the device is muted then the value will be set to sound
// off. For devices where it is not possible to determine if the device is
// muted (e.g., desktop), we assume that sound is on.
type BidRequest_Video_VideoPlaybackMethod int32

const (
	BidRequest_Video_METHOD_UNKNOWN                          BidRequest_Video_VideoPlaybackMethod = 0
	BidRequest_Video_AUTO_PLAY_SOUND_ON                      BidRequest_Video_VideoPlaybackMethod = 1
	BidRequest_Video_AUTO_PLAY_SOUND_OFF                     BidRequest_Video_VideoPlaybackMethod = 2
	BidRequest_Video_CLICK_TO_PLAY                           BidRequest_Video_VideoPlaybackMethod = 3
	BidRequest_Video_MOUSE_OVER                              BidRequest_Video_VideoPlaybackMethod = 4
	BidRequest_Video_INITIATE_ON_ENTERING_VIEWPORT_SOUND_ON  BidRequest_Video_VideoPlaybackMethod = 5
	BidRequest_Video_INITIATE_ON_ENTERING_VIEWPORT_SOUND_OFF BidRequest_Video_VideoPlaybackMethod = 6
)

// Enum value maps for BidRequest_Video_VideoPlaybackMethod.
var (
	BidRequest_Video_VideoPlaybackMethod_name = map[int32]string{
		0: "METHOD_UNKNOWN",
		1: "AUTO_PLAY_SOUND_ON",
		2: "AUTO_PLAY_SOUND_OFF",
		3: "CLICK_TO_PLAY",
		4: "MOUSE_OVER",
		5: "INITIATE_ON_ENTERING_VIEWPORT_SOUND_ON",
		6: "INITIATE_ON_ENTERING_VIEWPORT_SOUND_OFF",
	}
	BidRequest_Video_VideoPlaybackMethod_value = map[string]int32{
		"METHOD_UNKNOWN":                          0,
		"AUTO_PLAY_SOUND_ON":                      1,
		"AUTO_PLAY_SOUND_OFF":                     2,
		"CLICK_TO_PLAY":                           3,
		"MOUSE_OVER":                              4,
		"INITIATE_ON_ENTERING_VIEWPORT_SOUND_ON":  5,
		"INITIATE_ON_ENTERING_VIEWPORT_SOUND_OFF": 6,
	}
)

func (x BidRequest_Video_VideoPlaybackMethod) Enum() *BidRequest_Video_VideoPlaybackMethod {
	p := new(BidRequest_Video_VideoPlaybackMethod)
	*p = x
	return p
}

func (x BidRequest_Video_VideoPlaybackMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_Video_VideoPlaybackMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[11].Descriptor()
}

func (BidRequest_Video_VideoPlaybackMethod) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[11]
}

func (x BidRequest_Video_VideoPlaybackMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_Video_VideoPlaybackMethod) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_Video_VideoPlaybackMethod(num)
	return nil
}

// Deprecated: Use BidRequest_Video_VideoPlaybackMethod.Descriptor instead.
func (BidRequest_Video_VideoPlaybackMethod) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 10, 1}
}

// Does the publisher allow/require/block skippable video ads?
type BidRequest_Video_SkippableBidRequestType int32

const (
	BidRequest_Video_ALLOW_SKIPPABLE   BidRequest_Video_SkippableBidRequestType = 0
	BidRequest_Video_REQUIRE_SKIPPABLE BidRequest_Video_SkippableBidRequestType = 1
	BidRequest_Video_BLOCK_SKIPPABLE   BidRequest_Video_SkippableBidRequestType = 2
)

// Enum value maps for BidRequest_Video_SkippableBidRequestType.
var (
	BidRequest_Video_SkippableBidRequestType_name = map[int32]string{
		0: "ALLOW_SKIPPABLE",
		1: "REQUIRE_SKIPPABLE",
		2: "BLOCK_SKIPPABLE",
	}
	BidRequest_Video_SkippableBidRequestType_value = map[string]int32{
		"ALLOW_SKIPPABLE":   0,
		"REQUIRE_SKIPPABLE": 1,
		"BLOCK_SKIPPABLE":   2,
	}
)

func (x BidRequest_Video_SkippableBidRequestType) Enum() *BidRequest_Video_SkippableBidRequestType {
	p := new(BidRequest_Video_SkippableBidRequestType)
	*p = x
	return p
}

func (x BidRequest_Video_SkippableBidRequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_Video_SkippableBidRequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[12].Descriptor()
}

func (BidRequest_Video_SkippableBidRequestType) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[12]
}

func (x BidRequest_Video_SkippableBidRequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_Video_SkippableBidRequestType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_Video_SkippableBidRequestType(num)
	return nil
}

// Deprecated: Use BidRequest_Video_SkippableBidRequestType.Descriptor instead.
func (BidRequest_Video_SkippableBidRequestType) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 10, 2}
}

// Supported video protocols.
type BidRequest_Video_VideoProtocol int32

const (
	BidRequest_Video_UNKNOWN_VIDEO_PROTOCOL BidRequest_Video_VideoProtocol = 0
	BidRequest_Video_VAST_1_0               BidRequest_Video_VideoProtocol = 1
	BidRequest_Video_VAST_2_0               BidRequest_Video_VideoProtocol = 2
	BidRequest_Video_VAST_3_0               BidRequest_Video_VideoProtocol = 3
	BidRequest_Video_VAST_1_0_WRAPPER       BidRequest_Video_VideoProtocol = 4
	BidRequest_Video_VAST_2_0_WRAPPER       BidRequest_Video_VideoProtocol = 5
	BidRequest_Video_VAST_3_0_WRAPPER       BidRequest_Video_VideoProtocol = 6
	BidRequest_Video_VAST_4_0               BidRequest_Video_VideoProtocol = 7
	BidRequest_Video_VAST_4_0_WRAPPER       BidRequest_Video_VideoProtocol = 8
	BidRequest_Video_DAAST_1_0              BidRequest_Video_VideoProtocol = 9
	BidRequest_Video_DAAST_1_0_WRAPPER      BidRequest_Video_VideoProtocol = 10
)

// Enum value maps for BidRequest_Video_VideoProtocol.
var (
	BidRequest_Video_VideoProtocol_name = map[int32]string{
		0:  "UNKNOWN_VIDEO_PROTOCOL",
		1:  "VAST_1_0",
		2:  "VAST_2_0",
		3:  "VAST_3_0",
		4:  "VAST_1_0_WRAPPER",
		5:  "VAST_2_0_WRAPPER",
		6:  "VAST_3_0_WRAPPER",
		7:  "VAST_4_0",
		8:  "VAST_4_0_WRAPPER",
		9:  "DAAST_1_0",
		10: "DAAST_1_0_WRAPPER",
	}
	BidRequest_Video_VideoProtocol_value = map[string]int32{
		"UNKNOWN_VIDEO_PROTOCOL": 0,
		"VAST_1_0":               1,
		"VAST_2_0":               2,
		"VAST_3_0":               3,
		"VAST_1_0_WRAPPER":       4,
		"VAST_2_0_WRAPPER":       5,
		"VAST_3_0_WRAPPER":       6,
		"VAST_4_0":               7,
		"VAST_4_0_WRAPPER":       8,
		"DAAST_1_0":              9,
		"DAAST_1_0_WRAPPER":      10,
	}
)

func (x BidRequest_Video_VideoProtocol) Enum() *BidRequest_Video_VideoProtocol {
	p := new(BidRequest_Video_VideoProtocol)
	*p = x
	return p
}

func (x BidRequest_Video_VideoProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_Video_VideoProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[13].Descriptor()
}

func (BidRequest_Video_VideoProtocol) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[13]
}

func (x BidRequest_Video_VideoProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_Video_VideoProtocol) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_Video_VideoProtocol(num)
	return nil
}

// Deprecated: Use BidRequest_Video_VideoProtocol.Descriptor instead.
func (BidRequest_Video_VideoProtocol) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 10, 3}
}

// The video file formats that are allowed for this request. The response
// should support at least one of them.
type BidRequest_Video_VideoFormat int32

const (
	BidRequest_Video_UNKNOWN_VIDEO_FORMAT BidRequest_Video_VideoFormat = -1
	BidRequest_Video_VIDEO_FLV            BidRequest_Video_VideoFormat = 0 // Flash video files are accepted (FLV).
	BidRequest_Video_VIDEO_MP4            BidRequest_Video_VideoFormat = 1
	BidRequest_Video_YT_HOSTED            BidRequest_Video_VideoFormat = 2 // Valid VAST ads with at least one media file hosted
	// on youtube.com.
	BidRequest_Video_VPAID_FLASH   BidRequest_Video_VideoFormat = 3 // Flash VPAID (SWF).
	BidRequest_Video_VPAID_JS      BidRequest_Video_VideoFormat = 4 // JavaScript VPAID.
	BidRequest_Video_AUDIO_MP3     BidRequest_Video_VideoFormat = 5
	BidRequest_Video_AUDIO_OGG     BidRequest_Video_VideoFormat = 6
	BidRequest_Video_AUDIO_MP3_OGG BidRequest_Video_VideoFormat = 7 // Requires both MP3 & OGG as Google does not know
	// which codecs are installed on the player.
	BidRequest_Video_VIDEO_WEBM BidRequest_Video_VideoFormat = 8
	BidRequest_Video_VIDEO_MOV  BidRequest_Video_VideoFormat = 9
	BidRequest_Video_VIDEO_3GPP BidRequest_Video_VideoFormat = 10
	BidRequest_Video_VIDEO_HLS  BidRequest_Video_VideoFormat = 11
	BidRequest_Video_VIDEO_DASH BidRequest_Video_VideoFormat = 12
	BidRequest_Video_AUDIO_MP4A BidRequest_Video_VideoFormat = 13 // Audio version of MP4.
)

// Enum value maps for BidRequest_Video_VideoFormat.
var (
	BidRequest_Video_VideoFormat_name = map[int32]string{
		-1: "UNKNOWN_VIDEO_FORMAT",
		0:  "VIDEO_FLV",
		1:  "VIDEO_MP4",
		2:  "YT_HOSTED",
		3:  "VPAID_FLASH",
		4:  "VPAID_JS",
		5:  "AUDIO_MP3",
		6:  "AUDIO_OGG",
		7:  "AUDIO_MP3_OGG",
		8:  "VIDEO_WEBM",
		9:  "VIDEO_MOV",
		10: "VIDEO_3GPP",
		11: "VIDEO_HLS",
		12: "VIDEO_DASH",
		13: "AUDIO_MP4A",
	}
	BidRequest_Video_VideoFormat_value = map[string]int32{
		"UNKNOWN_VIDEO_FORMAT": -1,
		"VIDEO_FLV":            0,
		"VIDEO_MP4":            1,
		"YT_HOSTED":            2,
		"VPAID_FLASH":          3,
		"VPAID_JS":             4,
		"AUDIO_MP3":            5,
		"AUDIO_OGG":            6,
		"AUDIO_MP3_OGG":        7,
		"VIDEO_WEBM":           8,
		"VIDEO_MOV":            9,
		"VIDEO_3GPP":           10,
		"VIDEO_HLS":            11,
		"VIDEO_DASH":           12,
		"AUDIO_MP4A":           13,
	}
)

func (x BidRequest_Video_VideoFormat) Enum() *BidRequest_Video_VideoFormat {
	p := new(BidRequest_Video_VideoFormat)
	*p = x
	return p
}

func (x BidRequest_Video_VideoFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_Video_VideoFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[14].Descriptor()
}

func (BidRequest_Video_VideoFormat) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[14]
}

func (x BidRequest_Video_VideoFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_Video_VideoFormat) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_Video_VideoFormat(num)
	return nil
}

// Deprecated: Use BidRequest_Video_VideoFormat.Descriptor instead.
func (BidRequest_Video_VideoFormat) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 10, 4}
}

// End cap support. When enabled, the companion ad can be picked to be
// rendered as an end cap (info card) in the video slot after the video
// ad finishes playing. If multiple companion ads are returned, IMA SDK
// chooses one which best matches the device screen size. End cap is
// supported only on mobile video interstitial inventory.
type BidRequest_Video_EndCapSupport int32

const (
	BidRequest_Video_END_CAP_NOT_ENABLED BidRequest_Video_EndCapSupport = 0 // Companion ad won't be rendered as end cap.
	BidRequest_Video_END_CAP_OPTIONAL    BidRequest_Video_EndCapSupport = 1 // End cap will be rendered if response contains
	// Not used at this time.
	BidRequest_Video_END_CAP_FORBIDDEN BidRequest_Video_EndCapSupport = 2 // Response with companion ad is filtered.
	// Not used at this time.
	BidRequest_Video_END_CAP_REQUIRED BidRequest_Video_EndCapSupport = 3 // Response without companion ad is filtered.
)

// Enum value maps for BidRequest_Video_EndCapSupport.
var (
	BidRequest_Video_EndCapSupport_name = map[int32]string{
		0: "END_CAP_NOT_ENABLED",
		1: "END_CAP_OPTIONAL",
		2: "END_CAP_FORBIDDEN",
		3: "END_CAP_REQUIRED",
	}
	BidRequest_Video_EndCapSupport_value = map[string]int32{
		"END_CAP_NOT_ENABLED": 0,
		"END_CAP_OPTIONAL":    1,
		"END_CAP_FORBIDDEN":   2,
		"END_CAP_REQUIRED":    3,
	}
)

func (x BidRequest_Video_EndCapSupport) Enum() *BidRequest_Video_EndCapSupport {
	p := new(BidRequest_Video_EndCapSupport)
	*p = x
	return p
}

func (x BidRequest_Video_EndCapSupport) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_Video_EndCapSupport) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[15].Descriptor()
}

func (BidRequest_Video_EndCapSupport) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[15]
}

func (x BidRequest_Video_EndCapSupport) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_Video_EndCapSupport) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_Video_EndCapSupport(num)
	return nil
}

// Deprecated: Use BidRequest_Video_EndCapSupport.Descriptor instead.
func (BidRequest_Video_EndCapSupport) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 10, 5}
}

// These are the formats of the creatives allowed in this companion ad
// slot.
type BidRequest_Video_CompanionSlot_CreativeFormat int32

const (
	BidRequest_Video_CompanionSlot_UNKNOWN_CREATIVE_FORMAT BidRequest_Video_CompanionSlot_CreativeFormat = -1
	BidRequest_Video_CompanionSlot_IMAGE_CREATIVE          BidRequest_Video_CompanionSlot_CreativeFormat = 0
	BidRequest_Video_CompanionSlot_FLASH_CREATIVE          BidRequest_Video_CompanionSlot_CreativeFormat = 1
	BidRequest_Video_CompanionSlot_HTML_CREATIVE           BidRequest_Video_CompanionSlot_CreativeFormat = 2
)

// Enum value maps for BidRequest_Video_CompanionSlot_CreativeFormat.
var (
	BidRequest_Video_CompanionSlot_CreativeFormat_name = map[int32]string{
		-1: "UNKNOWN_CREATIVE_FORMAT",
		0:  "IMAGE_CREATIVE",
		1:  "FLASH_CREATIVE",
		2:  "HTML_CREATIVE",
	}
	BidRequest_Video_CompanionSlot_CreativeFormat_value = map[string]int32{
		"UNKNOWN_CREATIVE_FORMAT": -1,
		"IMAGE_CREATIVE":          0,
		"FLASH_CREATIVE":          1,
		"HTML_CREATIVE":           2,
	}
)

func (x BidRequest_Video_CompanionSlot_CreativeFormat) Enum() *BidRequest_Video_CompanionSlot_CreativeFormat {
	p := new(BidRequest_Video_CompanionSlot_CreativeFormat)
	*p = x
	return p
}

func (x BidRequest_Video_CompanionSlot_CreativeFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_Video_CompanionSlot_CreativeFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[16].Descriptor()
}

func (BidRequest_Video_CompanionSlot_CreativeFormat) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[16]
}

func (x BidRequest_Video_CompanionSlot_CreativeFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_Video_CompanionSlot_CreativeFormat) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_Video_CompanionSlot_CreativeFormat(num)
	return nil
}

// Deprecated: Use BidRequest_Video_CompanionSlot_CreativeFormat.Descriptor instead.
func (BidRequest_Video_CompanionSlot_CreativeFormat) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 10, 0, 0}
}

// Visibility information for the slot.
type BidRequest_AdSlot_SlotVisibility int32

const (
	BidRequest_AdSlot_NO_DETECTION   BidRequest_AdSlot_SlotVisibility = 0
	BidRequest_AdSlot_ABOVE_THE_FOLD BidRequest_AdSlot_SlotVisibility = 1
	BidRequest_AdSlot_BELOW_THE_FOLD BidRequest_AdSlot_SlotVisibility = 2
)

// Enum value maps for BidRequest_AdSlot_SlotVisibility.
var (
	BidRequest_AdSlot_SlotVisibility_name = map[int32]string{
		0: "NO_DETECTION",
		1: "ABOVE_THE_FOLD",
		2: "BELOW_THE_FOLD",
	}
	BidRequest_AdSlot_SlotVisibility_value = map[string]int32{
		"NO_DETECTION":   0,
		"ABOVE_THE_FOLD": 1,
		"BELOW_THE_FOLD": 2,
	}
)

func (x BidRequest_AdSlot_SlotVisibility) Enum() *BidRequest_AdSlot_SlotVisibility {
	p := new(BidRequest_AdSlot_SlotVisibility)
	*p = x
	return p
}

func (x BidRequest_AdSlot_SlotVisibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_AdSlot_SlotVisibility) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[17].Descriptor()
}

func (BidRequest_AdSlot_SlotVisibility) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[17]
}

func (x BidRequest_AdSlot_SlotVisibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_AdSlot_SlotVisibility) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_AdSlot_SlotVisibility(num)
	return nil
}

// Deprecated: Use BidRequest_AdSlot_SlotVisibility.Descriptor instead.
func (BidRequest_AdSlot_SlotVisibility) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 0}
}

// iFraming state of the ad slot on the webpage where it is present.
type BidRequest_AdSlot_IFramingState int32

const (
	BidRequest_AdSlot_UNKNOWN_IFRAME_STATE BidRequest_AdSlot_IFramingState = 0
	BidRequest_AdSlot_NO_IFRAME            BidRequest_AdSlot_IFramingState = 1
	BidRequest_AdSlot_SAME_DOMAIN_IFRAME   BidRequest_AdSlot_IFramingState = 2
	BidRequest_AdSlot_CROSS_DOMAIN_IFRAME  BidRequest_AdSlot_IFramingState = 3
)

// Enum value maps for BidRequest_AdSlot_IFramingState.
var (
	BidRequest_AdSlot_IFramingState_name = map[int32]string{
		0: "UNKNOWN_IFRAME_STATE",
		1: "NO_IFRAME",
		2: "SAME_DOMAIN_IFRAME",
		3: "CROSS_DOMAIN_IFRAME",
	}
	BidRequest_AdSlot_IFramingState_value = map[string]int32{
		"UNKNOWN_IFRAME_STATE": 0,
		"NO_IFRAME":            1,
		"SAME_DOMAIN_IFRAME":   2,
		"CROSS_DOMAIN_IFRAME":  3,
	}
)

func (x BidRequest_AdSlot_IFramingState) Enum() *BidRequest_AdSlot_IFramingState {
	p := new(BidRequest_AdSlot_IFramingState)
	*p = x
	return p
}

func (x BidRequest_AdSlot_IFramingState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_AdSlot_IFramingState) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[18].Descriptor()
}

func (BidRequest_AdSlot_IFramingState) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[18]
}

func (x BidRequest_AdSlot_IFramingState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_AdSlot_IFramingState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_AdSlot_IFramingState(num)
	return nil
}

// Deprecated: Use BidRequest_AdSlot_IFramingState.Descriptor instead.
func (BidRequest_AdSlot_IFramingState) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 1}
}

// iFrame depth of the ad slot on the webpage where it is present.
// Currently only set for video ad requests.
type BidRequest_AdSlot_IFramingDepth int32

const (
	BidRequest_AdSlot_UNKNOWN_IFRAME_DEPTH BidRequest_AdSlot_IFramingDepth = 0
	BidRequest_AdSlot_NOT_IN_IFRAME        BidRequest_AdSlot_IFramingDepth = 1
	BidRequest_AdSlot_ONE_IFRAME           BidRequest_AdSlot_IFramingDepth = 2
	BidRequest_AdSlot_MULTIPLE_IFRAME      BidRequest_AdSlot_IFramingDepth = 3
)

// Enum value maps for BidRequest_AdSlot_IFramingDepth.
var (
	BidRequest_AdSlot_IFramingDepth_name = map[int32]string{
		0: "UNKNOWN_IFRAME_DEPTH",
		1: "NOT_IN_IFRAME",
		2: "ONE_IFRAME",
		3: "MULTIPLE_IFRAME",
	}
	BidRequest_AdSlot_IFramingDepth_value = map[string]int32{
		"UNKNOWN_IFRAME_DEPTH": 0,
		"NOT_IN_IFRAME":        1,
		"ONE_IFRAME":           2,
		"MULTIPLE_IFRAME":      3,
	}
)

func (x BidRequest_AdSlot_IFramingDepth) Enum() *BidRequest_AdSlot_IFramingDepth {
	p := new(BidRequest_AdSlot_IFramingDepth)
	*p = x
	return p
}

func (x BidRequest_AdSlot_IFramingDepth) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_AdSlot_IFramingDepth) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[19].Descriptor()
}

func (BidRequest_AdSlot_IFramingDepth) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[19]
}

func (x BidRequest_AdSlot_IFramingDepth) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_AdSlot_IFramingDepth) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_AdSlot_IFramingDepth(num)
	return nil
}

// Deprecated: Use BidRequest_AdSlot_IFramingDepth.Descriptor instead.
func (BidRequest_AdSlot_IFramingDepth) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 2}
}

// NativePlacementType describes placement of native ad slot with respect to
// surrounding context.
type BidRequest_AdSlot_NativePlacementType int32

const (
	BidRequest_AdSlot_PLACEMENT_UNKNOWN BidRequest_AdSlot_NativePlacementType = 0
	// In the feed of content - for example as an item inside the organic
	// feed/grid/listing/carousel.
	BidRequest_AdSlot_PLACEMENT_IN_FEED BidRequest_AdSlot_NativePlacementType = 1
	// In the atomic unit of the content - i.e., in the article page or single
	// image page.
	BidRequest_AdSlot_PLACEMENT_ATOMIC_UNIT BidRequest_AdSlot_NativePlacementType = 2
	// Outside the core content - for example in the ads section on the right
	// rail, as a banner-style placement near the content, etc.
	BidRequest_AdSlot_PLACEMENT_OUTSIDE BidRequest_AdSlot_NativePlacementType = 3
	// Recommendation widget, most commonly presented below the article
	// content.
	BidRequest_AdSlot_PLACEMENT_RECOMMENDATION BidRequest_AdSlot_NativePlacementType = 4
)

// Enum value maps for BidRequest_AdSlot_NativePlacementType.
var (
	BidRequest_AdSlot_NativePlacementType_name = map[int32]string{
		0: "PLACEMENT_UNKNOWN",
		1: "PLACEMENT_IN_FEED",
		2: "PLACEMENT_ATOMIC_UNIT",
		3: "PLACEMENT_OUTSIDE",
		4: "PLACEMENT_RECOMMENDATION",
	}
	BidRequest_AdSlot_NativePlacementType_value = map[string]int32{
		"PLACEMENT_UNKNOWN":        0,
		"PLACEMENT_IN_FEED":        1,
		"PLACEMENT_ATOMIC_UNIT":    2,
		"PLACEMENT_OUTSIDE":        3,
		"PLACEMENT_RECOMMENDATION": 4,
	}
)

func (x BidRequest_AdSlot_NativePlacementType) Enum() *BidRequest_AdSlot_NativePlacementType {
	p := new(BidRequest_AdSlot_NativePlacementType)
	*p = x
	return p
}

func (x BidRequest_AdSlot_NativePlacementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_AdSlot_NativePlacementType) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[20].Descriptor()
}

func (BidRequest_AdSlot_NativePlacementType) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[20]
}

func (x BidRequest_AdSlot_NativePlacementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_AdSlot_NativePlacementType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_AdSlot_NativePlacementType(num)
	return nil
}

// Deprecated: Use BidRequest_AdSlot_NativePlacementType.Descriptor instead.
func (BidRequest_AdSlot_NativePlacementType) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 3}
}

// Whether the ad request has been determined to come directly from the
// publisher.
type BidRequest_AdSlot_MediationStatus int32

const (
	BidRequest_AdSlot_UNKNOWN        BidRequest_AdSlot_MediationStatus = 0
	BidRequest_AdSlot_DIRECT_REQUEST BidRequest_AdSlot_MediationStatus = 1
)

// Enum value maps for BidRequest_AdSlot_MediationStatus.
var (
	BidRequest_AdSlot_MediationStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "DIRECT_REQUEST",
	}
	BidRequest_AdSlot_MediationStatus_value = map[string]int32{
		"UNKNOWN":        0,
		"DIRECT_REQUEST": 1,
	}
)

func (x BidRequest_AdSlot_MediationStatus) Enum() *BidRequest_AdSlot_MediationStatus {
	p := new(BidRequest_AdSlot_MediationStatus)
	*p = x
	return p
}

func (x BidRequest_AdSlot_MediationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_AdSlot_MediationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[21].Descriptor()
}

func (BidRequest_AdSlot_MediationStatus) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[21]
}

func (x BidRequest_AdSlot_MediationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_AdSlot_MediationStatus) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_AdSlot_MediationStatus(num)
	return nil
}

// Deprecated: Use BidRequest_AdSlot_MediationStatus.Descriptor instead.
func (BidRequest_AdSlot_MediationStatus) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 4}
}

// Sources for non-browser inventory.
type BidRequest_AdSlot_NonBrowserSource int32

const (
	BidRequest_AdSlot_UNDECLARED_SOURCE BidRequest_AdSlot_NonBrowserSource = 0
	BidRequest_AdSlot_DESKTOP_APP       BidRequest_AdSlot_NonBrowserSource = 1
)

// Enum value maps for BidRequest_AdSlot_NonBrowserSource.
var (
	BidRequest_AdSlot_NonBrowserSource_name = map[int32]string{
		0: "UNDECLARED_SOURCE",
		1: "DESKTOP_APP",
	}
	BidRequest_AdSlot_NonBrowserSource_value = map[string]int32{
		"UNDECLARED_SOURCE": 0,
		"DESKTOP_APP":       1,
	}
)

func (x BidRequest_AdSlot_NonBrowserSource) Enum() *BidRequest_AdSlot_NonBrowserSource {
	p := new(BidRequest_AdSlot_NonBrowserSource)
	*p = x
	return p
}

func (x BidRequest_AdSlot_NonBrowserSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_AdSlot_NonBrowserSource) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[22].Descriptor()
}

func (BidRequest_AdSlot_NonBrowserSource) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[22]
}

func (x BidRequest_AdSlot_NonBrowserSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_AdSlot_NonBrowserSource) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_AdSlot_NonBrowserSource(num)
	return nil
}

// Deprecated: Use BidRequest_AdSlot_NonBrowserSource.Descriptor instead.
func (BidRequest_AdSlot_NonBrowserSource) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 5}
}

// Defines who controls the environment that made the ad request and will
// render the ad. On platforms where code written by Google will handle
// the ad this field is set to GOOGLE. When this field is PUBLISHER the
// publisher has placed their own code on the device to handle playback of
// the ad. There is no technical difference in how these request are
// handled. You may use this field to differentiate between different
// environments for non-technical reasons. This field is only set for
// requests that allow VAST video ads.
type BidRequest_AdSlot_Renderer int32

const (
	BidRequest_AdSlot_UNKNOWN_RENDERER BidRequest_AdSlot_Renderer = 0
	BidRequest_AdSlot_GOOGLE           BidRequest_AdSlot_Renderer = 1
	BidRequest_AdSlot_PUBLISHER        BidRequest_AdSlot_Renderer = 2
)

// Enum value maps for BidRequest_AdSlot_Renderer.
var (
	BidRequest_AdSlot_Renderer_name = map[int32]string{
		0: "UNKNOWN_RENDERER",
		1: "GOOGLE",
		2: "PUBLISHER",
	}
	BidRequest_AdSlot_Renderer_value = map[string]int32{
		"UNKNOWN_RENDERER": 0,
		"GOOGLE":           1,
		"PUBLISHER":        2,
	}
)

func (x BidRequest_AdSlot_Renderer) Enum() *BidRequest_AdSlot_Renderer {
	p := new(BidRequest_AdSlot_Renderer)
	*p = x
	return p
}

func (x BidRequest_AdSlot_Renderer) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_AdSlot_Renderer) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[23].Descriptor()
}

func (BidRequest_AdSlot_Renderer) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[23]
}

func (x BidRequest_AdSlot_Renderer) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_AdSlot_Renderer) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_AdSlot_Renderer(num)
	return nil
}

// Deprecated: Use BidRequest_AdSlot_Renderer.Descriptor instead.
func (BidRequest_AdSlot_Renderer) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 6}
}

// Whether this request is for an Accelerated Mobile Page (AMP). AMP HTML
// pages load faster, by restricting parts of HTML, CSS and Javascript. For
// more information on how AMP ads render, refer to the AMP ads README:
// https://github.com/ampproject/amphtml/blob/master/ads/README.md
type BidRequest_AdSlot_AmpAdRequestType int32

const (
	// AMP status unknown. Request may or may not be from an AMP page.
	BidRequest_AdSlot_UNKNOWN_AMP BidRequest_AdSlot_AmpAdRequestType = 0
	// Not an AMP page. Could be regular HTML, VAST video, etc.
	BidRequest_AdSlot_NON_AMP_PAGE BidRequest_AdSlot_AmpAdRequestType = 1
	// Late-loading request from an AMP HTML page. Ad will render with a
	// slight delay so it will not negatively impact page render performance.
	BidRequest_AdSlot_AMP_PAGE_LATE_REQUEST BidRequest_AdSlot_AmpAdRequestType = 2
)

// Enum value maps for BidRequest_AdSlot_AmpAdRequestType.
var (
	BidRequest_AdSlot_AmpAdRequestType_name = map[int32]string{
		0: "UNKNOWN_AMP",
		1: "NON_AMP_PAGE",
		2: "AMP_PAGE_LATE_REQUEST",
	}
	BidRequest_AdSlot_AmpAdRequestType_value = map[string]int32{
		"UNKNOWN_AMP":           0,
		"NON_AMP_PAGE":          1,
		"AMP_PAGE_LATE_REQUEST": 2,
	}
)

func (x BidRequest_AdSlot_AmpAdRequestType) Enum() *BidRequest_AdSlot_AmpAdRequestType {
	p := new(BidRequest_AdSlot_AmpAdRequestType)
	*p = x
	return p
}

func (x BidRequest_AdSlot_AmpAdRequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_AdSlot_AmpAdRequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[24].Descriptor()
}

func (BidRequest_AdSlot_AmpAdRequestType) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[24]
}

func (x BidRequest_AdSlot_AmpAdRequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_AdSlot_AmpAdRequestType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_AdSlot_AmpAdRequestType(num)
	return nil
}

// Deprecated: Use BidRequest_AdSlot_AmpAdRequestType.Descriptor instead.
func (BidRequest_AdSlot_AmpAdRequestType) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 7}
}

// Whether this is an AMP page or not.
type BidRequest_AdSlot_AmpPage int32

const (
	// AMP page status unknown.
	BidRequest_AdSlot_UNKNOWN_AMP_PAGE BidRequest_AdSlot_AmpPage = 0
	// This is not an AMP page.
	BidRequest_AdSlot_DIALECT_HTML BidRequest_AdSlot_AmpPage = 1
	// This is an Amp page.
	BidRequest_AdSlot_DIALECT_HTML_AMP BidRequest_AdSlot_AmpPage = 2
)

// Enum value maps for BidRequest_AdSlot_AmpPage.
var (
	BidRequest_AdSlot_AmpPage_name = map[int32]string{
		0: "UNKNOWN_AMP_PAGE",
		1: "DIALECT_HTML",
		2: "DIALECT_HTML_AMP",
	}
	BidRequest_AdSlot_AmpPage_value = map[string]int32{
		"UNKNOWN_AMP_PAGE": 0,
		"DIALECT_HTML":     1,
		"DIALECT_HTML_AMP": 2,
	}
)

func (x BidRequest_AdSlot_AmpPage) Enum() *BidRequest_AdSlot_AmpPage {
	p := new(BidRequest_AdSlot_AmpPage)
	*p = x
	return p
}

func (x BidRequest_AdSlot_AmpPage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_AdSlot_AmpPage) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[25].Descriptor()
}

func (BidRequest_AdSlot_AmpPage) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[25]
}

func (x BidRequest_AdSlot_AmpPage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_AdSlot_AmpPage) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_AdSlot_AmpPage(num)
	return nil
}

// Deprecated: Use BidRequest_AdSlot_AmpPage.Descriptor instead.
func (BidRequest_AdSlot_AmpPage) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 8}
}

// Possible requirement types for AMP ads.
type BidRequest_AdSlot_AmpAdRequirementType int32

const (
	// AMP ad requirements unknown.
	BidRequest_AdSlot_UNKNOWN_AMP_AD_REQUIREMENT_TYPE BidRequest_AdSlot_AmpAdRequirementType = 0
	// AMP ads are not allowed.
	BidRequest_AdSlot_AMP_AD_NOT_ALLOWED BidRequest_AdSlot_AmpAdRequirementType = 1
	// Either AMP ads or non-AMP ads are allowed;
	// AMP ads are not early rendered.
	BidRequest_AdSlot_AMP_AD_ALLOWED_AND_NOT_EARLY_RENDERED BidRequest_AdSlot_AmpAdRequirementType = 2
	// Either AMP ads or non-AMP ads are allowed;
	// AMP ads are early rendered.
	BidRequest_AdSlot_AMP_AD_ALLOWED_AND_EARLY_RENDERED BidRequest_AdSlot_AmpAdRequirementType = 3
	// AMP ads are required.
	// Ads that are non-AMP may be rejected by the publisher.
	BidRequest_AdSlot_AMP_AD_REQUIRED BidRequest_AdSlot_AmpAdRequirementType = 4
)

// Enum value maps for BidRequest_AdSlot_AmpAdRequirementType.
var (
	BidRequest_AdSlot_AmpAdRequirementType_name = map[int32]string{
		0: "UNKNOWN_AMP_AD_REQUIREMENT_TYPE",
		1: "AMP_AD_NOT_ALLOWED",
		2: "AMP_AD_ALLOWED_AND_NOT_EARLY_RENDERED",
		3: "AMP_AD_ALLOWED_AND_EARLY_RENDERED",
		4: "AMP_AD_REQUIRED",
	}
	BidRequest_AdSlot_AmpAdRequirementType_value = map[string]int32{
		"UNKNOWN_AMP_AD_REQUIREMENT_TYPE":       0,
		"AMP_AD_NOT_ALLOWED":                    1,
		"AMP_AD_ALLOWED_AND_NOT_EARLY_RENDERED": 2,
		"AMP_AD_ALLOWED_AND_EARLY_RENDERED":     3,
		"AMP_AD_REQUIRED":                       4,
	}
)

func (x BidRequest_AdSlot_AmpAdRequirementType) Enum() *BidRequest_AdSlot_AmpAdRequirementType {
	p := new(BidRequest_AdSlot_AmpAdRequirementType)
	*p = x
	return p
}

func (x BidRequest_AdSlot_AmpAdRequirementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_AdSlot_AmpAdRequirementType) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[26].Descriptor()
}

func (BidRequest_AdSlot_AmpAdRequirementType) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[26]
}

func (x BidRequest_AdSlot_AmpAdRequirementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_AdSlot_AmpAdRequirementType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_AdSlot_AmpAdRequirementType(num)
	return nil
}

// Deprecated: Use BidRequest_AdSlot_AmpAdRequirementType.Descriptor instead.
func (BidRequest_AdSlot_AmpAdRequirementType) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 9}
}

// Possible ad types that are allowed in the bid response. allowed_ad_types
// always contains one or more values. Interstitial slots may also support
// banner ads. An ad slot with ALLOWED_AD_TYPE_NATIVE may or may not support
// native video, regardless of whether ALLOWED_AD_TYPE_VIDEO is set.
// Likewise, an ad slot without ALLOWED_AD_TYPE_NATIVE does not support
// native video, regardless of whether ALLOWED_AD_TYPE_VIDEO is set.
type BidRequest_AdSlot_AllowedAdType int32

const (
	BidRequest_AdSlot_UNKNOWN_ALLOWED_AD_TYPE BidRequest_AdSlot_AllowedAdType = -1
	BidRequest_AdSlot_ALLOWED_AD_TYPE_BANNER  BidRequest_AdSlot_AllowedAdType = 0
	BidRequest_AdSlot_ALLOWED_AD_TYPE_NATIVE  BidRequest_AdSlot_AllowedAdType = 1
	BidRequest_AdSlot_ALLOWED_AD_TYPE_VIDEO   BidRequest_AdSlot_AllowedAdType = 2
	BidRequest_AdSlot_ALLOWED_AD_TYPE_AUDIO   BidRequest_AdSlot_AllowedAdType = 3
)

// Enum value maps for BidRequest_AdSlot_AllowedAdType.
var (
	BidRequest_AdSlot_AllowedAdType_name = map[int32]string{
		-1: "UNKNOWN_ALLOWED_AD_TYPE",
		0:  "ALLOWED_AD_TYPE_BANNER",
		1:  "ALLOWED_AD_TYPE_NATIVE",
		2:  "ALLOWED_AD_TYPE_VIDEO",
		3:  "ALLOWED_AD_TYPE_AUDIO",
	}
	BidRequest_AdSlot_AllowedAdType_value = map[string]int32{
		"UNKNOWN_ALLOWED_AD_TYPE": -1,
		"ALLOWED_AD_TYPE_BANNER":  0,
		"ALLOWED_AD_TYPE_NATIVE":  1,
		"ALLOWED_AD_TYPE_VIDEO":   2,
		"ALLOWED_AD_TYPE_AUDIO":   3,
	}
)

func (x BidRequest_AdSlot_AllowedAdType) Enum() *BidRequest_AdSlot_AllowedAdType {
	p := new(BidRequest_AdSlot_AllowedAdType)
	*p = x
	return p
}

func (x BidRequest_AdSlot_AllowedAdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_AdSlot_AllowedAdType) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[27].Descriptor()
}

func (BidRequest_AdSlot_AllowedAdType) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[27]
}

func (x BidRequest_AdSlot_AllowedAdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_AdSlot_AllowedAdType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_AdSlot_AllowedAdType(num)
	return nil
}

// Deprecated: Use BidRequest_AdSlot_AllowedAdType.Descriptor instead.
func (BidRequest_AdSlot_AllowedAdType) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 10}
}

// Possible ad rendering API frameworks that can be supported.
// If an API is not explicitly listed, it is assumed not to be supported.
type BidRequest_AdSlot_APIFramework int32

const (
	BidRequest_AdSlot_UNKNOWN_FRAMEWORK BidRequest_AdSlot_APIFramework = 0
	// Mobile Rich Media Ad Interface Definitions Version 1.0. See
	// https://www.iab.com/guidelines/mraid/.
	BidRequest_AdSlot_MRAID_1 BidRequest_AdSlot_APIFramework = 3
	// Mobile Rich Media Ad Interface Definitions Version 2.0. See
	// https://www.iab.com/guidelines/mraid/.
	BidRequest_AdSlot_MRAID_2 BidRequest_AdSlot_APIFramework = 5
	// Mobile Rich Media Ad Interface Definitions Version 3.0. See
	// https://www.iab.com/guidelines/mraid/.
	BidRequest_AdSlot_MRAID_3 BidRequest_AdSlot_APIFramework = 6
	// Open Measurement Interface Definition Version 1.0. See
	// https://iabtechlab.com/standards/open-measurement-sdk/.
	BidRequest_AdSlot_OMID_1 BidRequest_AdSlot_APIFramework = 7
)

// Enum value maps for BidRequest_AdSlot_APIFramework.
var (
	BidRequest_AdSlot_APIFramework_name = map[int32]string{
		0: "UNKNOWN_FRAMEWORK",
		3: "MRAID_1",
		5: "MRAID_2",
		6: "MRAID_3",
		7: "OMID_1",
	}
	BidRequest_AdSlot_APIFramework_value = map[string]int32{
		"UNKNOWN_FRAMEWORK": 0,
		"MRAID_1":           3,
		"MRAID_2":           5,
		"MRAID_3":           6,
		"OMID_1":            7,
	}
)

func (x BidRequest_AdSlot_APIFramework) Enum() *BidRequest_AdSlot_APIFramework {
	p := new(BidRequest_AdSlot_APIFramework)
	*p = x
	return p
}

func (x BidRequest_AdSlot_APIFramework) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_AdSlot_APIFramework) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[28].Descriptor()
}

func (BidRequest_AdSlot_APIFramework) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[28]
}

func (x BidRequest_AdSlot_APIFramework) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_AdSlot_APIFramework) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_AdSlot_APIFramework(num)
	return nil
}

// Deprecated: Use BidRequest_AdSlot_APIFramework.Descriptor instead.
func (BidRequest_AdSlot_APIFramework) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 11}
}

// Describes the environment where the ad auction is run:  either all
// on the server-side, server-side with sandboxed interest group bidding
// simulation, or with the contextual auction on the server-side and the
// interest group bidding and the final auction on the device.
type BidRequest_AdSlot_AuctionEnvironment int32

const (
	// The auction determining the winning ad is held server-side.
	BidRequest_AdSlot_SERVER_SIDE_AUCTION BidRequest_AdSlot_AuctionEnvironment = 0
	// This value is currently not in use and will be provided only when
	// browsers start supporting on-device auctions.
	// The contextual auction that determines a winning contextual bid is held
	// server-side, and bidding functions are run on the device to determine
	// interest group bids. Both the winning contextual bid and interest
	// group bids are entered into a final auction held on the device to
	// select the winning ad. For more information regarding the TURTLEDOVE
	// on device bidding and auction, see:
	// https://github.com/WICG/turtledove and
	// https://github.com/WICG/turtledove/blob/main/FLEDGE.md
	BidRequest_AdSlot_ON_DEVICE_INTEREST_GROUP_AUCTION BidRequest_AdSlot_AuctionEnvironment = 1
	// An interest group auction is simulated in a sandboxed environment, and
	// its results are entered into the conventional server-side auction to
	// determine the winning ad. Experimental feature; may be subject to
	// change. For more information regarding about the TURTLEDOVE simulation
	// for RTB, see:
	// https://github.com/google/ads-privacy/tree/master/experiments/turtledove-simulation,
	// https://developers.google.com/authorized-buyers/rtb/turtledove,
	// and https://developers.google.com/authorized-buyers/rtb/fledge
	BidRequest_AdSlot_SERVER_SIDE_AUCTION_WITH_INTEREST_GROUP_SIMULATION BidRequest_AdSlot_AuctionEnvironment = 2
)

// Enum value maps for BidRequest_AdSlot_AuctionEnvironment.
var (
	BidRequest_AdSlot_AuctionEnvironment_name = map[int32]string{
		0: "SERVER_SIDE_AUCTION",
		1: "ON_DEVICE_INTEREST_GROUP_AUCTION",
		2: "SERVER_SIDE_AUCTION_WITH_INTEREST_GROUP_SIMULATION",
	}
	BidRequest_AdSlot_AuctionEnvironment_value = map[string]int32{
		"SERVER_SIDE_AUCTION":                                0,
		"ON_DEVICE_INTEREST_GROUP_AUCTION":                   1,
		"SERVER_SIDE_AUCTION_WITH_INTEREST_GROUP_SIMULATION": 2,
	}
)

func (x BidRequest_AdSlot_AuctionEnvironment) Enum() *BidRequest_AdSlot_AuctionEnvironment {
	p := new(BidRequest_AdSlot_AuctionEnvironment)
	*p = x
	return p
}

func (x BidRequest_AdSlot_AuctionEnvironment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_AdSlot_AuctionEnvironment) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[29].Descriptor()
}

func (BidRequest_AdSlot_AuctionEnvironment) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[29]
}

func (x BidRequest_AdSlot_AuctionEnvironment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_AdSlot_AuctionEnvironment) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_AdSlot_AuctionEnvironment(num)
	return nil
}

// Deprecated: Use BidRequest_AdSlot_AuctionEnvironment.Descriptor instead.
func (BidRequest_AdSlot_AuctionEnvironment) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 12}
}

// The type of the deal. Note that Authorized Buyers policy overrides
// apply to all Programmatic Guaranteed and Preferred Deal bids, and do
// not apply to bids for other deal types.
type BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType int32

const (
	BidRequest_AdSlot_MatchingAdData_DirectDeal_UNKNOWN_DEAL_TYPE BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType = 0
	// Bids are fixed-price and evaluated before the Open Auction. Bidders
	// are not required to bid with Preferred Deals when they are present
	// on the bid request. See
	// https://support.google.com/authorizedbuyers/answer/2604595 for more
	// information.
	BidRequest_AdSlot_MatchingAdData_DirectDeal_PREFERRED_DEAL BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType = 1
	// Bids participate in a Private Auction against a select list of
	// buyers with specific floors. See
	// https://support.google.com/authorizedbuyers/answer/2839853 for more
	// information.
	BidRequest_AdSlot_MatchingAdData_DirectDeal_PRIVATE_AUCTION BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType = 2
	// Bids are fixed-price and evaluated before the Open Auction. Bidders
	// are expected to bid with Programmatic Guaranteed deals whenever
	// they are present on a bid request in order to ensure that the
	// number of impressions agreed upon for a given deal are served. See
	// https://support.google.com/authorizedbuyers/answer/7174589 for more
	// information.
	BidRequest_AdSlot_MatchingAdData_DirectDeal_PROGRAMMATIC_GUARANTEED BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType = 3
	// The deal ID is an identifier for a collection of Open Auction
	// inventory matching a given set of targeting criteria. See
	// https://support.google.com/authorizedbuyers/answer/7516884 for more
	// information.
	BidRequest_AdSlot_MatchingAdData_DirectDeal_AUCTION_PACKAGE BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType = 4
)

// Enum value maps for BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType.
var (
	BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_name = map[int32]string{
		0: "UNKNOWN_DEAL_TYPE",
		1: "PREFERRED_DEAL",
		2: "PRIVATE_AUCTION",
		3: "PROGRAMMATIC_GUARANTEED",
		4: "AUCTION_PACKAGE",
	}
	BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType_value = map[string]int32{
		"UNKNOWN_DEAL_TYPE":       0,
		"PREFERRED_DEAL":          1,
		"PRIVATE_AUCTION":         2,
		"PROGRAMMATIC_GUARANTEED": 3,
		"AUCTION_PACKAGE":         4,
	}
)

func (x BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType) Enum() *BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType {
	p := new(BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType)
	*p = x
	return p
}

func (x BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[30].Descriptor()
}

func (BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[30]
}

func (x BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType(num)
	return nil
}

// Deprecated: Use BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType.Descriptor instead.
func (BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 3, 0, 0}
}

// Experimental field; subject to change.
// An enum declaring the host of the creative, which will only be
// populated for Programmatic Guaranteed deals.
// Currently, this field should only ever be set to
// CREATIVE_SOURCE_ADVERTISER.
type BidRequest_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType int32

const (
	BidRequest_AdSlot_MatchingAdData_DirectDeal_CREATIVE_SOURCE_UNKNOWN BidRequest_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType = 0
	// The creative is hosted by the advertiser, which means the bidder
	// is required to provide a creative in the bid response.
	BidRequest_AdSlot_MatchingAdData_DirectDeal_CREATIVE_SOURCE_ADVERTISER BidRequest_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType = 1
	// The creative is hosted by the publisher, which means the bidder
	// does not need to include a creative in the bid response.
	// For more information on publisher-hosted creatives, see
	// https://support.google.com/admanager/answer/9243220.
	// This feature isn't currently supported for RTB bidders.
	BidRequest_AdSlot_MatchingAdData_DirectDeal_CREATIVE_SOURCE_PUBLISHER BidRequest_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType = 2
)

// Enum value maps for BidRequest_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType.
var (
	BidRequest_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType_name = map[int32]string{
		0: "CREATIVE_SOURCE_UNKNOWN",
		1: "CREATIVE_SOURCE_ADVERTISER",
		2: "CREATIVE_SOURCE_PUBLISHER",
	}
	BidRequest_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType_value = map[string]int32{
		"CREATIVE_SOURCE_UNKNOWN":    0,
		"CREATIVE_SOURCE_ADVERTISER": 1,
		"CREATIVE_SOURCE_PUBLISHER":  2,
	}
)

func (x BidRequest_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType) Enum() *BidRequest_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType {
	p := new(BidRequest_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType)
	*p = x
	return p
}

func (x BidRequest_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[31].Descriptor()
}

func (BidRequest_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[31]
}

func (x BidRequest_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType(num)
	return nil
}

// Deprecated: Use BidRequest_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType.Descriptor instead.
func (BidRequest_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 3, 0, 1}
}

// Creative policy enforcement level that applies to this request.
// Creatives that don't adhere to the specified policy will be filtered
// before the auction. The status of the creatives with their respective
// policies can be retrieved via Creative API.
// https://developers.google.com/authorized-buyers/apis/guides/rtb-api/creatives
// Bids on deals may override the policy enforcement applicable to the
// request.
type BidRequest_AdSlot_CreativeEnforcementSettings_PolicyEnforcement int32

const (
	BidRequest_AdSlot_CreativeEnforcementSettings_POLICY_ENFORCEMENT_UNKNOWN BidRequest_AdSlot_CreativeEnforcementSettings_PolicyEnforcement = 0
	// Baseline policy for all ads serving through any of Google's ads
	// platform products. Learn more at:
	// https://support.google.com/platformspolicy/answer/3013851.
	BidRequest_AdSlot_CreativeEnforcementSettings_POLICY_ENFORCEMENT_PLATFORM_POLICY BidRequest_AdSlot_CreativeEnforcementSettings_PolicyEnforcement = 1
	// Policy for ads serving through Google's ad network. This includes the
	// baseline policy for all ads serving through any of Google's ads
	// platform products. Learn more at:
	// https://support.google.com/authorizedbuyers/answer/1325008.
	BidRequest_AdSlot_CreativeEnforcementSettings_POLICY_ENFORCEMENT_NETWORK_AND_PLATFORM_POLICY BidRequest_AdSlot_CreativeEnforcementSettings_PolicyEnforcement = 2
)

// Enum value maps for BidRequest_AdSlot_CreativeEnforcementSettings_PolicyEnforcement.
var (
	BidRequest_AdSlot_CreativeEnforcementSettings_PolicyEnforcement_name = map[int32]string{
		0: "POLICY_ENFORCEMENT_UNKNOWN",
		1: "POLICY_ENFORCEMENT_PLATFORM_POLICY",
		2: "POLICY_ENFORCEMENT_NETWORK_AND_PLATFORM_POLICY",
	}
	BidRequest_AdSlot_CreativeEnforcementSettings_PolicyEnforcement_value = map[string]int32{
		"POLICY_ENFORCEMENT_UNKNOWN":                     0,
		"POLICY_ENFORCEMENT_PLATFORM_POLICY":             1,
		"POLICY_ENFORCEMENT_NETWORK_AND_PLATFORM_POLICY": 2,
	}
)

func (x BidRequest_AdSlot_CreativeEnforcementSettings_PolicyEnforcement) Enum() *BidRequest_AdSlot_CreativeEnforcementSettings_PolicyEnforcement {
	p := new(BidRequest_AdSlot_CreativeEnforcementSettings_PolicyEnforcement)
	*p = x
	return p
}

func (x BidRequest_AdSlot_CreativeEnforcementSettings_PolicyEnforcement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_AdSlot_CreativeEnforcementSettings_PolicyEnforcement) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[32].Descriptor()
}

func (BidRequest_AdSlot_CreativeEnforcementSettings_PolicyEnforcement) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[32]
}

func (x BidRequest_AdSlot_CreativeEnforcementSettings_PolicyEnforcement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_AdSlot_CreativeEnforcementSettings_PolicyEnforcement) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_AdSlot_CreativeEnforcementSettings_PolicyEnforcement(num)
	return nil
}

// Deprecated: Use BidRequest_AdSlot_CreativeEnforcementSettings_PolicyEnforcement.Descriptor instead.
func (BidRequest_AdSlot_CreativeEnforcementSettings_PolicyEnforcement) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 6, 0}
}

// Creative publisher blocks enforcement level that applies to this
// request. Publisher blocks allow publishers to control which creatives
// can be shown on their properties.
// Deals may also override publisher blocks. Please refer to adslot.
// matching_ad_data.direct_deal.publisher_blocks_overridden field.
type BidRequest_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement int32

const (
	BidRequest_AdSlot_CreativeEnforcementSettings_PUBLISHER_BLOCKS_ENFORCEMENT_UNKNOWN BidRequest_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement = 0
	// The publisher's blocking controls are enforced on creatives
	// submitted. Publisher blocks enforcement settings are provided in the
	// following fields:
	// - publisher_settings_list_id
	// - excluded_sensitive_category
	// - allowed_restricted_category
	// - excluded_product_category
	// - allowed_vendor_type
	// - excluded_attribute
	BidRequest_AdSlot_CreativeEnforcementSettings_PUBLISHER_BLOCKS_ENFORCEMENT_APPLIES BidRequest_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement = 1
	// The publisher's blocking controls are not enforced on creatives
	// submitted.
	BidRequest_AdSlot_CreativeEnforcementSettings_PUBLISHER_BLOCKS_ENFORCEMENT_OVERRIDDEN BidRequest_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement = 2
)

// Enum value maps for BidRequest_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement.
var (
	BidRequest_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement_name = map[int32]string{
		0: "PUBLISHER_BLOCKS_ENFORCEMENT_UNKNOWN",
		1: "PUBLISHER_BLOCKS_ENFORCEMENT_APPLIES",
		2: "PUBLISHER_BLOCKS_ENFORCEMENT_OVERRIDDEN",
	}
	BidRequest_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement_value = map[string]int32{
		"PUBLISHER_BLOCKS_ENFORCEMENT_UNKNOWN":    0,
		"PUBLISHER_BLOCKS_ENFORCEMENT_APPLIES":    1,
		"PUBLISHER_BLOCKS_ENFORCEMENT_OVERRIDDEN": 2,
	}
)

func (x BidRequest_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement) Enum() *BidRequest_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement {
	p := new(BidRequest_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement)
	*p = x
	return p
}

func (x BidRequest_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[33].Descriptor()
}

func (BidRequest_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[33]
}

func (x BidRequest_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement(num)
	return nil
}

// Deprecated: Use BidRequest_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement.Descriptor instead.
func (BidRequest_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 6, 1}
}

// Defines the bits used in required_fields and recommended_fields. There
// is one bit for each of the fields in BidResponse.Ad.NativeAd
type BidRequest_AdSlot_NativeAdTemplate_Fields int32

const (
	BidRequest_AdSlot_NativeAdTemplate_NO_FIELDS        BidRequest_AdSlot_NativeAdTemplate_Fields = 0
	BidRequest_AdSlot_NativeAdTemplate_HEADLINE         BidRequest_AdSlot_NativeAdTemplate_Fields = 1
	BidRequest_AdSlot_NativeAdTemplate_BODY             BidRequest_AdSlot_NativeAdTemplate_Fields = 2
	BidRequest_AdSlot_NativeAdTemplate_CALL_TO_ACTION   BidRequest_AdSlot_NativeAdTemplate_Fields = 4
	BidRequest_AdSlot_NativeAdTemplate_ADVERTISER       BidRequest_AdSlot_NativeAdTemplate_Fields = 8
	BidRequest_AdSlot_NativeAdTemplate_IMAGE            BidRequest_AdSlot_NativeAdTemplate_Fields = 16
	BidRequest_AdSlot_NativeAdTemplate_LOGO             BidRequest_AdSlot_NativeAdTemplate_Fields = 32
	BidRequest_AdSlot_NativeAdTemplate_APP_ICON         BidRequest_AdSlot_NativeAdTemplate_Fields = 64
	BidRequest_AdSlot_NativeAdTemplate_STAR_RATING      BidRequest_AdSlot_NativeAdTemplate_Fields = 128
	BidRequest_AdSlot_NativeAdTemplate_PRICE            BidRequest_AdSlot_NativeAdTemplate_Fields = 256
	BidRequest_AdSlot_NativeAdTemplate_DEPRECATED_STORE BidRequest_AdSlot_NativeAdTemplate_Fields = 512
	BidRequest_AdSlot_NativeAdTemplate_VIDEO            BidRequest_AdSlot_NativeAdTemplate_Fields = 1024
)

// Enum value maps for BidRequest_AdSlot_NativeAdTemplate_Fields.
var (
	BidRequest_AdSlot_NativeAdTemplate_Fields_name = map[int32]string{
		0:    "NO_FIELDS",
		1:    "HEADLINE",
		2:    "BODY",
		4:    "CALL_TO_ACTION",
		8:    "ADVERTISER",
		16:   "IMAGE",
		32:   "LOGO",
		64:   "APP_ICON",
		128:  "STAR_RATING",
		256:  "PRICE",
		512:  "DEPRECATED_STORE",
		1024: "VIDEO",
	}
	BidRequest_AdSlot_NativeAdTemplate_Fields_value = map[string]int32{
		"NO_FIELDS":        0,
		"HEADLINE":         1,
		"BODY":             2,
		"CALL_TO_ACTION":   4,
		"ADVERTISER":       8,
		"IMAGE":            16,
		"LOGO":             32,
		"APP_ICON":         64,
		"STAR_RATING":      128,
		"PRICE":            256,
		"DEPRECATED_STORE": 512,
		"VIDEO":            1024,
	}
)

func (x BidRequest_AdSlot_NativeAdTemplate_Fields) Enum() *BidRequest_AdSlot_NativeAdTemplate_Fields {
	p := new(BidRequest_AdSlot_NativeAdTemplate_Fields)
	*p = x
	return p
}

func (x BidRequest_AdSlot_NativeAdTemplate_Fields) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_AdSlot_NativeAdTemplate_Fields) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[34].Descriptor()
}

func (BidRequest_AdSlot_NativeAdTemplate_Fields) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[34]
}

func (x BidRequest_AdSlot_NativeAdTemplate_Fields) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_AdSlot_NativeAdTemplate_Fields) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_AdSlot_NativeAdTemplate_Fields(num)
	return nil
}

// Deprecated: Use BidRequest_AdSlot_NativeAdTemplate_Fields.Descriptor instead.
func (BidRequest_AdSlot_NativeAdTemplate_Fields) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 7, 0}
}

// Type of style layout for each native ad template.
type BidRequest_AdSlot_NativeAdTemplate_LayoutType int32

const (
	BidRequest_AdSlot_NativeAdTemplate_PIXEL BidRequest_AdSlot_NativeAdTemplate_LayoutType = 0
	BidRequest_AdSlot_NativeAdTemplate_FLUID BidRequest_AdSlot_NativeAdTemplate_LayoutType = 1
)

// Enum value maps for BidRequest_AdSlot_NativeAdTemplate_LayoutType.
var (
	BidRequest_AdSlot_NativeAdTemplate_LayoutType_name = map[int32]string{
		0: "PIXEL",
		1: "FLUID",
	}
	BidRequest_AdSlot_NativeAdTemplate_LayoutType_value = map[string]int32{
		"PIXEL": 0,
		"FLUID": 1,
	}
)

func (x BidRequest_AdSlot_NativeAdTemplate_LayoutType) Enum() *BidRequest_AdSlot_NativeAdTemplate_LayoutType {
	p := new(BidRequest_AdSlot_NativeAdTemplate_LayoutType)
	*p = x
	return p
}

func (x BidRequest_AdSlot_NativeAdTemplate_LayoutType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_AdSlot_NativeAdTemplate_LayoutType) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[35].Descriptor()
}

func (BidRequest_AdSlot_NativeAdTemplate_LayoutType) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[35]
}

func (x BidRequest_AdSlot_NativeAdTemplate_LayoutType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_AdSlot_NativeAdTemplate_LayoutType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_AdSlot_NativeAdTemplate_LayoutType(num)
	return nil
}

// Deprecated: Use BidRequest_AdSlot_NativeAdTemplate_LayoutType.Descriptor instead.
func (BidRequest_AdSlot_NativeAdTemplate_LayoutType) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 7, 1}
}

type BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType int32

const (
	BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_UNKNOWN_AUTO_REFRESH_TYPE BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType = 0
	BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_USER_ACTION               BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType = 1 // Refresh triggered by user-initiated action such
	// as scrolling.
	BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_EVENT BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType = 2 // Event-driven content change. For example, ads refresh
	// when the football game score changes on the page.
	BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_TIME BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType = 3 // Time-based refresh. Ads refresh on a predefined time
)

// Enum value maps for BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType.
var (
	BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_name = map[int32]string{
		0: "UNKNOWN_AUTO_REFRESH_TYPE",
		1: "USER_ACTION",
		2: "EVENT",
		3: "TIME",
	}
	BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType_value = map[string]int32{
		"UNKNOWN_AUTO_REFRESH_TYPE": 0,
		"USER_ACTION":               1,
		"EVENT":                     2,
		"TIME":                      3,
	}
)

func (x BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType) Enum() *BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType {
	p := new(BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType)
	*p = x
	return p
}

func (x BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[36].Descriptor()
}

func (BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[36]
}

func (x BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType(num)
	return nil
}

// Deprecated: Use BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType.Descriptor instead.
func (BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 8, 0, 0}
}

// Specifies the allowable sticky settings values.
type BidRequest_AdSlot_StickySettings_Stickiness int32

const (
	BidRequest_AdSlot_StickySettings_UNKNOWN_STICKINESS BidRequest_AdSlot_StickySettings_Stickiness = 0
	BidRequest_AdSlot_StickySettings_IS_STICKY          BidRequest_AdSlot_StickySettings_Stickiness = 1
)

// Enum value maps for BidRequest_AdSlot_StickySettings_Stickiness.
var (
	BidRequest_AdSlot_StickySettings_Stickiness_name = map[int32]string{
		0: "UNKNOWN_STICKINESS",
		1: "IS_STICKY",
	}
	BidRequest_AdSlot_StickySettings_Stickiness_value = map[string]int32{
		"UNKNOWN_STICKINESS": 0,
		"IS_STICKY":          1,
	}
)

func (x BidRequest_AdSlot_StickySettings_Stickiness) Enum() *BidRequest_AdSlot_StickySettings_Stickiness {
	p := new(BidRequest_AdSlot_StickySettings_Stickiness)
	*p = x
	return p
}

func (x BidRequest_AdSlot_StickySettings_Stickiness) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidRequest_AdSlot_StickySettings_Stickiness) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[37].Descriptor()
}

func (BidRequest_AdSlot_StickySettings_Stickiness) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[37]
}

func (x BidRequest_AdSlot_StickySettings_Stickiness) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidRequest_AdSlot_StickySettings_Stickiness) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidRequest_AdSlot_StickySettings_Stickiness(num)
	return nil
}

// Deprecated: Use BidRequest_AdSlot_StickySettings_Stickiness.Descriptor instead.
func (BidRequest_AdSlot_StickySettings_Stickiness) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 9, 0}
}

// When exchange_deal_id is set, the type of deal. This is reported to
// publishers and affects how the deal is treated in the auction.
type BidResponse_Ad_AdSlot_ExchangeDealType int32

const (
	BidResponse_Ad_AdSlot_OPEN_AUCTION             BidResponse_Ad_AdSlot_ExchangeDealType = 0
	BidResponse_Ad_AdSlot_PRIVATE_AUCTION          BidResponse_Ad_AdSlot_ExchangeDealType = 1
	BidResponse_Ad_AdSlot_PREFERRED_DEAL           BidResponse_Ad_AdSlot_ExchangeDealType = 2
	BidResponse_Ad_AdSlot_EXCHANGE_AUCTION_PACKAGE BidResponse_Ad_AdSlot_ExchangeDealType = 3
)

// Enum value maps for BidResponse_Ad_AdSlot_ExchangeDealType.
var (
	BidResponse_Ad_AdSlot_ExchangeDealType_name = map[int32]string{
		0: "OPEN_AUCTION",
		1: "PRIVATE_AUCTION",
		2: "PREFERRED_DEAL",
		3: "EXCHANGE_AUCTION_PACKAGE",
	}
	BidResponse_Ad_AdSlot_ExchangeDealType_value = map[string]int32{
		"OPEN_AUCTION":             0,
		"PRIVATE_AUCTION":          1,
		"PREFERRED_DEAL":           2,
		"EXCHANGE_AUCTION_PACKAGE": 3,
	}
)

func (x BidResponse_Ad_AdSlot_ExchangeDealType) Enum() *BidResponse_Ad_AdSlot_ExchangeDealType {
	p := new(BidResponse_Ad_AdSlot_ExchangeDealType)
	*p = x
	return p
}

func (x BidResponse_Ad_AdSlot_ExchangeDealType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidResponse_Ad_AdSlot_ExchangeDealType) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[38].Descriptor()
}

func (BidResponse_Ad_AdSlot_ExchangeDealType) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[38]
}

func (x BidResponse_Ad_AdSlot_ExchangeDealType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidResponse_Ad_AdSlot_ExchangeDealType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidResponse_Ad_AdSlot_ExchangeDealType(num)
	return nil
}

// Deprecated: Use BidResponse_Ad_AdSlot_ExchangeDealType.Descriptor instead.
func (BidResponse_Ad_AdSlot_ExchangeDealType) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{1, 0, 1, 0}
}

// The time units for which frequency caps can be enforced.
type BidResponse_Ad_AdSlot_FrequencyCap_TimeUnit int32

const (
	BidResponse_Ad_AdSlot_FrequencyCap_UNKNOWN_TIME_UNIT BidResponse_Ad_AdSlot_FrequencyCap_TimeUnit = 0
	BidResponse_Ad_AdSlot_FrequencyCap_MINUTE            BidResponse_Ad_AdSlot_FrequencyCap_TimeUnit = 1
	BidResponse_Ad_AdSlot_FrequencyCap_DAY               BidResponse_Ad_AdSlot_FrequencyCap_TimeUnit = 2
	BidResponse_Ad_AdSlot_FrequencyCap_WEEK              BidResponse_Ad_AdSlot_FrequencyCap_TimeUnit = 3
	BidResponse_Ad_AdSlot_FrequencyCap_MONTH             BidResponse_Ad_AdSlot_FrequencyCap_TimeUnit = 4
	// When INDEFINITE is used, time_range will be ignored. INDEFINITE
	// means the frequency cap will be applied for a long period of time,
	// (longer than a month) but not necessarily forever.
	BidResponse_Ad_AdSlot_FrequencyCap_INDEFINITE BidResponse_Ad_AdSlot_FrequencyCap_TimeUnit = 5
)

// Enum value maps for BidResponse_Ad_AdSlot_FrequencyCap_TimeUnit.
var (
	BidResponse_Ad_AdSlot_FrequencyCap_TimeUnit_name = map[int32]string{
		0: "UNKNOWN_TIME_UNIT",
		1: "MINUTE",
		2: "DAY",
		3: "WEEK",
		4: "MONTH",
		5: "INDEFINITE",
	}
	BidResponse_Ad_AdSlot_FrequencyCap_TimeUnit_value = map[string]int32{
		"UNKNOWN_TIME_UNIT": 0,
		"MINUTE":            1,
		"DAY":               2,
		"WEEK":              3,
		"MONTH":             4,
		"INDEFINITE":        5,
	}
)

func (x BidResponse_Ad_AdSlot_FrequencyCap_TimeUnit) Enum() *BidResponse_Ad_AdSlot_FrequencyCap_TimeUnit {
	p := new(BidResponse_Ad_AdSlot_FrequencyCap_TimeUnit)
	*p = x
	return p
}

func (x BidResponse_Ad_AdSlot_FrequencyCap_TimeUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidResponse_Ad_AdSlot_FrequencyCap_TimeUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[39].Descriptor()
}

func (BidResponse_Ad_AdSlot_FrequencyCap_TimeUnit) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[39]
}

func (x BidResponse_Ad_AdSlot_FrequencyCap_TimeUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidResponse_Ad_AdSlot_FrequencyCap_TimeUnit) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidResponse_Ad_AdSlot_FrequencyCap_TimeUnit(num)
	return nil
}

// Deprecated: Use BidResponse_Ad_AdSlot_FrequencyCap_TimeUnit.Descriptor instead.
func (BidResponse_Ad_AdSlot_FrequencyCap_TimeUnit) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{1, 0, 1, 0, 0}
}

// Additional context provided for rendering.
type BidResponse_Ad_ImpressionTrackingResource_Context int32

const (
	BidResponse_Ad_ImpressionTrackingResource_UNKNOWN_CONTEXT BidResponse_Ad_ImpressionTrackingResource_Context = 0
	// Currently not supported.
	BidResponse_Ad_ImpressionTrackingResource_OMID BidResponse_Ad_ImpressionTrackingResource_Context = 1
)

// Enum value maps for BidResponse_Ad_ImpressionTrackingResource_Context.
var (
	BidResponse_Ad_ImpressionTrackingResource_Context_name = map[int32]string{
		0: "UNKNOWN_CONTEXT",
		1: "OMID",
	}
	BidResponse_Ad_ImpressionTrackingResource_Context_value = map[string]int32{
		"UNKNOWN_CONTEXT": 0,
		"OMID":            1,
	}
)

func (x BidResponse_Ad_ImpressionTrackingResource_Context) Enum() *BidResponse_Ad_ImpressionTrackingResource_Context {
	p := new(BidResponse_Ad_ImpressionTrackingResource_Context)
	*p = x
	return p
}

func (x BidResponse_Ad_ImpressionTrackingResource_Context) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BidResponse_Ad_ImpressionTrackingResource_Context) Descriptor() protoreflect.EnumDescriptor {
	return file_googleDspManager_models_proto_r_proto_enumTypes[40].Descriptor()
}

func (BidResponse_Ad_ImpressionTrackingResource_Context) Type() protoreflect.EnumType {
	return &file_googleDspManager_models_proto_r_proto_enumTypes[40]
}

func (x BidResponse_Ad_ImpressionTrackingResource_Context) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BidResponse_Ad_ImpressionTrackingResource_Context) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BidResponse_Ad_ImpressionTrackingResource_Context(num)
	return nil
}

// Deprecated: Use BidResponse_Ad_ImpressionTrackingResource_Context.Descriptor instead.
func (BidResponse_Ad_ImpressionTrackingResource_Context) EnumDescriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{1, 0, 2, 0}
}

// This is the message that Google uses to request bids. A BidRequest
// includes the ad slot from a single impression.
//
type BidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique request id generated by Google. This is 16 bytes long.
	Id []byte `protobuf:"bytes,2,req,name=id" json:"id,omitempty"`
	// The first 3 bytes of the IP address in network byte order for IPv4, or the
	// first 6 bytes for IPv6. Note that the number and position of the bytes
	// included from IPv6 addresses may change later.
	Ip []byte `protobuf:"bytes,4,opt,name=ip" json:"ip,omitempty"`
	// When user_data_treatment is set, the user's cookie/id data is cleared from
	// the request and is not sent in callout.
	// The impacted fields are:
	//  * google_user_id
	//  * hosted_match_data
	//  * mobile.encrypted_advertising_id
	//  * mobile.encrypted_hashed_idfa
	//  * session_id
	UserDataTreatment []BidRequest_UserDataTreatment `protobuf:"varint,49,rep,name=user_data_treatment,json=userDataTreatment,enum=BidRequest_UserDataTreatment" json:"user_data_treatment,omitempty"`
	// The Google ID for the user. This field is the unpadded web-safe base64
	// encoded version of a binary cookie id. See the "Base 64 Encoding with URL
	// and Filename Safe Alphabet" section in RFC 3548 for encoding details. This
	// field may be the same as the Google ID returned by the cookie matching
	// service. Not set if there is one or more user_data_treatment value.
	GoogleUserId *string `protobuf:"bytes,21,opt,name=google_user_id,json=googleUserId" json:"google_user_id,omitempty"`
	// The version number of the google_user_id. We may sometimes change the
	// mapping from cookie to google_user_id. In this case the version will be
	// incremented.
	CookieVersion *uint32 `protobuf:"varint,20,opt,name=cookie_version,json=cookieVersion" json:"cookie_version,omitempty"`
	// The time in seconds since the google_user_id was created.
	// This number may be quantized.
	CookieAgeSeconds *int32 `protobuf:"varint,31,opt,name=cookie_age_seconds,json=cookieAgeSeconds" json:"cookie_age_seconds,omitempty"`
	// Match data stored for this google_user_id through the cookie matching
	// service. If a match exists, then this field holds the decoded data that
	// was passed in the google_hm parameter.
	// Not set if there is one or more user_data_treatment value.
	HostedMatchData []byte `protobuf:"bytes,37,opt,name=hosted_match_data,json=hostedMatchData" json:"hosted_match_data,omitempty"`
	// Represents a short-lived user session on CTV/OTT devices,
	// with a maximum session duration of 6 hours.
	// The use of session_id is never allowed for ads personalization.
	// session_id may only be used for frequency capping, competitive exclusions
	// or related purposes.
	SessionId *string `protobuf:"bytes,65,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	// A string that identifies the browser and type of device that sent the
	// request. Certain data may be redacted or replaced.
	UserAgent         *string                       `protobuf:"bytes,6,opt,name=user_agent,json=userAgent" json:"user_agent,omitempty"`
	PrivacyTreatments *BidRequest_PrivacyTreatments `protobuf:"bytes,71,opt,name=privacy_treatments,json=privacyTreatments" json:"privacy_treatments,omitempty"`
	// Structured user agent information. If both BidRequest.ua and
	// BidRequest.sua are present, BidRequest.sua should be considered the
	// more accurate representation of the device attributes. This is because
	// BidRequest.ua may contain a frozen or reduced user agent string.
	UserAgentData *BidRequest_UserAgent `protobuf:"bytes,63,opt,name=user_agent_data,json=userAgentData" json:"user_agent_data,omitempty"`
	// The billing address country of the publisher. This may be different from
	// the detected country of the user in geo_criteria_id or the hosting country
	// of the website. For a complete list of country codes, please refer to
	// https://developers.google.com/google-ads/api/reference/data/codes-formats#country_codes
	PublisherCountry *string `protobuf:"bytes,55,opt,name=publisher_country,json=publisherCountry" json:"publisher_country,omitempty"`
	// The ID of the host publisher. When populated, indicates that the host
	// publisher participated in revenue sharing, and the ID can be used to
	// authorize ads.txt.
	HostPublisherId *string `protobuf:"bytes,73,opt,name=host_publisher_id,json=hostPublisherId" json:"host_publisher_id,omitempty"`
	// Location of the end user. Uses a subset of the codes used in the Google
	// Ads API. See the geo-table.csv table in the technical documentation for a
	// list of IDs. The geo_criteria_id field replaces the deprecated country,
	// region, city, and metro fields.
	// It is recommended that BidRequest.geo be used instead of this field.
	// See Geotargeting Guide:
	// https://developers.google.com/authorized-buyers/rtb/geotargeting
	GeoCriteriaId *int32          `protobuf:"varint,39,opt,name=geo_criteria_id,json=geoCriteriaId" json:"geo_criteria_id,omitempty"`
	Geo           *BidRequest_Geo `protobuf:"bytes,62,opt,name=geo" json:"geo,omitempty"`
	// Detected postal code of the appropriate type for the country of the end
	// user (e.g., zip code if the country is "US"). The postal_code_prefix field
	// is set when accuracy is too low to imply a full code, otherwise the
	// postal_code field is set.
	// It is recommended that BidRequest.geo be used instead of this field.
	// See Geotargeting Guide:
	// https://developers.google.com/authorized-buyers/rtb/geotargeting
	PostalCode *string `protobuf:"bytes,33,opt,name=postal_code,json=postalCode" json:"postal_code,omitempty"`
	// It is recommended that BidRequest.geo be used instead of this field.
	// See Geotargeting Guide:
	// https://developers.google.com/authorized-buyers/rtb/geotargeting
	PostalCodePrefix *string `protobuf:"bytes,34,opt,name=postal_code_prefix,json=postalCodePrefix" json:"postal_code_prefix,omitempty"`
	// Hyperlocal targeting signal when available, encrypted as described at
	// https://developers.google.com/authorized-buyers/rtb/response-guide/decrypt-hyperlocal
	EncryptedHyperlocalSet []byte `protobuf:"bytes,40,opt,name=encrypted_hyperlocal_set,json=encryptedHyperlocalSet" json:"encrypted_hyperlocal_set,omitempty"`
	// Unencrypted version of encrypted_hyperlocal_set. This field is only set
	// when using an SSL connection.
	HyperlocalSet *BidRequest_HyperlocalSet `protobuf:"bytes,53,opt,name=hyperlocal_set,json=hyperlocalSet" json:"hyperlocal_set,omitempty"`
	// The offset of the user's time from GMT in minutes. For example, GMT+10 is
	// timezone_offset = 600.
	TimezoneOffset *int32                 `protobuf:"varint,25,opt,name=timezone_offset,json=timezoneOffset" json:"timezone_offset,omitempty"`
	UserList       []*BidRequest_UserList `protobuf:"bytes,32,rep,name=user_list,json=userList" json:"user_list,omitempty"`
	// The publisher ID as defined by the publisher code suffix of
	// the web property code. For instance, "pub-123" is the publisher code of web
	// property code "ca-pub-123" (ca- is the product specific prefix of the web
	// property).
	PublisherId *string `protobuf:"bytes,56,opt,name=publisher_id,json=publisherId" json:"publisher_id,omitempty"`
	// The seller network id. See seller-network-ids.txt file in the technical
	// documentation for a list of ids. This is only set if the site is not
	// anonymous and the publisher allows site targeting.
	SellerNetworkId *int32 `protobuf:"varint,41,opt,name=seller_network_id,json=sellerNetworkId" json:"seller_network_id,omitempty"`
	// Id for the partner that provides this inventory. This is only set when
	// seller_network_id is also set and further partner information beyond the
	// seller_network_id is also available. The value of the partner_id is not
	// meaningful beyond providing a stable identifier.
	PartnerId *uint64 `protobuf:"fixed64,52,opt,name=partner_id,json=partnerId" json:"partner_id,omitempty"`
	// The URL of the page with parameters removed. This is only set if the
	// publisher allows site targeting. This always starts with a protocol (either
	// http or https).
	Url *string `protobuf:"bytes,11,opt,name=url" json:"url,omitempty"`
	// Indicates that the request is using semi-transparent branding,
	// which means only a truncated version of the request URL will
	// be provided. This decision is made by the publisher, see
	// https://support.google.com/admanager/answer/4584891#urls for context.
	IsSemiTransparentRequest *bool `protobuf:"varint,67,opt,name=is_semi_transparent_request,json=isSemiTransparentRequest" json:"is_semi_transparent_request,omitempty"`
	// Detected user languages, based on the language of the web page, the browser
	// settings, and other signals. The order is arbitrary. The codes are 2 or 5
	// characters and are documented at
	// https://developers.google.com/google-ads/api/reference/data/codes-formats#languages
	DetectedLanguage []string `protobuf:"bytes,12,rep,name=detected_language,json=detectedLanguage" json:"detected_language,omitempty"`
	// Unordered list of detected content verticals. See the
	// publisher-verticals.txt file in the technical documentation for a list of
	// ids.
	DetectedVertical []*BidRequest_Vertical `protobuf:"bytes,13,rep,name=detected_vertical,json=detectedVertical" json:"detected_vertical,omitempty"`
	// List of detected content labels. See content-labels.txt file in the
	// technical documentation for a list of ids.
	DetectedContentLabel []int32 `protobuf:"varint,26,rep,packed,name=detected_content_label,json=detectedContentLabel" json:"detected_content_label,omitempty"`
	// This represents a unique ID for the overall query. In the event
	// that there are multiple callouts for a query, all callout requests for that
	// query will contain the same google_query_id.
	GoogleQueryId *string                 `protobuf:"bytes,59,opt,name=google_query_id,json=googleQueryId" json:"google_query_id,omitempty"`
	AuctionType   *BidRequest_AuctionType `protobuf:"varint,60,opt,name=auction_type,json=auctionType,enum=BidRequest_AuctionType,def=2" json:"auction_type,omitempty"`
	Device        *BidRequest_Device      `protobuf:"bytes,54,opt,name=device" json:"device,omitempty"`
	KeyValue      []*BidRequest_KeyValue  `protobuf:"bytes,38,rep,name=key_value,json=keyValue" json:"key_value,omitempty"`
	Mobile        *BidRequest_Mobile      `protobuf:"bytes,28,opt,name=mobile" json:"mobile,omitempty"`
	Video         *BidRequest_Video       `protobuf:"bytes,29,opt,name=video" json:"video,omitempty"`
	// The publisher settings list id that applies to this page.
	// See the RTB Publisher Settings guide at
	// https://developers.google.com/authorized-buyers/rtb/pub-settings-guide
	// for details.
	PublisherSettingsListId *uint64                   `protobuf:"fixed64,42,opt,name=publisher_settings_list_id,json=publisherSettingsListId" json:"publisher_settings_list_id,omitempty"`
	PublisherType           *BidRequest_PublisherType `protobuf:"varint,51,opt,name=publisher_type,json=publisherType,enum=BidRequest_PublisherType,def=0" json:"publisher_type,omitempty"`
	// The visibility state of the web page containing the ad slots.
	// See https://www.w3.org/TR/page-visibility/.
	PageVisibility      *BidRequest_VisibilityState       `protobuf:"varint,66,opt,name=page_visibility,json=pageVisibility,enum=BidRequest_VisibilityState,def=0" json:"page_visibility,omitempty"`
	Adslot              []*BidRequest_AdSlot              `protobuf:"bytes,14,rep,name=adslot" json:"adslot,omitempty"`
	BidResponseFeedback []*BidRequest_BidResponseFeedback `protobuf:"bytes,44,rep,name=bid_response_feedback,json=bidResponseFeedback" json:"bid_response_feedback,omitempty"`
	// How many milliseconds Google will wait for a response before ignoring it.
	ResponseDeadlineMs *int32 `protobuf:"varint,57,opt,name=response_deadline_ms,json=responseDeadlineMs" json:"response_deadline_ms,omitempty"`
	// If true, then this is a test request. Results will not be displayed to
	// users and you will not be billed for a response even if it wins the
	// auction. You should still do regular processing since the request may be
	// used to evaluate latencies or for other testing. During your initial
	// testing with Google traffic any response that you make will be filtered
	// out of the auction whether this flag has a value of true or false.
	IsTest *bool `protobuf:"varint,15,opt,name=is_test,json=isTest,def=0" json:"is_test,omitempty"`
	// If true, then this request is intended to measure network latency. Please
	// return an empty BidResponse with only processing_time_ms set as quickly as
	// possible without executing any bidding logic.
	IsPing *bool `protobuf:"varint,17,opt,name=is_ping,json=isPing,def=0" json:"is_ping,omitempty"`
	// If true, then the callout model predicted that you will not bid
	// on this request. We send a sampled percentage of such requests so that we
	// can automatically update the model when bidding patterns change.
	IsPredictedToBeIgnored *bool                             `protobuf:"varint,45,opt,name=is_predicted_to_be_ignored,json=isPredictedToBeIgnored,def=0" json:"is_predicted_to_be_ignored,omitempty"`
	SupplyChain            *BidRequest_SupplyChain           `protobuf:"bytes,69,opt,name=supply_chain,json=supplyChain" json:"supply_chain,omitempty"`
	FrequencyCappingScope  *BidRequest_FrequencyCappingScope `protobuf:"varint,70,opt,name=frequency_capping_scope,json=frequencyCappingScope,enum=BidRequest_FrequencyCappingScope" json:"frequency_capping_scope,omitempty"`
}

// Default values for BidRequest fields.
const (
	Default_BidRequest_AuctionType            = BidRequest_SECOND_PRICE
	Default_BidRequest_PublisherType          = BidRequest_UNKNOWN_PUBLISHER_TYPE
	Default_BidRequest_PageVisibility         = BidRequest_VISIBILITY_STATE_UNKNOWN
	Default_BidRequest_IsTest                 = bool(false)
	Default_BidRequest_IsPing                 = bool(false)
	Default_BidRequest_IsPredictedToBeIgnored = bool(false)
)

func (x *BidRequest) Reset() {
	*x = BidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest) ProtoMessage() {}

func (x *BidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest.ProtoReflect.Descriptor instead.
func (*BidRequest) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0}
}

func (x *BidRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BidRequest) GetIp() []byte {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *BidRequest) GetUserDataTreatment() []BidRequest_UserDataTreatment {
	if x != nil {
		return x.UserDataTreatment
	}
	return nil
}

func (x *BidRequest) GetGoogleUserId() string {
	if x != nil && x.GoogleUserId != nil {
		return *x.GoogleUserId
	}
	return ""
}

func (x *BidRequest) GetCookieVersion() uint32 {
	if x != nil && x.CookieVersion != nil {
		return *x.CookieVersion
	}
	return 0
}

func (x *BidRequest) GetCookieAgeSeconds() int32 {
	if x != nil && x.CookieAgeSeconds != nil {
		return *x.CookieAgeSeconds
	}
	return 0
}

func (x *BidRequest) GetHostedMatchData() []byte {
	if x != nil {
		return x.HostedMatchData
	}
	return nil
}

func (x *BidRequest) GetSessionId() string {
	if x != nil && x.SessionId != nil {
		return *x.SessionId
	}
	return ""
}

func (x *BidRequest) GetUserAgent() string {
	if x != nil && x.UserAgent != nil {
		return *x.UserAgent
	}
	return ""
}

func (x *BidRequest) GetPrivacyTreatments() *BidRequest_PrivacyTreatments {
	if x != nil {
		return x.PrivacyTreatments
	}
	return nil
}

func (x *BidRequest) GetUserAgentData() *BidRequest_UserAgent {
	if x != nil {
		return x.UserAgentData
	}
	return nil
}

func (x *BidRequest) GetPublisherCountry() string {
	if x != nil && x.PublisherCountry != nil {
		return *x.PublisherCountry
	}
	return ""
}

func (x *BidRequest) GetHostPublisherId() string {
	if x != nil && x.HostPublisherId != nil {
		return *x.HostPublisherId
	}
	return ""
}

func (x *BidRequest) GetGeoCriteriaId() int32 {
	if x != nil && x.GeoCriteriaId != nil {
		return *x.GeoCriteriaId
	}
	return 0
}

func (x *BidRequest) GetGeo() *BidRequest_Geo {
	if x != nil {
		return x.Geo
	}
	return nil
}

func (x *BidRequest) GetPostalCode() string {
	if x != nil && x.PostalCode != nil {
		return *x.PostalCode
	}
	return ""
}

func (x *BidRequest) GetPostalCodePrefix() string {
	if x != nil && x.PostalCodePrefix != nil {
		return *x.PostalCodePrefix
	}
	return ""
}

func (x *BidRequest) GetEncryptedHyperlocalSet() []byte {
	if x != nil {
		return x.EncryptedHyperlocalSet
	}
	return nil
}

func (x *BidRequest) GetHyperlocalSet() *BidRequest_HyperlocalSet {
	if x != nil {
		return x.HyperlocalSet
	}
	return nil
}

func (x *BidRequest) GetTimezoneOffset() int32 {
	if x != nil && x.TimezoneOffset != nil {
		return *x.TimezoneOffset
	}
	return 0
}

func (x *BidRequest) GetUserList() []*BidRequest_UserList {
	if x != nil {
		return x.UserList
	}
	return nil
}

func (x *BidRequest) GetPublisherId() string {
	if x != nil && x.PublisherId != nil {
		return *x.PublisherId
	}
	return ""
}

func (x *BidRequest) GetSellerNetworkId() int32 {
	if x != nil && x.SellerNetworkId != nil {
		return *x.SellerNetworkId
	}
	return 0
}

func (x *BidRequest) GetPartnerId() uint64 {
	if x != nil && x.PartnerId != nil {
		return *x.PartnerId
	}
	return 0
}

func (x *BidRequest) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *BidRequest) GetIsSemiTransparentRequest() bool {
	if x != nil && x.IsSemiTransparentRequest != nil {
		return *x.IsSemiTransparentRequest
	}
	return false
}

func (x *BidRequest) GetDetectedLanguage() []string {
	if x != nil {
		return x.DetectedLanguage
	}
	return nil
}

func (x *BidRequest) GetDetectedVertical() []*BidRequest_Vertical {
	if x != nil {
		return x.DetectedVertical
	}
	return nil
}

func (x *BidRequest) GetDetectedContentLabel() []int32 {
	if x != nil {
		return x.DetectedContentLabel
	}
	return nil
}

func (x *BidRequest) GetGoogleQueryId() string {
	if x != nil && x.GoogleQueryId != nil {
		return *x.GoogleQueryId
	}
	return ""
}

func (x *BidRequest) GetAuctionType() BidRequest_AuctionType {
	if x != nil && x.AuctionType != nil {
		return *x.AuctionType
	}
	return Default_BidRequest_AuctionType
}

func (x *BidRequest) GetDevice() *BidRequest_Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *BidRequest) GetKeyValue() []*BidRequest_KeyValue {
	if x != nil {
		return x.KeyValue
	}
	return nil
}

func (x *BidRequest) GetMobile() *BidRequest_Mobile {
	if x != nil {
		return x.Mobile
	}
	return nil
}

func (x *BidRequest) GetVideo() *BidRequest_Video {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *BidRequest) GetPublisherSettingsListId() uint64 {
	if x != nil && x.PublisherSettingsListId != nil {
		return *x.PublisherSettingsListId
	}
	return 0
}

func (x *BidRequest) GetPublisherType() BidRequest_PublisherType {
	if x != nil && x.PublisherType != nil {
		return *x.PublisherType
	}
	return Default_BidRequest_PublisherType
}

func (x *BidRequest) GetPageVisibility() BidRequest_VisibilityState {
	if x != nil && x.PageVisibility != nil {
		return *x.PageVisibility
	}
	return Default_BidRequest_PageVisibility
}

func (x *BidRequest) GetAdslot() []*BidRequest_AdSlot {
	if x != nil {
		return x.Adslot
	}
	return nil
}

func (x *BidRequest) GetBidResponseFeedback() []*BidRequest_BidResponseFeedback {
	if x != nil {
		return x.BidResponseFeedback
	}
	return nil
}

func (x *BidRequest) GetResponseDeadlineMs() int32 {
	if x != nil && x.ResponseDeadlineMs != nil {
		return *x.ResponseDeadlineMs
	}
	return 0
}

func (x *BidRequest) GetIsTest() bool {
	if x != nil && x.IsTest != nil {
		return *x.IsTest
	}
	return Default_BidRequest_IsTest
}

func (x *BidRequest) GetIsPing() bool {
	if x != nil && x.IsPing != nil {
		return *x.IsPing
	}
	return Default_BidRequest_IsPing
}

func (x *BidRequest) GetIsPredictedToBeIgnored() bool {
	if x != nil && x.IsPredictedToBeIgnored != nil {
		return *x.IsPredictedToBeIgnored
	}
	return Default_BidRequest_IsPredictedToBeIgnored
}

func (x *BidRequest) GetSupplyChain() *BidRequest_SupplyChain {
	if x != nil {
		return x.SupplyChain
	}
	return nil
}

func (x *BidRequest) GetFrequencyCappingScope() BidRequest_FrequencyCappingScope {
	if x != nil && x.FrequencyCappingScope != nil {
		return *x.FrequencyCappingScope
	}
	return BidRequest_FREQUENCY_CAPPING_SCOPE_UNKNOWN
}

// This is the message that you return in response to a BidRequest. You may
// specify zero or more ads. For each ad, you should provide an ad slot on
// which the ad can run. An ad slot is identified by the AdSlot.id from the
// BidRequest. If you do not wish to bid, submit a response with no ads and
// with only the processing_time_ms set.
//
type BidResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ad []*BidResponse_Ad `protobuf:"bytes,2,rep,name=ad" json:"ad,omitempty"`
	// If is_test was set in the BidRequest, then you may return debug information
	// as plain text in this field. Please do not set this field under normal
	// conditions, or set it to values longer than 100 characters. You should only
	// use this field when asked to do so as part of troubleshooting particular
	// problems.
	DebugString *string `protobuf:"bytes,5,opt,name=debug_string,json=debugString" json:"debug_string,omitempty"`
	// Please set this to the processing time in milliseconds from when you
	// received the request to when you returned the response.
	ProcessingTimeMs *int32 `protobuf:"varint,4,opt,name=processing_time_ms,json=processingTimeMs" json:"processing_time_ms,omitempty"`
	// An optional, bidder-specified reason for not submitting a bid. This field
	// is equivalent to BidResponse.nbr in the OpenRTB protocol and uses the same
	// namespace of no-bid reason codes. See
	// https://developers.google.com/authorized-buyers/rtb/downloads/no-bid-reasons.txt
	// for the full set of no-bid reason codes.
	NoBidReason *int32 `protobuf:"varint,6,opt,name=no_bid_reason,json=noBidReason" json:"no_bid_reason,omitempty"`
}

func (x *BidResponse) Reset() {
	*x = BidResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidResponse) ProtoMessage() {}

func (x *BidResponse) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidResponse.ProtoReflect.Descriptor instead.
func (*BidResponse) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{1}
}

func (x *BidResponse) GetAd() []*BidResponse_Ad {
	if x != nil {
		return x.Ad
	}
	return nil
}

func (x *BidResponse) GetDebugString() string {
	if x != nil && x.DebugString != nil {
		return *x.DebugString
	}
	return ""
}

func (x *BidResponse) GetProcessingTimeMs() int32 {
	if x != nil && x.ProcessingTimeMs != nil {
		return *x.ProcessingTimeMs
	}
	return 0
}

func (x *BidResponse) GetNoBidReason() int32 {
	if x != nil && x.NoBidReason != nil {
		return *x.NoBidReason
	}
	return 0
}

// Information about privacy treatments that apply to an ad opportunity
// offered via this request.
type BidRequest_PrivacyTreatments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NonPersonalizedAdsReason []BidRequest_PrivacyTreatments_NonPersonalizedAdsReason `protobuf:"varint,6,rep,packed,name=non_personalized_ads_reason,json=nonPersonalizedAdsReason,enum=BidRequest_PrivacyTreatments_NonPersonalizedAdsReason" json:"non_personalized_ads_reason,omitempty"`
	// True if publisher grants the permission to allow the bidder to use
	// user visitation information from the publisher's site to create
	// interest categories that can be used to serve ads based on those
	// categories. To use this data to create interest categories, a bidder must
	// also win a given impression.
	// https://support.google.com/admanager/answer/11956152
	AllowUserDataCollection *bool `protobuf:"varint,7,opt,name=allow_user_data_collection,json=allowUserDataCollection" json:"allow_user_data_collection,omitempty"`
}

func (x *BidRequest_PrivacyTreatments) Reset() {
	*x = BidRequest_PrivacyTreatments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_PrivacyTreatments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_PrivacyTreatments) ProtoMessage() {}

func (x *BidRequest_PrivacyTreatments) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_PrivacyTreatments.ProtoReflect.Descriptor instead.
func (*BidRequest_PrivacyTreatments) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 0}
}

func (x *BidRequest_PrivacyTreatments) GetNonPersonalizedAdsReason() []BidRequest_PrivacyTreatments_NonPersonalizedAdsReason {
	if x != nil {
		return x.NonPersonalizedAdsReason
	}
	return nil
}

func (x *BidRequest_PrivacyTreatments) GetAllowUserDataCollection() bool {
	if x != nil && x.AllowUserDataCollection != nil {
		return *x.AllowUserDataCollection
	}
	return false
}

// Structured user agent information, which can be used when a client
// supports User-Agent Client Hints: https://wicg.github.io/ua-client-hints/
//
// Note: When available, fields are sourced from Client Hints HTTP headers
// or equivalent JavaScript accessors from the NavigatorUAData interface.
// For agents that have no support for User-Agent Client Hints, an exchange
// can also extract information from the parsed User-Agent header, so this
// object can always be used as the source of the user agent information.
type BidRequest_UserAgent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifies the browser. Use the new field browsers.
	//
	// Deprecated: Do not use.
	DEPRECATEDBrowser *BidRequest_UserAgent_BrandVersion `protobuf:"bytes,1,opt,name=DEPRECATED_browser,json=DEPRECATEDBrowser" json:"DEPRECATED_browser,omitempty"`
	// Each BrandVersion object identifies a browser or similar software
	// component. Exchanges should send brands and versions derived from
	// the Sec-CH-UA-Full-Version-List header.
	Browsers []*BidRequest_UserAgent_BrandVersion `protobuf:"bytes,8,rep,name=browsers" json:"browsers,omitempty"`
	// Identifies the user agent's execution platform / OS. Exchanges should
	// send a brand derived from the Sec-CH-UA-Platform header, and version
	// derived from the Sec-CH-UAPlatform-Version header.
	Platform *BidRequest_UserAgent_BrandVersion `protobuf:"bytes,2,opt,name=platform" json:"platform,omitempty"`
	// True if the agent prefers a "mobile" version of the content if
	// available, i.e. optimized for small screens or touch input. False if
	// the agent prefers the "desktop" or "full" content. Exchanges should
	// derive this value from the Sec-CH-UAMobile header.
	Mobile *bool `protobuf:"varint,3,opt,name=mobile" json:"mobile,omitempty"`
	// Device's major binary architecture, e.g. "x86" or "arm". Exchanges
	// should retrieve this value from the Sec-CH-UA-Arch header.
	Architecture *string `protobuf:"bytes,4,opt,name=architecture" json:"architecture,omitempty"`
	// Device's bitness, e.g. "64" for 64-bit architecture. Exchanges should
	// retrieve this value from the Sec-CH-UA-Bitness header.
	Bitness *string `protobuf:"bytes,9,opt,name=bitness" json:"bitness,omitempty"`
	// Device model. Exchanges should retrieve this value from the
	// Sec-CH-UAModel header.
	Model *string `protobuf:"bytes,5,opt,name=model" json:"model,omitempty"`
}

func (x *BidRequest_UserAgent) Reset() {
	*x = BidRequest_UserAgent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_UserAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_UserAgent) ProtoMessage() {}

func (x *BidRequest_UserAgent) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_UserAgent.ProtoReflect.Descriptor instead.
func (*BidRequest_UserAgent) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 1}
}

// Deprecated: Do not use.
func (x *BidRequest_UserAgent) GetDEPRECATEDBrowser() *BidRequest_UserAgent_BrandVersion {
	if x != nil {
		return x.DEPRECATEDBrowser
	}
	return nil
}

func (x *BidRequest_UserAgent) GetBrowsers() []*BidRequest_UserAgent_BrandVersion {
	if x != nil {
		return x.Browsers
	}
	return nil
}

func (x *BidRequest_UserAgent) GetPlatform() *BidRequest_UserAgent_BrandVersion {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *BidRequest_UserAgent) GetMobile() bool {
	if x != nil && x.Mobile != nil {
		return *x.Mobile
	}
	return false
}

func (x *BidRequest_UserAgent) GetArchitecture() string {
	if x != nil && x.Architecture != nil {
		return *x.Architecture
	}
	return ""
}

func (x *BidRequest_UserAgent) GetBitness() string {
	if x != nil && x.Bitness != nil {
		return *x.Bitness
	}
	return ""
}

func (x *BidRequest_UserAgent) GetModel() string {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return ""
}

// The user's approximate geographic location. All location information is
// IP geolocation-derived.  The lat/lon fields may be a reference position
// (e.g. centroid) for the IP geolocation-derived location that's also carried
// by the other fields (e.g. a city), and accuracy will be the radius of a
// circle with the approximate area of that location. Location and its
// accuracy will be fuzzified as necessary to protect user privacy.
// See Geotargeting Guide:
// https://developers.google.com/authorized-buyers/rtb/geotargeting
type BidRequest_Geo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Latitude from -90.0 to +90.0, where negative is south.
	Lat *float64 `protobuf:"fixed64,1,opt,name=lat" json:"lat,omitempty"`
	// Longitude from -180.0 to +180.0, where negative is west.
	Lon *float64 `protobuf:"fixed64,2,opt,name=lon" json:"lon,omitempty"`
	// Country using ISO-3166-1 Alpha-3.
	Country *string `protobuf:"bytes,3,opt,name=country" json:"country,omitempty"`
	// Region code using ISO-3166-2; 2-letter state code if USA.
	Region *string `protobuf:"bytes,4,opt,name=region" json:"region,omitempty"`
	// Google metro code; similar to but not exactly Nielsen DMAs.
	Metro *string `protobuf:"bytes,6,opt,name=metro" json:"metro,omitempty"`
	// City using United Nations Code for Trade & Transport Locations.
	// (https://www.unece.org/cefact/locode/service/location.htm).
	City *string `protobuf:"bytes,7,opt,name=city" json:"city,omitempty"`
	// Zip/postal code.
	Zip *string `protobuf:"bytes,8,opt,name=zip" json:"zip,omitempty"`
	// Estimated location accuracy in meters.
	Accuracy *int32 `protobuf:"varint,11,opt,name=accuracy" json:"accuracy,omitempty"`
	// Local time as the number +/- of minutes from UTC.
	Utcoffset *int32 `protobuf:"varint,10,opt,name=utcoffset" json:"utcoffset,omitempty"`
}

func (x *BidRequest_Geo) Reset() {
	*x = BidRequest_Geo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Geo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Geo) ProtoMessage() {}

func (x *BidRequest_Geo) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Geo.ProtoReflect.Descriptor instead.
func (*BidRequest_Geo) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 2}
}

func (x *BidRequest_Geo) GetLat() float64 {
	if x != nil && x.Lat != nil {
		return *x.Lat
	}
	return 0
}

func (x *BidRequest_Geo) GetLon() float64 {
	if x != nil && x.Lon != nil {
		return *x.Lon
	}
	return 0
}

func (x *BidRequest_Geo) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *BidRequest_Geo) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *BidRequest_Geo) GetMetro() string {
	if x != nil && x.Metro != nil {
		return *x.Metro
	}
	return ""
}

func (x *BidRequest_Geo) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *BidRequest_Geo) GetZip() string {
	if x != nil && x.Zip != nil {
		return *x.Zip
	}
	return ""
}

func (x *BidRequest_Geo) GetAccuracy() int32 {
	if x != nil && x.Accuracy != nil {
		return *x.Accuracy
	}
	return 0
}

func (x *BidRequest_Geo) GetUtcoffset() int32 {
	if x != nil && x.Utcoffset != nil {
		return *x.Utcoffset
	}
	return 0
}

// A hyperlocal targeting location when available.
//
type BidRequest_Hyperlocal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The mobile device can be at any point inside the geofence polygon defined
	// by a list of corners. Currently, the polygon is always a parallelogram
	// with 4 corners.
	Corners []*BidRequest_Hyperlocal_Point `protobuf:"bytes,1,rep,name=corners" json:"corners,omitempty"`
}

func (x *BidRequest_Hyperlocal) Reset() {
	*x = BidRequest_Hyperlocal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Hyperlocal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Hyperlocal) ProtoMessage() {}

func (x *BidRequest_Hyperlocal) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Hyperlocal.ProtoReflect.Descriptor instead.
func (*BidRequest_Hyperlocal) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 3}
}

func (x *BidRequest_Hyperlocal) GetCorners() []*BidRequest_Hyperlocal_Point {
	if x != nil {
		return x.Corners
	}
	return nil
}

type BidRequest_HyperlocalSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field currently contains at most one hyperlocal polygon.
	Hyperlocal []*BidRequest_Hyperlocal `protobuf:"bytes,1,rep,name=hyperlocal" json:"hyperlocal,omitempty"`
	// The approximate geometric center of the geofence area. It is calculated
	// exclusively based on the geometric shape of the geofence area and in no
	// way indicates the mobile device's actual location within the geofence
	// area. If multiple hyperlocal polygons are specified above then
	// center_point is the geometric center of all hyperlocal polygons.
	CenterPoint *BidRequest_Hyperlocal_Point `protobuf:"bytes,2,opt,name=center_point,json=centerPoint" json:"center_point,omitempty"`
}

func (x *BidRequest_HyperlocalSet) Reset() {
	*x = BidRequest_HyperlocalSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_HyperlocalSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_HyperlocalSet) ProtoMessage() {}

func (x *BidRequest_HyperlocalSet) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_HyperlocalSet.ProtoReflect.Descriptor instead.
func (*BidRequest_HyperlocalSet) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 4}
}

func (x *BidRequest_HyperlocalSet) GetHyperlocal() []*BidRequest_Hyperlocal {
	if x != nil {
		return x.Hyperlocal
	}
	return nil
}

func (x *BidRequest_HyperlocalSet) GetCenterPoint() *BidRequest_Hyperlocal_Point {
	if x != nil {
		return x.CenterPoint
	}
	return nil
}

// This field is not populated by default. We recommend that bidders instead
// store and look up list ids using either google_user_id or hosted_match_data
// as keys.
//
type BidRequest_UserList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The user list id.
	Id *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// The time in seconds since the user was added to the list.
	AgeSeconds *int32 `protobuf:"varint,2,opt,name=age_seconds,json=ageSeconds" json:"age_seconds,omitempty"`
}

func (x *BidRequest_UserList) Reset() {
	*x = BidRequest_UserList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_UserList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_UserList) ProtoMessage() {}

func (x *BidRequest_UserList) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_UserList.ProtoReflect.Descriptor instead.
func (*BidRequest_UserList) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 5}
}

func (x *BidRequest_UserList) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *BidRequest_UserList) GetAgeSeconds() int32 {
	if x != nil && x.AgeSeconds != nil {
		return *x.AgeSeconds
	}
	return 0
}

// One or more detected verticals for the page as determined by Google.
//
type BidRequest_Vertical struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The vertical id. See the publisher-verticals.txt file in the technical
	// documentation for a list of ids.
	Id *int32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// Weight for this vertical, in the (0.0, 1.0] range. More relevant
	// verticals have higher weights.
	Weight *float32 `protobuf:"fixed32,2,req,name=weight" json:"weight,omitempty"`
}

func (x *BidRequest_Vertical) Reset() {
	*x = BidRequest_Vertical{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Vertical) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Vertical) ProtoMessage() {}

func (x *BidRequest_Vertical) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Vertical.ProtoReflect.Descriptor instead.
func (*BidRequest_Vertical) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 6}
}

func (x *BidRequest_Vertical) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *BidRequest_Vertical) GetWeight() float32 {
	if x != nil && x.Weight != nil {
		return *x.Weight
	}
	return 0
}

// Information about the device.
type BidRequest_Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceType *BidRequest_Device_DeviceType `protobuf:"varint,1,opt,name=device_type,json=deviceType,enum=BidRequest_Device_DeviceType,def=0" json:"device_type,omitempty"`
	// The platform of the device. Examples: android, iphone, palm
	Platform *string `protobuf:"bytes,2,opt,name=platform,def=" json:"platform,omitempty"`
	// The brand of the device, e.g., Nokia, Samsung.
	Brand *string `protobuf:"bytes,3,opt,name=brand,def=" json:"brand,omitempty"`
	// The model of the device, e.g., N70, Galaxy.
	Model *string `protobuf:"bytes,4,opt,name=model,def=" json:"model,omitempty"`
	// The OS version; e.g., 2 for Android 2.1, or 3.3 for iOS 3.3.1.
	OsVersion *BidRequest_Device_OsVersion `protobuf:"bytes,5,opt,name=os_version,json=osVersion" json:"os_version,omitempty"`
	// Unique identifier for the mobile carrier if the device is connected to
	// the internet via a carrier (as opposed to via WiFi). To look up carrier
	// name from carrier ID, please refer to:
	// https://storage.googleapis.com/adx-rtb-dictionaries/mobile-carriers.csv.
	CarrierId *int64 `protobuf:"varint,6,opt,name=carrier_id,json=carrierId,def=0" json:"carrier_id,omitempty"`
	// The width of the device screen in pixels.
	ScreenWidth *int32 `protobuf:"varint,7,opt,name=screen_width,json=screenWidth,def=0" json:"screen_width,omitempty"`
	// The height of the device screen in pixels.
	ScreenHeight *int32 `protobuf:"varint,8,opt,name=screen_height,json=screenHeight,def=0" json:"screen_height,omitempty"`
	// Used for high-density devices (e.g., iOS retina displays). A non-default
	// value indicates that the nominal screen size (with pixels as the unit)
	// does not describe the actual number of pixels in the screen. For example,
	// nominal width and height may be 320x640 for a screen that actually has
	// 640x1280 pixels, in which case screen_width=320, screen_height=640, and
	// screen_pixel_ratio_millis=2000, since each axis has twice as many pixels
	// as its dimensions would indicate.
	ScreenPixelRatioMillis *int32 `protobuf:"varint,9,opt,name=screen_pixel_ratio_millis,json=screenPixelRatioMillis,def=0" json:"screen_pixel_ratio_millis,omitempty"`
	// The screen orientation of the device when the ad request is sent.
	ScreenOrientation *BidRequest_Device_ScreenOrientation `protobuf:"varint,10,opt,name=screen_orientation,json=screenOrientation,enum=BidRequest_Device_ScreenOrientation,def=0" json:"screen_orientation,omitempty"`
	// Apple iOS device model, e.g., "iphone 5s", "iphone 6+", "ipad 4".
	HardwareVersion *string `protobuf:"bytes,11,opt,name=hardware_version,json=hardwareVersion" json:"hardware_version,omitempty"`
	// Indicates whether the user has opted out of interest based advertising or
	// ads personalization as determined by an OS-level setting in iOS or
	// Android:
	// https://support.apple.com/en-us/HT202074
	// https://support.google.com/googleplay/answer/3405269
	LimitAdTracking *bool `protobuf:"varint,12,opt,name=limit_ad_tracking,json=limitAdTracking" json:"limit_ad_tracking,omitempty"`
	// This field is only populated for iOS devices. Indicates the app tracking
	// authorization status. This value is retrieved from ATTrackingManager
	// and provided as is. For more information about iOS's app tracking
	// authorization status, see:
	// https://developer.apple.com/documentation/apptrackingtransparency/attrackingmanager/authorizationstatus
	AppTrackingAuthorizationStatus *BidRequest_Device_AuthorizationStatus `protobuf:"varint,13,opt,name=app_tracking_authorization_status,json=appTrackingAuthorizationStatus,enum=BidRequest_Device_AuthorizationStatus" json:"app_tracking_authorization_status,omitempty"`
}

// Default values for BidRequest_Device fields.
const (
	Default_BidRequest_Device_DeviceType             = BidRequest_Device_UNKNOWN_DEVICE
	Default_BidRequest_Device_Platform               = string("")
	Default_BidRequest_Device_Brand                  = string("")
	Default_BidRequest_Device_Model                  = string("")
	Default_BidRequest_Device_CarrierId              = int64(0)
	Default_BidRequest_Device_ScreenWidth            = int32(0)
	Default_BidRequest_Device_ScreenHeight           = int32(0)
	Default_BidRequest_Device_ScreenPixelRatioMillis = int32(0)
	Default_BidRequest_Device_ScreenOrientation      = BidRequest_Device_UNKNOWN_ORIENTATION
)

func (x *BidRequest_Device) Reset() {
	*x = BidRequest_Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Device) ProtoMessage() {}

func (x *BidRequest_Device) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Device.ProtoReflect.Descriptor instead.
func (*BidRequest_Device) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 7}
}

func (x *BidRequest_Device) GetDeviceType() BidRequest_Device_DeviceType {
	if x != nil && x.DeviceType != nil {
		return *x.DeviceType
	}
	return Default_BidRequest_Device_DeviceType
}

func (x *BidRequest_Device) GetPlatform() string {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return Default_BidRequest_Device_Platform
}

func (x *BidRequest_Device) GetBrand() string {
	if x != nil && x.Brand != nil {
		return *x.Brand
	}
	return Default_BidRequest_Device_Brand
}

func (x *BidRequest_Device) GetModel() string {
	if x != nil && x.Model != nil {
		return *x.Model
	}
	return Default_BidRequest_Device_Model
}

func (x *BidRequest_Device) GetOsVersion() *BidRequest_Device_OsVersion {
	if x != nil {
		return x.OsVersion
	}
	return nil
}

func (x *BidRequest_Device) GetCarrierId() int64 {
	if x != nil && x.CarrierId != nil {
		return *x.CarrierId
	}
	return Default_BidRequest_Device_CarrierId
}

func (x *BidRequest_Device) GetScreenWidth() int32 {
	if x != nil && x.ScreenWidth != nil {
		return *x.ScreenWidth
	}
	return Default_BidRequest_Device_ScreenWidth
}

func (x *BidRequest_Device) GetScreenHeight() int32 {
	if x != nil && x.ScreenHeight != nil {
		return *x.ScreenHeight
	}
	return Default_BidRequest_Device_ScreenHeight
}

func (x *BidRequest_Device) GetScreenPixelRatioMillis() int32 {
	if x != nil && x.ScreenPixelRatioMillis != nil {
		return *x.ScreenPixelRatioMillis
	}
	return Default_BidRequest_Device_ScreenPixelRatioMillis
}

func (x *BidRequest_Device) GetScreenOrientation() BidRequest_Device_ScreenOrientation {
	if x != nil && x.ScreenOrientation != nil {
		return *x.ScreenOrientation
	}
	return Default_BidRequest_Device_ScreenOrientation
}

func (x *BidRequest_Device) GetHardwareVersion() string {
	if x != nil && x.HardwareVersion != nil {
		return *x.HardwareVersion
	}
	return ""
}

func (x *BidRequest_Device) GetLimitAdTracking() bool {
	if x != nil && x.LimitAdTracking != nil {
		return *x.LimitAdTracking
	}
	return false
}

func (x *BidRequest_Device) GetAppTrackingAuthorizationStatus() BidRequest_Device_AuthorizationStatus {
	if x != nil && x.AppTrackingAuthorizationStatus != nil {
		return *x.AppTrackingAuthorizationStatus
	}
	return BidRequest_Device_NOT_DETERMINED
}

// Additional key-value attributes. Currently unused.
type BidRequest_KeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *BidRequest_KeyValue) Reset() {
	*x = BidRequest_KeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_KeyValue) ProtoMessage() {}

func (x *BidRequest_KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_KeyValue.ProtoReflect.Descriptor instead.
func (*BidRequest_KeyValue) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 8}
}

func (x *BidRequest_KeyValue) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *BidRequest_KeyValue) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

// Information for ad queries coming from mobile devices. A mobile device is
// either a smartphone or a tablet. This is present for ad queries both from
// mobile devices browsing the web and from mobile apps.
type BidRequest_Mobile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, then this request is from a mobile application. For branded
	// requests, app_id will also be filled in. If the request is from a mobile
	// web page contained inside an app, is_app will still be false, but app_id
	// could be filled in with the app identifier. For SDK-less requests (mostly
	// from connected TVs), this will be true if an app ID is provided directly
	// in the request.
	IsApp *bool `protobuf:"varint,7,opt,name=is_app,json=isApp,def=0" json:"is_app,omitempty"`
	// The identifier of the mobile app when this ad query comes from a mobile
	// app, or from a mobile web page contained inside an app. If the app was
	// downloaded from the Apple iTunes app store, then this is the app-store
	// id, e.g., 343200656. For Android devices, this is the fully qualified
	// package name, e.g., com.rovio.angrybirds. For Windows devices it's the
	// App ID, e.g., f15abcde-f6gh-47i0-j3k8-37l93817mn3o. For SDK-less requests
	// (mostly from connected TVs), the app ID provided by the publisher
	// directly in the request.
	AppId *string `protobuf:"bytes,6,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	// If true, then this is a mobile full screen ad request.
	IsInterstitialRequest *bool `protobuf:"varint,10,opt,name=is_interstitial_request,json=isInterstitialRequest,def=0" json:"is_interstitial_request,omitempty"`
	// This field contains the IDs of categories to which the current mobile app
	// belongs. This field will be empty if is_app is false. The mapping between
	// mobile apps and categories is defined by the Google Play Store for
	// Android apps, or the Apple iTunes Store for iOS apps. To look up category
	// name from category ID, please refer to
	// https://developers.google.com/google-ads/api/reference/data/codes-formats#mobile_app_categories
	AppCategoryIds []int32 `protobuf:"varint,11,rep,name=app_category_ids,json=appCategoryIds" json:"app_category_ids,omitempty"`
	// For a mobile web request, this field indicates whether the page is
	// optimized for mobile browsers on high-end mobile phones.
	IsMobileWebOptimized *bool `protobuf:"varint,17,opt,name=is_mobile_web_optimized,json=isMobileWebOptimized,def=0" json:"is_mobile_web_optimized,omitempty"`
	// Indicates whether a mobile app bid request is for an app open ad.
	// See App open ad guidance at
	// https://support.google.com/admob/answer/9341964 for more information.
	IsAppOpenAd *bool `protobuf:"varint,36,opt,name=is_app_open_ad,json=isAppOpenAd,def=0" json:"is_app_open_ad,omitempty"`
	// This field is used for advertising identifiers for
	// 1) iOS devices (This is called Identifier for Advertising, or IDFA, as
	// described at https://support.google.com/authorizedbuyers/answer/3221407),
	// 2) Android devices,
	// 3) Roku devices,
	// 4) Microsoft Xbox devices,
	// 5) Amazon devices (i.e. Amazon Fire).
	//
	// When the encrypted_advertising_id is an IDFA, the plaintext after
	// decrypting the ciphertext is the IDFA (16 byte UUID) returned by iOS's
	// [ASIdentifierManager advertisingIdentifier]. For encrypted_hashed_idfa,
	// the plaintext is the 16 byte MD5 hash of the IDFA. Only one of the two
	// fields will be available, depending on the version of the SDK making the
	// request. Later SDKs provide unhashed values. They are not set if there is
	// one or more user_data_treatment value in the BidRequest.
	EncryptedAdvertisingId []byte `protobuf:"bytes,20,opt,name=encrypted_advertising_id,json=encryptedAdvertisingId" json:"encrypted_advertising_id,omitempty"`
	// Unencrypted version of encrypted_advertising_id. This field is only set
	// when using an SSL connection. This field is a 16 byte UUID (binary form)
	// or a 32 byte alphanumeric id (such as Samsung ID).
	AdvertisingId       []byte `protobuf:"bytes,27,opt,name=advertising_id,json=advertisingId" json:"advertising_id,omitempty"`
	EncryptedHashedIdfa []byte `protobuf:"bytes,21,opt,name=encrypted_hashed_idfa,json=encryptedHashedIdfa" json:"encrypted_hashed_idfa,omitempty"`
	// Unencrypted version of encrypted_hashed_idfa. This field is only set
	// when using an SSL connection. This field is a 16 byte MD5.
	HashedIdfa []byte `protobuf:"bytes,28,opt,name=hashed_idfa,json=hashedIdfa" json:"hashed_idfa,omitempty"`
	// App names for Android apps are from the Google Play store.
	// App names for iOS apps are provided by App Annie
	// (https://www.appannie.com). App names for SDK-less requests (mostly from
	// connected TVs) are provided by the publisher directly in the request.
	AppName *string `protobuf:"bytes,24,opt,name=app_name,json=appName" json:"app_name,omitempty"`
	// Average user rating for the app. The range of user rating is between 1.0
	// and 5.0. Currently only available for apps in Google Play store.
	AppRating    *float32                              `protobuf:"fixed32,25,opt,name=app_rating,json=appRating" json:"app_rating,omitempty"`
	InstalledSdk []*BidRequest_Mobile_InstalledSdk     `protobuf:"bytes,32,rep,name=installed_sdk,json=installedSdk" json:"installed_sdk,omitempty"`
	Skadn        *BidRequest_Mobile_SKAdNetworkRequest `protobuf:"bytes,34,opt,name=skadn" json:"skadn,omitempty"`
}

// Default values for BidRequest_Mobile fields.
const (
	Default_BidRequest_Mobile_IsApp                 = bool(false)
	Default_BidRequest_Mobile_IsInterstitialRequest = bool(false)
	Default_BidRequest_Mobile_IsMobileWebOptimized  = bool(false)
	Default_BidRequest_Mobile_IsAppOpenAd           = bool(false)
)

func (x *BidRequest_Mobile) Reset() {
	*x = BidRequest_Mobile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Mobile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Mobile) ProtoMessage() {}

func (x *BidRequest_Mobile) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Mobile.ProtoReflect.Descriptor instead.
func (*BidRequest_Mobile) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 9}
}

func (x *BidRequest_Mobile) GetIsApp() bool {
	if x != nil && x.IsApp != nil {
		return *x.IsApp
	}
	return Default_BidRequest_Mobile_IsApp
}

func (x *BidRequest_Mobile) GetAppId() string {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return ""
}

func (x *BidRequest_Mobile) GetIsInterstitialRequest() bool {
	if x != nil && x.IsInterstitialRequest != nil {
		return *x.IsInterstitialRequest
	}
	return Default_BidRequest_Mobile_IsInterstitialRequest
}

func (x *BidRequest_Mobile) GetAppCategoryIds() []int32 {
	if x != nil {
		return x.AppCategoryIds
	}
	return nil
}

func (x *BidRequest_Mobile) GetIsMobileWebOptimized() bool {
	if x != nil && x.IsMobileWebOptimized != nil {
		return *x.IsMobileWebOptimized
	}
	return Default_BidRequest_Mobile_IsMobileWebOptimized
}

func (x *BidRequest_Mobile) GetIsAppOpenAd() bool {
	if x != nil && x.IsAppOpenAd != nil {
		return *x.IsAppOpenAd
	}
	return Default_BidRequest_Mobile_IsAppOpenAd
}

func (x *BidRequest_Mobile) GetEncryptedAdvertisingId() []byte {
	if x != nil {
		return x.EncryptedAdvertisingId
	}
	return nil
}

func (x *BidRequest_Mobile) GetAdvertisingId() []byte {
	if x != nil {
		return x.AdvertisingId
	}
	return nil
}

func (x *BidRequest_Mobile) GetEncryptedHashedIdfa() []byte {
	if x != nil {
		return x.EncryptedHashedIdfa
	}
	return nil
}

func (x *BidRequest_Mobile) GetHashedIdfa() []byte {
	if x != nil {
		return x.HashedIdfa
	}
	return nil
}

func (x *BidRequest_Mobile) GetAppName() string {
	if x != nil && x.AppName != nil {
		return *x.AppName
	}
	return ""
}

func (x *BidRequest_Mobile) GetAppRating() float32 {
	if x != nil && x.AppRating != nil {
		return *x.AppRating
	}
	return 0
}

func (x *BidRequest_Mobile) GetInstalledSdk() []*BidRequest_Mobile_InstalledSdk {
	if x != nil {
		return x.InstalledSdk
	}
	return nil
}

func (x *BidRequest_Mobile) GetSkadn() *BidRequest_Mobile_SKAdNetworkRequest {
	if x != nil {
		return x.Skadn
	}
	return nil
}

// Information about the video if this is an in-video ad request.
//
type BidRequest_Video struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Placement *BidRequest_Video_Placement `protobuf:"varint,16,opt,name=placement,enum=BidRequest_Video_Placement,def=0" json:"placement,omitempty"`
	// The URL of the page that the publisher gives Google to describe the video
	// content, with parameters removed.
	DescriptionUrl *string `protobuf:"bytes,10,opt,name=description_url,json=descriptionUrl" json:"description_url,omitempty"`
	// If true, the video is embedded on a page outside the publisher's domain.
	// When this is set, description_url points to a description of the video
	// (as it always does), and the url field in BidRequest is the page in which
	// the video is embedded. For example, a request for an in-stream ad in a
	// Vimeo video shared on Facebook has is_embedded_offsite set. The url field
	// is for a Facebook page and the description_url points to the video on
	// Vimeo.
	IsEmbeddedOffsite *bool                                 `protobuf:"varint,11,opt,name=is_embedded_offsite,json=isEmbeddedOffsite,def=0" json:"is_embedded_offsite,omitempty"`
	PlaybackMethod    *BidRequest_Video_VideoPlaybackMethod `protobuf:"varint,14,opt,name=playback_method,json=playbackMethod,enum=BidRequest_Video_VideoPlaybackMethod,def=0" json:"playback_method,omitempty"`
	// Whether the inventory allows clicking on the video ad to take the user to
	// an advertiser site. Some platforms, notably connected TVs, do not
	// support clicking on video ads, in which case this field is set to false.
	IsClickable *bool `protobuf:"varint,15,opt,name=is_clickable,json=isClickable" json:"is_clickable,omitempty"`
	// The time in milliseconds from the start of the video when the ad will be
	// displayed. 0 means pre-roll and -1 means post-roll. The value is valid
	// only if this param is set. When not set, the display position is unknown.
	VideoadStartDelay *int32 `protobuf:"varint,1,opt,name=videoad_start_delay,json=videoadStartDelay" json:"videoad_start_delay,omitempty"`
	// The maximum duration in milliseconds of the ad that you should return.
	// If this is not set or has value <= 0, any duration is allowed.
	MaxAdDuration *int32 `protobuf:"varint,2,opt,name=max_ad_duration,json=maxAdDuration" json:"max_ad_duration,omitempty"`
	// The minimum duration in milliseconds of the ad that you should return.
	// If this is not set or has value <= 0, there is no minimum duration.
	MinAdDuration *int32 `protobuf:"varint,8,opt,name=min_ad_duration,json=minAdDuration" json:"min_ad_duration,omitempty"`
	// The maximum number of ads in an Adx video pod. A non-zero value indicates
	// that the current ad slot is a video pod that can show multiple video
	// ads. Actual number of video ads shown can be less than or equal to this
	// value but cannot exceed it.
	MaxAdsInPod      *int32                                    `protobuf:"varint,12,opt,name=max_ads_in_pod,json=maxAdsInPod" json:"max_ads_in_pod,omitempty"`
	VideoAdSkippable *BidRequest_Video_SkippableBidRequestType `protobuf:"varint,4,opt,name=video_ad_skippable,json=videoAdSkippable,enum=BidRequest_Video_SkippableBidRequestType,def=0" json:"video_ad_skippable,omitempty"`
	// The maximum duration in milliseconds for the ad you should return, if
	// this ad is skippable (this generally differs from the maximum duration
	// allowed for non-skippable ads). If this is not set or has value <= 0, any
	// duration is allowed.
	SkippableMaxAdDuration *int32 `protobuf:"varint,5,opt,name=skippable_max_ad_duration,json=skippableMaxAdDuration" json:"skippable_max_ad_duration,omitempty"`
	// Array of supported video bid response protocols.
	Protocols           []BidRequest_Video_VideoProtocol    `protobuf:"varint,17,rep,packed,name=protocols,enum=BidRequest_Video_VideoProtocol" json:"protocols,omitempty"`
	AllowedVideoFormats []BidRequest_Video_VideoFormat      `protobuf:"varint,6,rep,name=allowed_video_formats,json=allowedVideoFormats,enum=BidRequest_Video_VideoFormat" json:"allowed_video_formats,omitempty"`
	CompanionSlot       []*BidRequest_Video_CompanionSlot   `protobuf:"bytes,7,rep,name=companion_slot,json=companionSlot" json:"companion_slot,omitempty"`
	EndCapSupport       *BidRequest_Video_EndCapSupport     `protobuf:"varint,13,opt,name=end_cap_support,json=endCapSupport,enum=BidRequest_Video_EndCapSupport,def=0" json:"end_cap_support,omitempty"`
	ContentAttributes   *BidRequest_Video_ContentAttributes `protobuf:"bytes,9,opt,name=content_attributes,json=contentAttributes" json:"content_attributes,omitempty"`
	// Identify whether or not the ad request is being served from a live video
	// stream (0 = is not live, 1 = is live).
	//
	IsLivestream *bool `protobuf:"varint,18,opt,name=is_livestream,json=isLivestream,def=0" json:"is_livestream,omitempty"`
}

// Default values for BidRequest_Video fields.
const (
	Default_BidRequest_Video_Placement         = BidRequest_Video_UNKNOWN_PLACEMENT
	Default_BidRequest_Video_IsEmbeddedOffsite = bool(false)
	Default_BidRequest_Video_PlaybackMethod    = BidRequest_Video_METHOD_UNKNOWN
	Default_BidRequest_Video_VideoAdSkippable  = BidRequest_Video_ALLOW_SKIPPABLE
	Default_BidRequest_Video_EndCapSupport     = BidRequest_Video_END_CAP_NOT_ENABLED
	Default_BidRequest_Video_IsLivestream      = bool(false)
)

func (x *BidRequest_Video) Reset() {
	*x = BidRequest_Video{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Video) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Video) ProtoMessage() {}

func (x *BidRequest_Video) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Video.ProtoReflect.Descriptor instead.
func (*BidRequest_Video) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 10}
}

func (x *BidRequest_Video) GetPlacement() BidRequest_Video_Placement {
	if x != nil && x.Placement != nil {
		return *x.Placement
	}
	return Default_BidRequest_Video_Placement
}

func (x *BidRequest_Video) GetDescriptionUrl() string {
	if x != nil && x.DescriptionUrl != nil {
		return *x.DescriptionUrl
	}
	return ""
}

func (x *BidRequest_Video) GetIsEmbeddedOffsite() bool {
	if x != nil && x.IsEmbeddedOffsite != nil {
		return *x.IsEmbeddedOffsite
	}
	return Default_BidRequest_Video_IsEmbeddedOffsite
}

func (x *BidRequest_Video) GetPlaybackMethod() BidRequest_Video_VideoPlaybackMethod {
	if x != nil && x.PlaybackMethod != nil {
		return *x.PlaybackMethod
	}
	return Default_BidRequest_Video_PlaybackMethod
}

func (x *BidRequest_Video) GetIsClickable() bool {
	if x != nil && x.IsClickable != nil {
		return *x.IsClickable
	}
	return false
}

func (x *BidRequest_Video) GetVideoadStartDelay() int32 {
	if x != nil && x.VideoadStartDelay != nil {
		return *x.VideoadStartDelay
	}
	return 0
}

func (x *BidRequest_Video) GetMaxAdDuration() int32 {
	if x != nil && x.MaxAdDuration != nil {
		return *x.MaxAdDuration
	}
	return 0
}

func (x *BidRequest_Video) GetMinAdDuration() int32 {
	if x != nil && x.MinAdDuration != nil {
		return *x.MinAdDuration
	}
	return 0
}

func (x *BidRequest_Video) GetMaxAdsInPod() int32 {
	if x != nil && x.MaxAdsInPod != nil {
		return *x.MaxAdsInPod
	}
	return 0
}

func (x *BidRequest_Video) GetVideoAdSkippable() BidRequest_Video_SkippableBidRequestType {
	if x != nil && x.VideoAdSkippable != nil {
		return *x.VideoAdSkippable
	}
	return Default_BidRequest_Video_VideoAdSkippable
}

func (x *BidRequest_Video) GetSkippableMaxAdDuration() int32 {
	if x != nil && x.SkippableMaxAdDuration != nil {
		return *x.SkippableMaxAdDuration
	}
	return 0
}

func (x *BidRequest_Video) GetProtocols() []BidRequest_Video_VideoProtocol {
	if x != nil {
		return x.Protocols
	}
	return nil
}

func (x *BidRequest_Video) GetAllowedVideoFormats() []BidRequest_Video_VideoFormat {
	if x != nil {
		return x.AllowedVideoFormats
	}
	return nil
}

func (x *BidRequest_Video) GetCompanionSlot() []*BidRequest_Video_CompanionSlot {
	if x != nil {
		return x.CompanionSlot
	}
	return nil
}

func (x *BidRequest_Video) GetEndCapSupport() BidRequest_Video_EndCapSupport {
	if x != nil && x.EndCapSupport != nil {
		return *x.EndCapSupport
	}
	return Default_BidRequest_Video_EndCapSupport
}

func (x *BidRequest_Video) GetContentAttributes() *BidRequest_Video_ContentAttributes {
	if x != nil {
		return x.ContentAttributes
	}
	return nil
}

func (x *BidRequest_Video) GetIsLivestream() bool {
	if x != nil && x.IsLivestream != nil {
		return *x.IsLivestream
	}
	return Default_BidRequest_Video_IsLivestream
}

// -----------------------------------------------------------
// Information about the adslots on the page.
type BidRequest_AdSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An arbitrarily assigned slot id that is unique on a given page and
	// usually starts counting from 1. You use this to identify which slot to
	// bid on in the BidResponse.
	Id *int32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// A stable identifier for the combination of publisher, ad slot, and page.
	AdBlockKey *uint64 `protobuf:"varint,14,opt,name=ad_block_key,json=adBlockKey" json:"ad_block_key,omitempty"`
	// Set of channels of which this ad slot is a member. A channel is a set of
	// ad slots on a site. You can target a channel (like "the sports section",
	// or "all top banners") to get more fine-grained control over where your ad
	// shows. Channel names are provided by the publisher.
	TargetableChannel []string `protobuf:"bytes,10,rep,name=targetable_channel,json=targetableChannel" json:"targetable_channel,omitempty"`
	// The width and height in pixels of the allowed ad sizes. Most requests
	// allow only a single size, but some allow more than one. Widths and
	// heights are at the same index. For example, if the width values are
	// [728, 300, 468] and the height values are [90, 250, 60], then the allowed
	// formats are 728x90, 300x250, and 468x60.
	//
	// For VAST video ad requests a single width/height pair specifies the
	// Google-detected video player size. If Google cannot detect the player
	// size the publisher-provided player size, if available, is used. For
	// VAST video ads, this size is informational; there is no restriction on
	// the size of the video ad that you can return.
	//
	// For mobile interstitial ads (including ones where video ads are eligible)
	// the first width height pair is the slot size (this is also the video
	// player size for VAST video ads). For many interstitials, this is the
	// screen size. Subsequent pairs are recommended interstitial ad sizes that
	// also meet the requirements for this interstitial.
	Width  []int32 `protobuf:"varint,2,rep,name=width" json:"width,omitempty"`
	Height []int32 `protobuf:"varint,3,rep,name=height" json:"height,omitempty"`
	// If the adslot is flexible, this contains settings on how the slot
	// may be resized.
	FlexibleAdslotSettings *BidRequest_AdSlot_FlexibleAdSlotSettings `protobuf:"bytes,50,opt,name=flexible_adslot_settings,json=flexibleAdslotSettings" json:"flexible_adslot_settings,omitempty"`
	// The disallowed attribute ids for the ads that can show in this slot. See
	// the publisher-excludable-creative-attributes.txt file in the technical
	// documentation for a list of ids.
	ExcludedAttribute []int32 `protobuf:"varint,4,rep,packed,name=excluded_attribute,json=excludedAttribute" json:"excluded_attribute,omitempty"`
	// The allowed vendor types. See the vendors.txt file in the technical
	// documentation for a list of ids. This field does not apply to deals with
	// block overrides (see
	// https://support.google.com/authorizedbuyers/answer/6114194).
	AllowedVendorType []int32 `protobuf:"varint,6,rep,packed,name=allowed_vendor_type,json=allowedVendorType" json:"allowed_vendor_type,omitempty"`
	// Information about the ad tech providers for whom the publisher has
	// specified to Google that its EEA user has consented to the use of their
	// personal data for ads personalization in accordance with Google's EU User
	// Consent Policy. This field will only be populated when regs_gdpr is true.
	ConsentedProvidersSettings *BidRequest_AdSlot_ConsentedProvidersSettings `protobuf:"bytes,42,opt,name=consented_providers_settings,json=consentedProvidersSettings" json:"consented_providers_settings,omitempty"`
	// This field will be set to true in either of the two following cases:
	//   1. Google receives a valid IAB Transparency and Consent Framework (TCF)
	//      v2 consent string and the Consent Management Platform indicates that
	//      GDPR applies to this ad request.
	//   2. Google does not receive an IAB TCF v2 consent string and, based on
	//      information available to Google, this impression will serve to an
	//      EEA user.
	// It does not constitute legal guidance on GDPR. This field is equivalent
	// to Regs.ext.gdpr in Google OpenRTB.
	RegsGdpr *bool `protobuf:"varint,43,opt,name=regs_gdpr,json=regsGdpr" json:"regs_gdpr,omitempty"`
	// This field will be set to true when, based on information available to
	// Google, this impression will serve to a user in Brazil. See
	// https://storage.googleapis.com/adx-rtb-dictionaries/lgpd-providers.csv
	// for the list of ad tech providers that are allowed to
	// serve on LGPD-enforced requests.
	//
	// See https://support.google.com/authorizedbuyers/answer/9928204 for more
	// information on LGPD.
	RegsLgpd *bool `protobuf:"varint,54,opt,name=regs_lgpd,json=regsLgpd" json:"regs_lgpd,omitempty"`
	// The disallowed sensitive ad categories. See the
	// ad-sensitive-categories.txt file in the technical documentation for a
	// list of ids. You should enforce these exclusions if you have the ability
	// to classify ads into the listed categories. This field does not apply to
	// deals with block overrides (see
	// https://support.google.com/authorizedbuyers/answer/6114194).
	ExcludedSensitiveCategory []int32 `protobuf:"varint,7,rep,packed,name=excluded_sensitive_category,json=excludedSensitiveCategory" json:"excluded_sensitive_category,omitempty"`
	// The allowed restricted ad categories for private and open auctions. See
	// the ad-restricted-categories.txt file in the technical documentation for
	// a list of ids. These only apply for private and open auction bids. See
	// the allowed_restricted_category_for_deals field for preferred deals or
	// programmatic guarantees. If you bid with an ad in a restricted category,
	// you MUST ALWAYS declare the category in the bid response regardless of
	// the values in this field.
	AllowedRestrictedCategory []int32 `protobuf:"varint,16,rep,packed,name=allowed_restricted_category,json=allowedRestrictedCategory" json:"allowed_restricted_category,omitempty"`
	// The allowed restricted ad categories for preferred deals or programmatic
	// guarantees. See the ad-restricted-categories.txt file in the technical
	// documentation for a list of ids. These only apply for preferred deals or
	// programmatic guarantees. See the allowed_restricted_category field for
	// private and open auctions. In some cases, restricted categories are only
	// allowed on preferred deals or programmatic guarantees, so this field
	// lists all categories in allowed_restricted_category, and additionally,
	// restricted categories that are only allowed for preferred deals or
	// programmatic guarantees. If you bid with an ad in a restricted category,
	// you MUST ALWAYS declare the category in the bid response regardless of
	// the values in this field.
	AllowedRestrictedCategoryForDeals []int32 `protobuf:"varint,22,rep,packed,name=allowed_restricted_category_for_deals,json=allowedRestrictedCategoryForDeals" json:"allowed_restricted_category_for_deals,omitempty"`
	// List of creative languages allowed by the publisher. The order is
	// arbitrary. The codes are 2 or 5 characters and are documented at
	// https://developers.google.com/google-ads/api/reference/data/codes-formats#languages.
	// When not set, all languages are allowed.
	AllowedLanguages []string `protobuf:"bytes,27,rep,name=allowed_languages,json=allowedLanguages" json:"allowed_languages,omitempty"`
	// The disallowed ad product categories. See the ad-product-categories.txt
	// file in the technical documentation for a list of ids. You should enforce
	// these exclusions if you have the ability to classify ads into the listed
	// categories. This field does not apply to deals with block overrides (see
	// https://support.google.com/authorizedbuyers/answer/6114194).
	ExcludedProductCategory []int32 `protobuf:"varint,13,rep,packed,name=excluded_product_category,json=excludedProductCategory" json:"excluded_product_category,omitempty"`
	// Creatives that are disallowed for the impression. Submitting a bid with
	// one of the creatives in this list will result in such bid being filtered
	// before the auction. Please contact your account manager if you would like
	// to enable this feature.
	ExcludedCreatives []*BidRequest_AdSlot_ExcludedCreative `protobuf:"bytes,18,rep,name=excluded_creatives,json=excludedCreatives" json:"excluded_creatives,omitempty"`
	// Whether the adslot is only eligible for deals bids. Bids for the open
	// auction will be filtered when this field is set to true. Bidders can bid
	// on the open auction or deals when this field is set to false.
	OnlyDealBidsAccepted *bool                               `protobuf:"varint,49,opt,name=only_deal_bids_accepted,json=onlyDealBidsAccepted" json:"only_deal_bids_accepted,omitempty"`
	MatchingAdData       []*BidRequest_AdSlot_MatchingAdData `protobuf:"bytes,9,rep,name=matching_ad_data,json=matchingAdData" json:"matching_ad_data,omitempty"`
	// The publisher settings list ids that apply to this slot. See the RTB
	// Publisher Settings guide at
	// https://developers.google.com/authorized-buyers/rtb/pub-settings-guide
	// for details.
	PublisherSettingsListId     []uint64                                       `protobuf:"fixed64,15,rep,name=publisher_settings_list_id,json=publisherSettingsListId" json:"publisher_settings_list_id,omitempty"`
	ExchangeBidding             *BidRequest_AdSlot_ExchangeBidding             `protobuf:"bytes,28,opt,name=exchange_bidding,json=exchangeBidding" json:"exchange_bidding,omitempty"`
	OpenBidding                 *BidRequest_AdSlot_OpenBidding                 `protobuf:"bytes,53,opt,name=open_bidding,json=openBidding" json:"open_bidding,omitempty"`
	CreativeEnforcementSettings *BidRequest_AdSlot_CreativeEnforcementSettings `protobuf:"bytes,58,opt,name=creative_enforcement_settings,json=creativeEnforcementSettings" json:"creative_enforcement_settings,omitempty"`
	// The ad unit code (https://support.google.com/admanager/topic/4426071)
	// This is currently only set for exchange bidding requests.
	DfpAdUnitCode  *string                           `protobuf:"bytes,33,opt,name=dfp_ad_unit_code,json=dfpAdUnitCode" json:"dfp_ad_unit_code,omitempty"`
	SlotVisibility *BidRequest_AdSlot_SlotVisibility `protobuf:"varint,12,opt,name=slot_visibility,json=slotVisibility,enum=BidRequest_AdSlot_SlotVisibility,def=0" json:"slot_visibility,omitempty"`
	// Viewability percentage for the ad slot. This is an estimate of the
	// likelihood that this slot will be viewable by the end user based on
	// historical and environment data. It is expressed as a percentage in the
	// range of [0, 100]. The default value -1 indicates that viewability could
	// not be estimated.
	Viewability *int32 `protobuf:"varint,21,opt,name=viewability,def=-1" json:"viewability,omitempty"`
	// Historical click-through rate for ads served in the ad slot. This is
	// expressed as a fraction in the range [0.0, 1.0]. The default value of
	// -1.0 indicates that historical click-through rate data is not available.
	// This figure does not include data aggregated from Google Ads.
	ClickThroughRate *float32 `protobuf:"fixed32,25,opt,name=click_through_rate,json=clickThroughRate,def=-1" json:"click_through_rate,omitempty"`
	// Historical completion rate for video ads served in the ad slot. This is
	// expressed as a fraction in the range [0.0, 1.0]. The default value of
	// -1.0 indicates that historical completion rate data is not available.
	// This field is only applicable to video inventory, and does not include
	// data aggregated from Google Ads.
	VideoCompletionRate *float32                               `protobuf:"fixed32,30,opt,name=video_completion_rate,json=videoCompletionRate,def=-1" json:"video_completion_rate,omitempty"`
	IframingState       *BidRequest_AdSlot_IFramingState       `protobuf:"varint,19,opt,name=iframing_state,json=iframingState,enum=BidRequest_AdSlot_IFramingState,def=0" json:"iframing_state,omitempty"`
	IframingDepth       *BidRequest_AdSlot_IFramingDepth       `protobuf:"varint,20,opt,name=iframing_depth,json=iframingDepth,enum=BidRequest_AdSlot_IFramingDepth,def=0" json:"iframing_depth,omitempty"`
	NativeAdTemplate    []*BidRequest_AdSlot_NativeAdTemplate  `protobuf:"bytes,51,rep,name=native_ad_template,json=nativeAdTemplate" json:"native_ad_template,omitempty"`
	NativePlacementType *BidRequest_AdSlot_NativePlacementType `protobuf:"varint,45,opt,name=native_placement_type,json=nativePlacementType,enum=BidRequest_AdSlot_NativePlacementType,def=0" json:"native_placement_type,omitempty"`
	MediationStatus     *BidRequest_AdSlot_MediationStatus     `protobuf:"varint,52,opt,name=mediation_status,json=mediationStatus,enum=BidRequest_AdSlot_MediationStatus,def=0" json:"mediation_status,omitempty"`
	AutoRefresh         *BidRequest_AdSlot_AutoRefresh         `protobuf:"bytes,23,opt,name=auto_refresh,json=autoRefresh" json:"auto_refresh,omitempty"`
	StickySettings      *BidRequest_AdSlot_StickySettings      `protobuf:"bytes,31,opt,name=sticky_settings,json=stickySettings" json:"sticky_settings,omitempty"`
	// Publisher declaration stating that this ad slot may serve on
	// non-browser inventory, like desktop apps.
	NonBrowserSlotSource *BidRequest_AdSlot_NonBrowserSource     `protobuf:"varint,34,opt,name=non_browser_slot_source,json=nonBrowserSlotSource,enum=BidRequest_AdSlot_NonBrowserSource,def=0" json:"non_browser_slot_source,omitempty"`
	Renderer             *BidRequest_AdSlot_Renderer             `protobuf:"varint,26,opt,name=renderer,enum=BidRequest_AdSlot_Renderer,def=0" json:"renderer,omitempty"`
	AmpAdRequestType     *BidRequest_AdSlot_AmpAdRequestType     `protobuf:"varint,29,opt,name=amp_ad_request_type,json=ampAdRequestType,enum=BidRequest_AdSlot_AmpAdRequestType,def=1" json:"amp_ad_request_type,omitempty"`
	IsAmpPage            *BidRequest_AdSlot_AmpPage              `protobuf:"varint,38,opt,name=is_amp_page,json=isAmpPage,enum=BidRequest_AdSlot_AmpPage" json:"is_amp_page,omitempty"`
	AmpAdRequirementType *BidRequest_AdSlot_AmpAdRequirementType `protobuf:"varint,39,opt,name=amp_ad_requirement_type,json=ampAdRequirementType,enum=BidRequest_AdSlot_AmpAdRequirementType" json:"amp_ad_requirement_type,omitempty"`
	// Whether the user receives a reward for viewing the ad. For video ads,
	// typical implementations allow users to read an additional news article
	// for free, receive an extra life in a game, or get a sponsored ad-free
	// music session. The reward is typically distributed after the video ad is
	// completed.
	IsRewarded     *bool                             `protobuf:"varint,32,opt,name=is_rewarded,json=isRewarded,def=0" json:"is_rewarded,omitempty"`
	AllowedAdTypes []BidRequest_AdSlot_AllowedAdType `protobuf:"varint,36,rep,packed,name=allowed_ad_types,json=allowedAdTypes,enum=BidRequest_AdSlot_AllowedAdType" json:"allowed_ad_types,omitempty"`
	// Total number of impressions served to this user (within this specific
	// site or app) in this browsing session, plus 1. A session ends after 30
	// minutes inactivity. The default value of -1 indicates that the session
	// depth cannot be estimated.
	SessionDepth              *int32                                         `protobuf:"varint,40,opt,name=session_depth,json=sessionDepth,def=-1" json:"session_depth,omitempty"`
	BuyerGeneratedRequestData []*BidRequest_AdSlot_BuyerGeneratedRequestData `protobuf:"bytes,41,rep,name=buyer_generated_request_data,json=buyerGeneratedRequestData" json:"buyer_generated_request_data,omitempty"`
	// List of supported API frameworks for this impression.
	Api []BidRequest_AdSlot_APIFramework `protobuf:"varint,46,rep,packed,name=api,enum=BidRequest_AdSlot_APIFramework" json:"api,omitempty"`
	// For ads rendered using a custom SDK only: multiplier applied to bid in
	// the auction. The adjustment reflects the likelihood that your bid would
	// generate a billable event (i.e. the ad renders successfully) if it won
	// the auction, relative to the probability that other bids generate a
	// billable event if they won the auction. This adjustment can be larger or
	// smaller than 1. This affects the final ranking in the auction only; in
	// particular, this multiplier does not affect the payment.
	BillableEventRateAdjustment *float64                            `protobuf:"fixed64,59,opt,name=billable_event_rate_adjustment,json=billableEventRateAdjustment,def=1" json:"billable_event_rate_adjustment,omitempty"`
	MultiAdsCellInfo            *BidRequest_AdSlot_MultiAdsCellInfo `protobuf:"bytes,55,opt,name=multi_ads_cell_info,json=multiAdsCellInfo" json:"multi_ads_cell_info,omitempty"`
	// Identifier of the OM SDK integration. For more info, see the OpenRTB
	// Advisory for Open Measurement SDK:
	// https://github.com/InteractiveAdvertisingBureau/AdCOM/blob/master/OpenRTB%20support%20for%20OMSDK.md#openrtb-and-adcom.
	Omidpn *string `protobuf:"bytes,56,opt,name=omidpn" json:"omidpn,omitempty"`
	// Version of the OM SDK integration. For more info, see the OpenRTB
	// Advisory for Open Measurement SDK:
	// https://github.com/InteractiveAdvertisingBureau/AdCOM/blob/master/OpenRTB%20support%20for%20OMSDK.md#openrtb-and-adcom.
	Omidpv *string `protobuf:"bytes,57,opt,name=omidpv" json:"omidpv,omitempty"`
	// Specifies where the ad auction runs.
	AuctionEnvironment *BidRequest_AdSlot_AuctionEnvironment `protobuf:"varint,61,opt,name=auction_environment,json=auctionEnvironment,enum=BidRequest_AdSlot_AuctionEnvironment,def=0" json:"auction_environment,omitempty"`
}

// Default values for BidRequest_AdSlot fields.
const (
	Default_BidRequest_AdSlot_SlotVisibility              = BidRequest_AdSlot_NO_DETECTION
	Default_BidRequest_AdSlot_Viewability                 = int32(-1)
	Default_BidRequest_AdSlot_ClickThroughRate            = float32(-1)
	Default_BidRequest_AdSlot_VideoCompletionRate         = float32(-1)
	Default_BidRequest_AdSlot_IframingState               = BidRequest_AdSlot_UNKNOWN_IFRAME_STATE
	Default_BidRequest_AdSlot_IframingDepth               = BidRequest_AdSlot_UNKNOWN_IFRAME_DEPTH
	Default_BidRequest_AdSlot_NativePlacementType         = BidRequest_AdSlot_PLACEMENT_UNKNOWN
	Default_BidRequest_AdSlot_MediationStatus             = BidRequest_AdSlot_UNKNOWN
	Default_BidRequest_AdSlot_NonBrowserSlotSource        = BidRequest_AdSlot_UNDECLARED_SOURCE
	Default_BidRequest_AdSlot_Renderer                    = BidRequest_AdSlot_UNKNOWN_RENDERER
	Default_BidRequest_AdSlot_AmpAdRequestType            = BidRequest_AdSlot_NON_AMP_PAGE
	Default_BidRequest_AdSlot_IsRewarded                  = bool(false)
	Default_BidRequest_AdSlot_SessionDepth                = int32(-1)
	Default_BidRequest_AdSlot_BillableEventRateAdjustment = float64(1)
	Default_BidRequest_AdSlot_AuctionEnvironment          = BidRequest_AdSlot_SERVER_SIDE_AUCTION
)

func (x *BidRequest_AdSlot) Reset() {
	*x = BidRequest_AdSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_AdSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_AdSlot) ProtoMessage() {}

func (x *BidRequest_AdSlot) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_AdSlot.ProtoReflect.Descriptor instead.
func (*BidRequest_AdSlot) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11}
}

func (x *BidRequest_AdSlot) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *BidRequest_AdSlot) GetAdBlockKey() uint64 {
	if x != nil && x.AdBlockKey != nil {
		return *x.AdBlockKey
	}
	return 0
}

func (x *BidRequest_AdSlot) GetTargetableChannel() []string {
	if x != nil {
		return x.TargetableChannel
	}
	return nil
}

func (x *BidRequest_AdSlot) GetWidth() []int32 {
	if x != nil {
		return x.Width
	}
	return nil
}

func (x *BidRequest_AdSlot) GetHeight() []int32 {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *BidRequest_AdSlot) GetFlexibleAdslotSettings() *BidRequest_AdSlot_FlexibleAdSlotSettings {
	if x != nil {
		return x.FlexibleAdslotSettings
	}
	return nil
}

func (x *BidRequest_AdSlot) GetExcludedAttribute() []int32 {
	if x != nil {
		return x.ExcludedAttribute
	}
	return nil
}

func (x *BidRequest_AdSlot) GetAllowedVendorType() []int32 {
	if x != nil {
		return x.AllowedVendorType
	}
	return nil
}

func (x *BidRequest_AdSlot) GetConsentedProvidersSettings() *BidRequest_AdSlot_ConsentedProvidersSettings {
	if x != nil {
		return x.ConsentedProvidersSettings
	}
	return nil
}

func (x *BidRequest_AdSlot) GetRegsGdpr() bool {
	if x != nil && x.RegsGdpr != nil {
		return *x.RegsGdpr
	}
	return false
}

func (x *BidRequest_AdSlot) GetRegsLgpd() bool {
	if x != nil && x.RegsLgpd != nil {
		return *x.RegsLgpd
	}
	return false
}

func (x *BidRequest_AdSlot) GetExcludedSensitiveCategory() []int32 {
	if x != nil {
		return x.ExcludedSensitiveCategory
	}
	return nil
}

func (x *BidRequest_AdSlot) GetAllowedRestrictedCategory() []int32 {
	if x != nil {
		return x.AllowedRestrictedCategory
	}
	return nil
}

func (x *BidRequest_AdSlot) GetAllowedRestrictedCategoryForDeals() []int32 {
	if x != nil {
		return x.AllowedRestrictedCategoryForDeals
	}
	return nil
}

func (x *BidRequest_AdSlot) GetAllowedLanguages() []string {
	if x != nil {
		return x.AllowedLanguages
	}
	return nil
}

func (x *BidRequest_AdSlot) GetExcludedProductCategory() []int32 {
	if x != nil {
		return x.ExcludedProductCategory
	}
	return nil
}

func (x *BidRequest_AdSlot) GetExcludedCreatives() []*BidRequest_AdSlot_ExcludedCreative {
	if x != nil {
		return x.ExcludedCreatives
	}
	return nil
}

func (x *BidRequest_AdSlot) GetOnlyDealBidsAccepted() bool {
	if x != nil && x.OnlyDealBidsAccepted != nil {
		return *x.OnlyDealBidsAccepted
	}
	return false
}

func (x *BidRequest_AdSlot) GetMatchingAdData() []*BidRequest_AdSlot_MatchingAdData {
	if x != nil {
		return x.MatchingAdData
	}
	return nil
}

func (x *BidRequest_AdSlot) GetPublisherSettingsListId() []uint64 {
	if x != nil {
		return x.PublisherSettingsListId
	}
	return nil
}

func (x *BidRequest_AdSlot) GetExchangeBidding() *BidRequest_AdSlot_ExchangeBidding {
	if x != nil {
		return x.ExchangeBidding
	}
	return nil
}

func (x *BidRequest_AdSlot) GetOpenBidding() *BidRequest_AdSlot_OpenBidding {
	if x != nil {
		return x.OpenBidding
	}
	return nil
}

func (x *BidRequest_AdSlot) GetCreativeEnforcementSettings() *BidRequest_AdSlot_CreativeEnforcementSettings {
	if x != nil {
		return x.CreativeEnforcementSettings
	}
	return nil
}

func (x *BidRequest_AdSlot) GetDfpAdUnitCode() string {
	if x != nil && x.DfpAdUnitCode != nil {
		return *x.DfpAdUnitCode
	}
	return ""
}

func (x *BidRequest_AdSlot) GetSlotVisibility() BidRequest_AdSlot_SlotVisibility {
	if x != nil && x.SlotVisibility != nil {
		return *x.SlotVisibility
	}
	return Default_BidRequest_AdSlot_SlotVisibility
}

func (x *BidRequest_AdSlot) GetViewability() int32 {
	if x != nil && x.Viewability != nil {
		return *x.Viewability
	}
	return Default_BidRequest_AdSlot_Viewability
}

func (x *BidRequest_AdSlot) GetClickThroughRate() float32 {
	if x != nil && x.ClickThroughRate != nil {
		return *x.ClickThroughRate
	}
	return Default_BidRequest_AdSlot_ClickThroughRate
}

func (x *BidRequest_AdSlot) GetVideoCompletionRate() float32 {
	if x != nil && x.VideoCompletionRate != nil {
		return *x.VideoCompletionRate
	}
	return Default_BidRequest_AdSlot_VideoCompletionRate
}

func (x *BidRequest_AdSlot) GetIframingState() BidRequest_AdSlot_IFramingState {
	if x != nil && x.IframingState != nil {
		return *x.IframingState
	}
	return Default_BidRequest_AdSlot_IframingState
}

func (x *BidRequest_AdSlot) GetIframingDepth() BidRequest_AdSlot_IFramingDepth {
	if x != nil && x.IframingDepth != nil {
		return *x.IframingDepth
	}
	return Default_BidRequest_AdSlot_IframingDepth
}

func (x *BidRequest_AdSlot) GetNativeAdTemplate() []*BidRequest_AdSlot_NativeAdTemplate {
	if x != nil {
		return x.NativeAdTemplate
	}
	return nil
}

func (x *BidRequest_AdSlot) GetNativePlacementType() BidRequest_AdSlot_NativePlacementType {
	if x != nil && x.NativePlacementType != nil {
		return *x.NativePlacementType
	}
	return Default_BidRequest_AdSlot_NativePlacementType
}

func (x *BidRequest_AdSlot) GetMediationStatus() BidRequest_AdSlot_MediationStatus {
	if x != nil && x.MediationStatus != nil {
		return *x.MediationStatus
	}
	return Default_BidRequest_AdSlot_MediationStatus
}

func (x *BidRequest_AdSlot) GetAutoRefresh() *BidRequest_AdSlot_AutoRefresh {
	if x != nil {
		return x.AutoRefresh
	}
	return nil
}

func (x *BidRequest_AdSlot) GetStickySettings() *BidRequest_AdSlot_StickySettings {
	if x != nil {
		return x.StickySettings
	}
	return nil
}

func (x *BidRequest_AdSlot) GetNonBrowserSlotSource() BidRequest_AdSlot_NonBrowserSource {
	if x != nil && x.NonBrowserSlotSource != nil {
		return *x.NonBrowserSlotSource
	}
	return Default_BidRequest_AdSlot_NonBrowserSlotSource
}

func (x *BidRequest_AdSlot) GetRenderer() BidRequest_AdSlot_Renderer {
	if x != nil && x.Renderer != nil {
		return *x.Renderer
	}
	return Default_BidRequest_AdSlot_Renderer
}

func (x *BidRequest_AdSlot) GetAmpAdRequestType() BidRequest_AdSlot_AmpAdRequestType {
	if x != nil && x.AmpAdRequestType != nil {
		return *x.AmpAdRequestType
	}
	return Default_BidRequest_AdSlot_AmpAdRequestType
}

func (x *BidRequest_AdSlot) GetIsAmpPage() BidRequest_AdSlot_AmpPage {
	if x != nil && x.IsAmpPage != nil {
		return *x.IsAmpPage
	}
	return BidRequest_AdSlot_UNKNOWN_AMP_PAGE
}

func (x *BidRequest_AdSlot) GetAmpAdRequirementType() BidRequest_AdSlot_AmpAdRequirementType {
	if x != nil && x.AmpAdRequirementType != nil {
		return *x.AmpAdRequirementType
	}
	return BidRequest_AdSlot_UNKNOWN_AMP_AD_REQUIREMENT_TYPE
}

func (x *BidRequest_AdSlot) GetIsRewarded() bool {
	if x != nil && x.IsRewarded != nil {
		return *x.IsRewarded
	}
	return Default_BidRequest_AdSlot_IsRewarded
}

func (x *BidRequest_AdSlot) GetAllowedAdTypes() []BidRequest_AdSlot_AllowedAdType {
	if x != nil {
		return x.AllowedAdTypes
	}
	return nil
}

func (x *BidRequest_AdSlot) GetSessionDepth() int32 {
	if x != nil && x.SessionDepth != nil {
		return *x.SessionDepth
	}
	return Default_BidRequest_AdSlot_SessionDepth
}

func (x *BidRequest_AdSlot) GetBuyerGeneratedRequestData() []*BidRequest_AdSlot_BuyerGeneratedRequestData {
	if x != nil {
		return x.BuyerGeneratedRequestData
	}
	return nil
}

func (x *BidRequest_AdSlot) GetApi() []BidRequest_AdSlot_APIFramework {
	if x != nil {
		return x.Api
	}
	return nil
}

func (x *BidRequest_AdSlot) GetBillableEventRateAdjustment() float64 {
	if x != nil && x.BillableEventRateAdjustment != nil {
		return *x.BillableEventRateAdjustment
	}
	return Default_BidRequest_AdSlot_BillableEventRateAdjustment
}

func (x *BidRequest_AdSlot) GetMultiAdsCellInfo() *BidRequest_AdSlot_MultiAdsCellInfo {
	if x != nil {
		return x.MultiAdsCellInfo
	}
	return nil
}

func (x *BidRequest_AdSlot) GetOmidpn() string {
	if x != nil && x.Omidpn != nil {
		return *x.Omidpn
	}
	return ""
}

func (x *BidRequest_AdSlot) GetOmidpv() string {
	if x != nil && x.Omidpv != nil {
		return *x.Omidpv
	}
	return ""
}

func (x *BidRequest_AdSlot) GetAuctionEnvironment() BidRequest_AdSlot_AuctionEnvironment {
	if x != nil && x.AuctionEnvironment != nil {
		return *x.AuctionEnvironment
	}
	return Default_BidRequest_AdSlot_AuctionEnvironment
}

// Feedback on bids submitted in x. This is only set if
// real-time feedback is enabled for your bidder. Please contact your account
// manager if you wish to enable real-time feedback.
//
type BidRequest_BidResponseFeedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique id from BidRequest.id
	RequestId []byte `protobuf:"bytes,1,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	// The index of the BidResponse_Ad if there was more than one. The index
	// starts at zero for the first creative.
	CreativeIndex *int32 `protobuf:"varint,2,opt,name=creative_index,json=creativeIndex" json:"creative_index,omitempty"`
	// The status code for the ad. See creative-status-codes.txt in the
	// technical documentation for a list of ids.
	CreativeStatusCode *int32 `protobuf:"varint,3,opt,name=creative_status_code,json=creativeStatusCode" json:"creative_status_code,omitempty"`
	// If the bid won the auction, this is the price paid in your account
	// currency. If the bid participated in the auction but was out-bid, this
	// is the CPM that should have been exceeded in order to win. This is not
	// set if the bid was filtered prior to the auction, if the publisher or
	// winning bidder has opted out of price feedback or if your account has
	// opted out of sharing winning prices with other bidders. For first-price
	// auctions, minimum_bid_to_win is populated instead of this field.
	CpmMicros *int64 `protobuf:"varint,4,opt,name=cpm_micros,json=cpmMicros" json:"cpm_micros,omitempty"`
	// The minimum bid value necessary to have won the auction, in micros of
	// your account currency. If your bid won the auction, this is the second
	// highest bid that was not filtered (including the floor price). If your
	// bid did not win the auction, this is the winning candidate's bid. This
	// field will only be populated if your bid participated in a first-price
	// auction, and will not be populated if your bid was filtered prior to the
	// auction.
	MinimumBidToWin *int64 `protobuf:"varint,7,opt,name=minimum_bid_to_win,json=minimumBidToWin" json:"minimum_bid_to_win,omitempty"`
	// When a publisher uses an RTB auction and waterfall-based SDK mediation on
	// the same query, the winner of the real-time auction must also compete in
	// a mediation waterfall (which is ordered by price) to win the impression.
	// If the bid participated in the auction and there was no waterfall, the
	// value of this field is 0. If the bid participated in the auction and
	// there was a waterfall, the value of this field is a price representing a
	// sample bid from the eligible mediation networks that were higher than the
	// auction winner, weighted by expected fill rate. This field can be used
	// in conjunction with minimum_bid_to_win to train bidding models. The CPM
	// is in micros of your account currency.
	SampledMediationCpmAheadOfAuctionWinner *int64 `protobuf:"varint,10,opt,name=sampled_mediation_cpm_ahead_of_auction_winner,json=sampledMediationCpmAheadOfAuctionWinner" json:"sampled_mediation_cpm_ahead_of_auction_winner,omitempty"`
	// Event notification token that was included in the bid response.
	EventNotificationToken []byte `protobuf:"bytes,5,opt,name=event_notification_token,json=eventNotificationToken" json:"event_notification_token,omitempty"`
	// Buyer creative ID that was included in the bid response.
	BuyerCreativeId *string `protobuf:"bytes,6,opt,name=buyer_creative_id,json=buyerCreativeId" json:"buyer_creative_id,omitempty"`
}

func (x *BidRequest_BidResponseFeedback) Reset() {
	*x = BidRequest_BidResponseFeedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_BidResponseFeedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_BidResponseFeedback) ProtoMessage() {}

func (x *BidRequest_BidResponseFeedback) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_BidResponseFeedback.ProtoReflect.Descriptor instead.
func (*BidRequest_BidResponseFeedback) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 12}
}

func (x *BidRequest_BidResponseFeedback) GetRequestId() []byte {
	if x != nil {
		return x.RequestId
	}
	return nil
}

func (x *BidRequest_BidResponseFeedback) GetCreativeIndex() int32 {
	if x != nil && x.CreativeIndex != nil {
		return *x.CreativeIndex
	}
	return 0
}

func (x *BidRequest_BidResponseFeedback) GetCreativeStatusCode() int32 {
	if x != nil && x.CreativeStatusCode != nil {
		return *x.CreativeStatusCode
	}
	return 0
}

func (x *BidRequest_BidResponseFeedback) GetCpmMicros() int64 {
	if x != nil && x.CpmMicros != nil {
		return *x.CpmMicros
	}
	return 0
}

func (x *BidRequest_BidResponseFeedback) GetMinimumBidToWin() int64 {
	if x != nil && x.MinimumBidToWin != nil {
		return *x.MinimumBidToWin
	}
	return 0
}

func (x *BidRequest_BidResponseFeedback) GetSampledMediationCpmAheadOfAuctionWinner() int64 {
	if x != nil && x.SampledMediationCpmAheadOfAuctionWinner != nil {
		return *x.SampledMediationCpmAheadOfAuctionWinner
	}
	return 0
}

func (x *BidRequest_BidResponseFeedback) GetEventNotificationToken() []byte {
	if x != nil {
		return x.EventNotificationToken
	}
	return nil
}

func (x *BidRequest_BidResponseFeedback) GetBuyerCreativeId() string {
	if x != nil && x.BuyerCreativeId != nil {
		return *x.BuyerCreativeId
	}
	return ""
}

// SupplyChain object. For more information, see
// https://github.com/InteractiveAdvertisingBureau/openrtb/blob/master/supplychainobject.md.
type BidRequest_SupplyChain struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Flag indicating whether the chain contains all nodes involved in the
	// transaction leading back to the owner of the site, app or other medium of
	// the inventory.
	Complete *bool `protobuf:"varint,1,opt,name=complete" json:"complete,omitempty"`
	// Array of SupplyChainNode objects in the order of the chain. In a complete
	// supply chain, the first node represents the initial advertising system
	// and seller ID involved in the transaction, i.e. the owner of the site,
	// app, or other medium. In an incomplete supply chain, it represents the
	// first known node. The last node represents the entity sending this bid
	// request.
	Nodes []*BidRequest_SupplyChain_SupplyChainNode `protobuf:"bytes,2,rep,name=nodes" json:"nodes,omitempty"`
	// Version of the supply chain specification in use, in the format of
	// "major.minor". For example, for version 1.0 of the spec, use the string
	// "1.0".
	Version *string `protobuf:"bytes,3,opt,name=version" json:"version,omitempty"`
}

func (x *BidRequest_SupplyChain) Reset() {
	*x = BidRequest_SupplyChain{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_SupplyChain) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_SupplyChain) ProtoMessage() {}

func (x *BidRequest_SupplyChain) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_SupplyChain.ProtoReflect.Descriptor instead.
func (*BidRequest_SupplyChain) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 13}
}

func (x *BidRequest_SupplyChain) GetComplete() bool {
	if x != nil && x.Complete != nil {
		return *x.Complete
	}
	return false
}

func (x *BidRequest_SupplyChain) GetNodes() []*BidRequest_SupplyChain_SupplyChainNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *BidRequest_SupplyChain) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

// Identifies a device's browser or similar software component, and the
// user agent's execution platform or operating system.
type BidRequest_UserAgent_BrandVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A brand identifier, for example, "Chrome" or "Windows". The value may
	// be sourced from the User-Agent Client Hints headers, representing
	// either the user agent brand (from the Sec-CH-UA-Full-Version header)
	// or the platform brand (from the Sec-CH-UA-Platform header).
	Brand *string `protobuf:"bytes,1,opt,name=brand" json:"brand,omitempty"`
	// A sequence of version components, in descending hierarchical order
	// (major, minor, micro, ...).
	Version []string `protobuf:"bytes,2,rep,name=version" json:"version,omitempty"`
}

func (x *BidRequest_UserAgent_BrandVersion) Reset() {
	*x = BidRequest_UserAgent_BrandVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_UserAgent_BrandVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_UserAgent_BrandVersion) ProtoMessage() {}

func (x *BidRequest_UserAgent_BrandVersion) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_UserAgent_BrandVersion.ProtoReflect.Descriptor instead.
func (*BidRequest_UserAgent_BrandVersion) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *BidRequest_UserAgent_BrandVersion) GetBrand() string {
	if x != nil && x.Brand != nil {
		return *x.Brand
	}
	return ""
}

func (x *BidRequest_UserAgent_BrandVersion) GetVersion() []string {
	if x != nil {
		return x.Version
	}
	return nil
}

// A location on the Earth's surface.
//
type BidRequest_Hyperlocal_Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  *float32 `protobuf:"fixed32,1,opt,name=latitude" json:"latitude,omitempty"`
	Longitude *float32 `protobuf:"fixed32,2,opt,name=longitude" json:"longitude,omitempty"`
}

func (x *BidRequest_Hyperlocal_Point) Reset() {
	*x = BidRequest_Hyperlocal_Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Hyperlocal_Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Hyperlocal_Point) ProtoMessage() {}

func (x *BidRequest_Hyperlocal_Point) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Hyperlocal_Point.ProtoReflect.Descriptor instead.
func (*BidRequest_Hyperlocal_Point) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *BidRequest_Hyperlocal_Point) GetLatitude() float32 {
	if x != nil && x.Latitude != nil {
		return *x.Latitude
	}
	return 0
}

func (x *BidRequest_Hyperlocal_Point) GetLongitude() float32 {
	if x != nil && x.Longitude != nil {
		return *x.Longitude
	}
	return 0
}

// Contains the OS version of the platform. For instance, for Android 2,
// major=2, minor=0. For iPhone 3.3.1, major=3 and minor=3.
type BidRequest_Device_OsVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Major *int32 `protobuf:"varint,1,opt,name=major,def=-1" json:"major,omitempty"`
	Minor *int32 `protobuf:"varint,2,opt,name=minor,def=-1" json:"minor,omitempty"`
	Micro *int32 `protobuf:"varint,3,opt,name=micro,def=-1" json:"micro,omitempty"`
}

// Default values for BidRequest_Device_OsVersion fields.
const (
	Default_BidRequest_Device_OsVersion_Major = int32(-1)
	Default_BidRequest_Device_OsVersion_Minor = int32(-1)
	Default_BidRequest_Device_OsVersion_Micro = int32(-1)
)

func (x *BidRequest_Device_OsVersion) Reset() {
	*x = BidRequest_Device_OsVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Device_OsVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Device_OsVersion) ProtoMessage() {}

func (x *BidRequest_Device_OsVersion) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Device_OsVersion.ProtoReflect.Descriptor instead.
func (*BidRequest_Device_OsVersion) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 7, 0}
}

func (x *BidRequest_Device_OsVersion) GetMajor() int32 {
	if x != nil && x.Major != nil {
		return *x.Major
	}
	return Default_BidRequest_Device_OsVersion_Major
}

func (x *BidRequest_Device_OsVersion) GetMinor() int32 {
	if x != nil && x.Minor != nil {
		return *x.Minor
	}
	return Default_BidRequest_Device_OsVersion_Minor
}

func (x *BidRequest_Device_OsVersion) GetMicro() int32 {
	if x != nil && x.Micro != nil {
		return *x.Micro
	}
	return Default_BidRequest_Device_OsVersion_Micro
}

// Identification of and information about an SDK installed in the
// publisher's app that the bidder has access to, often because it's the
// bidder's SDK.
type BidRequest_Mobile_InstalledSdk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier for the installed SDK.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The version of the installed SDK.
	SdkVersion *BidRequest_Mobile_InstalledSdk_Version `protobuf:"bytes,2,opt,name=sdk_version,json=sdkVersion" json:"sdk_version,omitempty"`
	// The version of the adapter that communicates with the installed SDK.
	AdapterVersion *BidRequest_Mobile_InstalledSdk_Version `protobuf:"bytes,3,opt,name=adapter_version,json=adapterVersion" json:"adapter_version,omitempty"`
}

func (x *BidRequest_Mobile_InstalledSdk) Reset() {
	*x = BidRequest_Mobile_InstalledSdk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Mobile_InstalledSdk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Mobile_InstalledSdk) ProtoMessage() {}

func (x *BidRequest_Mobile_InstalledSdk) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Mobile_InstalledSdk.ProtoReflect.Descriptor instead.
func (*BidRequest_Mobile_InstalledSdk) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 9, 0}
}

func (x *BidRequest_Mobile_InstalledSdk) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BidRequest_Mobile_InstalledSdk) GetSdkVersion() *BidRequest_Mobile_InstalledSdk_Version {
	if x != nil {
		return x.SdkVersion
	}
	return nil
}

func (x *BidRequest_Mobile_InstalledSdk) GetAdapterVersion() *BidRequest_Mobile_InstalledSdk_Version {
	if x != nil {
		return x.AdapterVersion
	}
	return nil
}

// Publisher's SKAdNetwork information to support app installation
// attribution for iOS 14 and later. Apple's SKAdNetwork API helps
// advertisers measure ad-driven app installation by sending a postback
// to the ad network after a successful install. Publishers will need
// to configure supported ad networks in their app's property list
// (Info.plist) to allow an install to be attributed to the ad impression.
// For more info visit:
// https://developer.apple.com/documentation/storekit/skadnetwork
type BidRequest_Mobile_SKAdNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of SKAdNetwork supported. Dependent on both the OS version
	// and the SDK version.
	// Note:  This field will be replaced by the
	// BidRequest.mobile.skadn.versions field to support a list of version
	// numbers.
	Version *string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	// List of SKAdNetwork versions supported, depending on the OS version
	// and the SDK version.
	Versions []string `protobuf:"bytes,4,rep,name=versions" json:"versions,omitempty"`
	// ID of publisher app in Apple's App Store.
	Sourceapp *string `protobuf:"bytes,2,opt,name=sourceapp" json:"sourceapp,omitempty"`
	// SKAdNetworkIdentifier entries in the publisher app's Info.plist.
	Skadnetids []string `protobuf:"bytes,3,rep,name=skadnetids" json:"skadnetids,omitempty"`
	// List of fidelity types supported, depending on the SKAdNetwork API
	// version supported by the operating system and SDK as well as ad slot
	// properties.
	SupportedFidelityTypes []SKAdNetworkFidelityType `protobuf:"varint,5,rep,packed,name=supported_fidelity_types,json=supportedFidelityTypes,enum=SKAdNetworkFidelityType" json:"supported_fidelity_types,omitempty"`
}

func (x *BidRequest_Mobile_SKAdNetworkRequest) Reset() {
	*x = BidRequest_Mobile_SKAdNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Mobile_SKAdNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Mobile_SKAdNetworkRequest) ProtoMessage() {}

func (x *BidRequest_Mobile_SKAdNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Mobile_SKAdNetworkRequest.ProtoReflect.Descriptor instead.
func (*BidRequest_Mobile_SKAdNetworkRequest) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 9, 1}
}

func (x *BidRequest_Mobile_SKAdNetworkRequest) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *BidRequest_Mobile_SKAdNetworkRequest) GetVersions() []string {
	if x != nil {
		return x.Versions
	}
	return nil
}

func (x *BidRequest_Mobile_SKAdNetworkRequest) GetSourceapp() string {
	if x != nil && x.Sourceapp != nil {
		return *x.Sourceapp
	}
	return ""
}

func (x *BidRequest_Mobile_SKAdNetworkRequest) GetSkadnetids() []string {
	if x != nil {
		return x.Skadnetids
	}
	return nil
}

func (x *BidRequest_Mobile_SKAdNetworkRequest) GetSupportedFidelityTypes() []SKAdNetworkFidelityType {
	if x != nil {
		return x.SupportedFidelityTypes
	}
	return nil
}

// Semantic version of the installed SDK and the adapter that communicates
// between the installed SDK and Google's SDK.
type BidRequest_Mobile_InstalledSdk_Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Major *int32 `protobuf:"varint,1,opt,name=major,def=-1" json:"major,omitempty"`
	Minor *int32 `protobuf:"varint,2,opt,name=minor,def=-1" json:"minor,omitempty"`
	Micro *int32 `protobuf:"varint,3,opt,name=micro,def=-1" json:"micro,omitempty"`
}

// Default values for BidRequest_Mobile_InstalledSdk_Version fields.
const (
	Default_BidRequest_Mobile_InstalledSdk_Version_Major = int32(-1)
	Default_BidRequest_Mobile_InstalledSdk_Version_Minor = int32(-1)
	Default_BidRequest_Mobile_InstalledSdk_Version_Micro = int32(-1)
)

func (x *BidRequest_Mobile_InstalledSdk_Version) Reset() {
	*x = BidRequest_Mobile_InstalledSdk_Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Mobile_InstalledSdk_Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Mobile_InstalledSdk_Version) ProtoMessage() {}

func (x *BidRequest_Mobile_InstalledSdk_Version) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Mobile_InstalledSdk_Version.ProtoReflect.Descriptor instead.
func (*BidRequest_Mobile_InstalledSdk_Version) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 9, 0, 0}
}

func (x *BidRequest_Mobile_InstalledSdk_Version) GetMajor() int32 {
	if x != nil && x.Major != nil {
		return *x.Major
	}
	return Default_BidRequest_Mobile_InstalledSdk_Version_Major
}

func (x *BidRequest_Mobile_InstalledSdk_Version) GetMinor() int32 {
	if x != nil && x.Minor != nil {
		return *x.Minor
	}
	return Default_BidRequest_Mobile_InstalledSdk_Version_Minor
}

func (x *BidRequest_Mobile_InstalledSdk_Version) GetMicro() int32 {
	if x != nil && x.Micro != nil {
		return *x.Micro
	}
	return Default_BidRequest_Mobile_InstalledSdk_Version_Micro
}

// Information about the companion ad slots that can be shown with the
// video. While this is a repeated field there will only be one value in
// most cases. If there are no companion ads available this field will not
// be set.
//
type BidRequest_Video_CompanionSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// These fields represent the available heights and widths in this slot.
	// There will always be the same number heights and widths fields.
	Height         []int32                                         `protobuf:"varint,1,rep,packed,name=height" json:"height,omitempty"`
	Width          []int32                                         `protobuf:"varint,2,rep,packed,name=width" json:"width,omitempty"`
	CreativeFormat []BidRequest_Video_CompanionSlot_CreativeFormat `protobuf:"varint,3,rep,name=creative_format,json=creativeFormat,enum=BidRequest_Video_CompanionSlot_CreativeFormat" json:"creative_format,omitempty"`
}

func (x *BidRequest_Video_CompanionSlot) Reset() {
	*x = BidRequest_Video_CompanionSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Video_CompanionSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Video_CompanionSlot) ProtoMessage() {}

func (x *BidRequest_Video_CompanionSlot) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Video_CompanionSlot.ProtoReflect.Descriptor instead.
func (*BidRequest_Video_CompanionSlot) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 10, 0}
}

func (x *BidRequest_Video_CompanionSlot) GetHeight() []int32 {
	if x != nil {
		return x.Height
	}
	return nil
}

func (x *BidRequest_Video_CompanionSlot) GetWidth() []int32 {
	if x != nil {
		return x.Width
	}
	return nil
}

func (x *BidRequest_Video_CompanionSlot) GetCreativeFormat() []BidRequest_Video_CompanionSlot_CreativeFormat {
	if x != nil {
		return x.CreativeFormat
	}
	return nil
}

// Attributes of the video that the user is viewing, not the video ad.
// These fields are based on the availability of the video metadata from the
// video publisher and may not always be populated.
//
type BidRequest_Video_ContentAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The duration of the video, in seconds.
	DurationSeconds *int32 `protobuf:"varint,2,opt,name=duration_seconds,json=durationSeconds" json:"duration_seconds,omitempty"`
}

func (x *BidRequest_Video_ContentAttributes) Reset() {
	*x = BidRequest_Video_ContentAttributes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_Video_ContentAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_Video_ContentAttributes) ProtoMessage() {}

func (x *BidRequest_Video_ContentAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_Video_ContentAttributes.ProtoReflect.Descriptor instead.
func (*BidRequest_Video_ContentAttributes) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 10, 1}
}

func (x *BidRequest_Video_ContentAttributes) GetDurationSeconds() int32 {
	if x != nil && x.DurationSeconds != nil {
		return *x.DurationSeconds
	}
	return 0
}

type BidRequest_AdSlot_FlexibleAdSlotSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxWidth  *int32 `protobuf:"varint,1,opt,name=max_width,json=maxWidth" json:"max_width,omitempty"`
	MaxHeight *int32 `protobuf:"varint,2,opt,name=max_height,json=maxHeight" json:"max_height,omitempty"`
	MinWidth  *int32 `protobuf:"varint,3,opt,name=min_width,json=minWidth" json:"min_width,omitempty"`
	MinHeight *int32 `protobuf:"varint,4,opt,name=min_height,json=minHeight" json:"min_height,omitempty"`
}

func (x *BidRequest_AdSlot_FlexibleAdSlotSettings) Reset() {
	*x = BidRequest_AdSlot_FlexibleAdSlotSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_AdSlot_FlexibleAdSlotSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_AdSlot_FlexibleAdSlotSettings) ProtoMessage() {}

func (x *BidRequest_AdSlot_FlexibleAdSlotSettings) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_AdSlot_FlexibleAdSlotSettings.ProtoReflect.Descriptor instead.
func (*BidRequest_AdSlot_FlexibleAdSlotSettings) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 0}
}

func (x *BidRequest_AdSlot_FlexibleAdSlotSettings) GetMaxWidth() int32 {
	if x != nil && x.MaxWidth != nil {
		return *x.MaxWidth
	}
	return 0
}

func (x *BidRequest_AdSlot_FlexibleAdSlotSettings) GetMaxHeight() int32 {
	if x != nil && x.MaxHeight != nil {
		return *x.MaxHeight
	}
	return 0
}

func (x *BidRequest_AdSlot_FlexibleAdSlotSettings) GetMinWidth() int32 {
	if x != nil && x.MinWidth != nil {
		return *x.MinWidth
	}
	return 0
}

func (x *BidRequest_AdSlot_FlexibleAdSlotSettings) GetMinHeight() int32 {
	if x != nil && x.MinHeight != nil {
		return *x.MinHeight
	}
	return 0
}

type BidRequest_AdSlot_ConsentedProvidersSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set of IDs corresponding to ad tech providers (ATPs) for whom the
	// publisher has specified to Google that its EEA users have given legally
	// valid consent to: 1) the use of cookies or other local storage where
	// legally required; and 2) the collection, sharing, and use of personal
	// data for personalization of ads by an ATP in accordance with Google's
	// EU User Consent Policy.
	//
	// If a publisher is using the IAB Transparency and Consent Framework
	// (TCF) v2 to manage user consent, this is the set of ATPs consented via
	// the Additional Consent string (see
	// https://support.google.com/admanager/answer/9681920 for details about
	// Google's Additional Consent mode). ATPs consented via the TCF v2
	// consent string are represented in the
	// ConsentedProvidersSettings.tcf_consent_string field.
	//
	// A mapping of ATP ID to ATP name is posted at providers.csv.
	ConsentedProviders []int64 `protobuf:"varint,2,rep,packed,name=consented_providers,json=consentedProviders" json:"consented_providers,omitempty"`
	// The web-safe base64-encoded IAB Transparency and Consent Framework
	// (TCF) v2 consent string fetched from the publisher's IAB Consent
	// Management Platform (CMP). The structure of the string is defined by
	// the IAB TCF v2. This field will be populated if the publisher has
	// integrated with a CMP for TCF v2 and that CMP indicates that GDPR
	// applies to this ad request and provides a valid consent string. See
	// https://support.google.com/authorizedbuyers/answer/9789378 for
	// additional information about the Google TCF v2 integration.
	//
	// See the IAB Global Vendor List at
	// https://vendor-list.consensu.org/v2/vendor-list.json for details about
	// the vendors listed in the consent string.
	TcfConsentString *string `protobuf:"bytes,3,opt,name=tcf_consent_string,json=tcfConsentString" json:"tcf_consent_string,omitempty"`
	// The raw Additional Consent string, which contains a list of certain
	// Google Ad Tech Providers (ATPs). These ATPs are not registered with IAB
	// TCF v2, but publishers or their Consent Management Providers (CMPs)
	// have ensured that certain disclosures are given to, and consents are
	// obtained from, end users, as required by Google's EU User Consent
	// Policy. This field is only populated with the use of CMPs that are
	// integrated with IAB TCF v2. Such CMPs use the raw Additional Consent
	// string to indicate vendors that are not registered with IAB, and
	// communicate end users' CMP choices to those vendors. The
	// consented_providers field contains the set of vendors that mirrors the
	// one represented by the additional_consent_string field, which is in the
	// raw form. Vendors or any other third-party service providers must not
	// create AC strings themselves.
	//
	// See https://support.google.com/admanager/answer/9681920 for more
	// details about this field.
	AdditionalConsentString *string `protobuf:"bytes,4,opt,name=additional_consent_string,json=additionalConsentString" json:"additional_consent_string,omitempty"`
}

func (x *BidRequest_AdSlot_ConsentedProvidersSettings) Reset() {
	*x = BidRequest_AdSlot_ConsentedProvidersSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_AdSlot_ConsentedProvidersSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_AdSlot_ConsentedProvidersSettings) ProtoMessage() {}

func (x *BidRequest_AdSlot_ConsentedProvidersSettings) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_AdSlot_ConsentedProvidersSettings.ProtoReflect.Descriptor instead.
func (*BidRequest_AdSlot_ConsentedProvidersSettings) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 1}
}

func (x *BidRequest_AdSlot_ConsentedProvidersSettings) GetConsentedProviders() []int64 {
	if x != nil {
		return x.ConsentedProviders
	}
	return nil
}

func (x *BidRequest_AdSlot_ConsentedProvidersSettings) GetTcfConsentString() string {
	if x != nil && x.TcfConsentString != nil {
		return *x.TcfConsentString
	}
	return ""
}

func (x *BidRequest_AdSlot_ConsentedProvidersSettings) GetAdditionalConsentString() string {
	if x != nil && x.AdditionalConsentString != nil {
		return *x.AdditionalConsentString
	}
	return ""
}

// A creative that is disallowed to bid on this impression due to Ad
// Exchange policies or creative disapproval, excluded creative attributes,
// excluded product or sensitive categories, allowed vendor types,
// restricted categories or languages applicable to the bid request.
type BidRequest_AdSlot_ExcludedCreative struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Buyer creative ID of the disallowed creative.
	BuyerCreativeId *string `protobuf:"bytes,1,opt,name=buyer_creative_id,json=buyerCreativeId" json:"buyer_creative_id,omitempty"`
}

func (x *BidRequest_AdSlot_ExcludedCreative) Reset() {
	*x = BidRequest_AdSlot_ExcludedCreative{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_AdSlot_ExcludedCreative) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_AdSlot_ExcludedCreative) ProtoMessage() {}

func (x *BidRequest_AdSlot_ExcludedCreative) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_AdSlot_ExcludedCreative.ProtoReflect.Descriptor instead.
func (*BidRequest_AdSlot_ExcludedCreative) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 2}
}

func (x *BidRequest_AdSlot_ExcludedCreative) GetBuyerCreativeId() string {
	if x != nil && x.BuyerCreativeId != nil {
		return *x.BuyerCreativeId
	}
	return ""
}

// Information about the pre-targeting configs that matched.
//
type BidRequest_AdSlot_MatchingAdData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The billing ids corresponding to the pretargeting configs that matched.
	BillingId []int64 `protobuf:"varint,2,rep,name=billing_id,json=billingId" json:"billing_id,omitempty"`
	// The minimum CPM value that you can bid to not be filtered before the
	// auction. This may be a global minimum, or it may be a minimum set by
	// the publisher. The value is in micros of the bidding currency.
	// The bidding currency is determined by:
	// 1. The bidder-level currency, if configured.
	// 2. Otherwise, the currency of the buyer accounts indicated by the
	// billing IDs in the billing_id field.
	MinimumCpmMicros *int64                                         `protobuf:"varint,5,opt,name=minimum_cpm_micros,json=minimumCpmMicros" json:"minimum_cpm_micros,omitempty"`
	DirectDeal       []*BidRequest_AdSlot_MatchingAdData_DirectDeal `protobuf:"bytes,6,rep,name=direct_deal,json=directDeal" json:"direct_deal,omitempty"`
}

func (x *BidRequest_AdSlot_MatchingAdData) Reset() {
	*x = BidRequest_AdSlot_MatchingAdData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_AdSlot_MatchingAdData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_AdSlot_MatchingAdData) ProtoMessage() {}

func (x *BidRequest_AdSlot_MatchingAdData) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_AdSlot_MatchingAdData.ProtoReflect.Descriptor instead.
func (*BidRequest_AdSlot_MatchingAdData) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 3}
}

func (x *BidRequest_AdSlot_MatchingAdData) GetBillingId() []int64 {
	if x != nil {
		return x.BillingId
	}
	return nil
}

func (x *BidRequest_AdSlot_MatchingAdData) GetMinimumCpmMicros() int64 {
	if x != nil && x.MinimumCpmMicros != nil {
		return *x.MinimumCpmMicros
	}
	return 0
}

func (x *BidRequest_AdSlot_MatchingAdData) GetDirectDeal() []*BidRequest_AdSlot_MatchingAdData_DirectDeal {
	if x != nil {
		return x.DirectDeal
	}
	return nil
}

// Parameters related to exchange bidding (third party exchanges doing
// real-time bidding on DFP). This is never populated in calls to AdX
// real-time bidders.
//
type BidRequest_AdSlot_ExchangeBidding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Repeated KeyValue pairs to be sent from the publisher to the
	// exchange bidder.
	KeyValue []*BidRequest_KeyValue `protobuf:"bytes,3,rep,name=key_value,json=keyValue" json:"key_value,omitempty"`
}

func (x *BidRequest_AdSlot_ExchangeBidding) Reset() {
	*x = BidRequest_AdSlot_ExchangeBidding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_AdSlot_ExchangeBidding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_AdSlot_ExchangeBidding) ProtoMessage() {}

func (x *BidRequest_AdSlot_ExchangeBidding) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_AdSlot_ExchangeBidding.ProtoReflect.Descriptor instead.
func (*BidRequest_AdSlot_ExchangeBidding) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 4}
}

func (x *BidRequest_AdSlot_ExchangeBidding) GetKeyValue() []*BidRequest_KeyValue {
	if x != nil {
		return x.KeyValue
	}
	return nil
}

// Parameters related to Open Bidding.
type BidRequest_AdSlot_OpenBidding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This field is set to true if the publisher set up a yield group or a
	// mediation group that targets this adslot and this bidder. See
	// https://support.google.com/admanager/answer/7128453 for information on
	// Open Bidding and its effects on the bidding process.
	IsOpenBidding *bool `protobuf:"varint,2,opt,name=is_open_bidding,json=isOpenBidding" json:"is_open_bidding,omitempty"`
}

func (x *BidRequest_AdSlot_OpenBidding) Reset() {
	*x = BidRequest_AdSlot_OpenBidding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_AdSlot_OpenBidding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_AdSlot_OpenBidding) ProtoMessage() {}

func (x *BidRequest_AdSlot_OpenBidding) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_AdSlot_OpenBidding.ProtoReflect.Descriptor instead.
func (*BidRequest_AdSlot_OpenBidding) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 5}
}

func (x *BidRequest_AdSlot_OpenBidding) GetIsOpenBidding() bool {
	if x != nil && x.IsOpenBidding != nil {
		return *x.IsOpenBidding
	}
	return false
}

// Indicates the creative policy and publisher blocks that applies to this
// request.
type BidRequest_AdSlot_CreativeEnforcementSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyEnforcement          *BidRequest_AdSlot_CreativeEnforcementSettings_PolicyEnforcement          `protobuf:"varint,1,opt,name=policy_enforcement,json=policyEnforcement,enum=BidRequest_AdSlot_CreativeEnforcementSettings_PolicyEnforcement" json:"policy_enforcement,omitempty"`
	PublisherBlocksEnforcement *BidRequest_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement `protobuf:"varint,3,opt,name=publisher_blocks_enforcement,json=publisherBlocksEnforcement,enum=BidRequest_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement" json:"publisher_blocks_enforcement,omitempty"`
	// Deprecated. This will be removed in August 2022.
	//
	// Indicates whether the policy, scan and publisher blocks level
	// combination is the default combination for this bidder. Please use
	// policy_enforcement and publisher_blocks_enforcement in
	// CreativeEnforcementSettings to learn which creative policy and
	// publisher blocks apply to the request.
	//
	// Deprecated: Do not use.
	IsDefault *bool `protobuf:"varint,4,opt,name=is_default,json=isDefault" json:"is_default,omitempty"`
}

func (x *BidRequest_AdSlot_CreativeEnforcementSettings) Reset() {
	*x = BidRequest_AdSlot_CreativeEnforcementSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_AdSlot_CreativeEnforcementSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_AdSlot_CreativeEnforcementSettings) ProtoMessage() {}

func (x *BidRequest_AdSlot_CreativeEnforcementSettings) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_AdSlot_CreativeEnforcementSettings.ProtoReflect.Descriptor instead.
func (*BidRequest_AdSlot_CreativeEnforcementSettings) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 6}
}

func (x *BidRequest_AdSlot_CreativeEnforcementSettings) GetPolicyEnforcement() BidRequest_AdSlot_CreativeEnforcementSettings_PolicyEnforcement {
	if x != nil && x.PolicyEnforcement != nil {
		return *x.PolicyEnforcement
	}
	return BidRequest_AdSlot_CreativeEnforcementSettings_POLICY_ENFORCEMENT_UNKNOWN
}

func (x *BidRequest_AdSlot_CreativeEnforcementSettings) GetPublisherBlocksEnforcement() BidRequest_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement {
	if x != nil && x.PublisherBlocksEnforcement != nil {
		return *x.PublisherBlocksEnforcement
	}
	return BidRequest_AdSlot_CreativeEnforcementSettings_PUBLISHER_BLOCKS_ENFORCEMENT_UNKNOWN
}

// Deprecated: Do not use.
func (x *BidRequest_AdSlot_CreativeEnforcementSettings) GetIsDefault() bool {
	if x != nil && x.IsDefault != nil {
		return *x.IsDefault
	}
	return false
}

// A native ad consists of pieces that are rendered by the publisher. A
// publisher may support multiple distinct native ad templates. If the
// request also allows banners or videos, you can respond with other
// types of ads by setting html_snippet or video_url instead. If only
// native templates exist, you must set the native_ad field in any
// response you send.
//
type BidRequest_AdSlot_NativeAdTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bitfield describing which fields are required by the publisher. Bid
	// responses with no value for these fields will be rejected. Click and
	// view tracking urls are always implicitly required.
	RequiredFields *int64 `protobuf:"varint,1,opt,name=required_fields,json=requiredFields" json:"required_fields,omitempty"`
	// Bitfield describing which fields are recommended by the publisher. All
	// recommended fields are supported, but not all recommended fields are
	// required.
	RecommendedFields *int64 `protobuf:"varint,2,opt,name=recommended_fields,json=recommendedFields" json:"recommended_fields,omitempty"`
	// max_safe_length indicates the maximum number of Unicode characters that
	// are guaranteed to be shown without truncation. Longer strings may be
	// truncated and ellipsized by Ad Exchange or the publisher during
	// rendering.
	HeadlineMaxSafeLength     *int32 `protobuf:"varint,3,opt,name=headline_max_safe_length,json=headlineMaxSafeLength" json:"headline_max_safe_length,omitempty"`
	BodyMaxSafeLength         *int32 `protobuf:"varint,4,opt,name=body_max_safe_length,json=bodyMaxSafeLength" json:"body_max_safe_length,omitempty"`
	CallToActionMaxSafeLength *int32 `protobuf:"varint,5,opt,name=call_to_action_max_safe_length,json=callToActionMaxSafeLength" json:"call_to_action_max_safe_length,omitempty"`
	AdvertiserMaxSafeLength   *int32 `protobuf:"varint,6,opt,name=advertiser_max_safe_length,json=advertiserMaxSafeLength" json:"advertiser_max_safe_length,omitempty"`
	PriceMaxSafeLength        *int32 `protobuf:"varint,15,opt,name=price_max_safe_length,json=priceMaxSafeLength" json:"price_max_safe_length,omitempty"`
	// The width and height from which to calculate the required aspect ratio.
	// You can provide a larger image in the response. Images that have aspect
	// ratios substantially different than those implied by the height and
	// width may be filtered.
	ImageWidth    *int32 `protobuf:"varint,7,opt,name=image_width,json=imageWidth" json:"image_width,omitempty"`
	ImageHeight   *int32 `protobuf:"varint,8,opt,name=image_height,json=imageHeight" json:"image_height,omitempty"`
	LogoWidth     *int32 `protobuf:"varint,9,opt,name=logo_width,json=logoWidth" json:"logo_width,omitempty"`
	LogoHeight    *int32 `protobuf:"varint,10,opt,name=logo_height,json=logoHeight" json:"logo_height,omitempty"`
	AppIconWidth  *int32 `protobuf:"varint,11,opt,name=app_icon_width,json=appIconWidth" json:"app_icon_width,omitempty"`
	AppIconHeight *int32 `protobuf:"varint,12,opt,name=app_icon_height,json=appIconHeight" json:"app_icon_height,omitempty"`
	// Globally distinct id for the specific style, HTML, and CSS with which
	// the native ad is rendered.
	StyleId         *int32                                         `protobuf:"varint,16,opt,name=style_id,json=styleId" json:"style_id,omitempty"`
	StyleLayoutType *BidRequest_AdSlot_NativeAdTemplate_LayoutType `protobuf:"varint,17,opt,name=style_layout_type,json=styleLayoutType,enum=BidRequest_AdSlot_NativeAdTemplate_LayoutType,def=0" json:"style_layout_type,omitempty"`
	// If the style_layout_type is Pixel, width and height of the
	// entire native ad after rendering. If the style_layout_type is
	// Fluid, the style_height and style_width may optionally
	// not be populated.
	StyleHeight *int32 `protobuf:"varint,18,opt,name=style_height,json=styleHeight" json:"style_height,omitempty"`
	StyleWidth  *int32 `protobuf:"varint,19,opt,name=style_width,json=styleWidth" json:"style_width,omitempty"`
}

// Default values for BidRequest_AdSlot_NativeAdTemplate fields.
const (
	Default_BidRequest_AdSlot_NativeAdTemplate_StyleLayoutType = BidRequest_AdSlot_NativeAdTemplate_PIXEL
)

func (x *BidRequest_AdSlot_NativeAdTemplate) Reset() {
	*x = BidRequest_AdSlot_NativeAdTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_AdSlot_NativeAdTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_AdSlot_NativeAdTemplate) ProtoMessage() {}

func (x *BidRequest_AdSlot_NativeAdTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_AdSlot_NativeAdTemplate.ProtoReflect.Descriptor instead.
func (*BidRequest_AdSlot_NativeAdTemplate) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 7}
}

func (x *BidRequest_AdSlot_NativeAdTemplate) GetRequiredFields() int64 {
	if x != nil && x.RequiredFields != nil {
		return *x.RequiredFields
	}
	return 0
}

func (x *BidRequest_AdSlot_NativeAdTemplate) GetRecommendedFields() int64 {
	if x != nil && x.RecommendedFields != nil {
		return *x.RecommendedFields
	}
	return 0
}

func (x *BidRequest_AdSlot_NativeAdTemplate) GetHeadlineMaxSafeLength() int32 {
	if x != nil && x.HeadlineMaxSafeLength != nil {
		return *x.HeadlineMaxSafeLength
	}
	return 0
}

func (x *BidRequest_AdSlot_NativeAdTemplate) GetBodyMaxSafeLength() int32 {
	if x != nil && x.BodyMaxSafeLength != nil {
		return *x.BodyMaxSafeLength
	}
	return 0
}

func (x *BidRequest_AdSlot_NativeAdTemplate) GetCallToActionMaxSafeLength() int32 {
	if x != nil && x.CallToActionMaxSafeLength != nil {
		return *x.CallToActionMaxSafeLength
	}
	return 0
}

func (x *BidRequest_AdSlot_NativeAdTemplate) GetAdvertiserMaxSafeLength() int32 {
	if x != nil && x.AdvertiserMaxSafeLength != nil {
		return *x.AdvertiserMaxSafeLength
	}
	return 0
}

func (x *BidRequest_AdSlot_NativeAdTemplate) GetPriceMaxSafeLength() int32 {
	if x != nil && x.PriceMaxSafeLength != nil {
		return *x.PriceMaxSafeLength
	}
	return 0
}

func (x *BidRequest_AdSlot_NativeAdTemplate) GetImageWidth() int32 {
	if x != nil && x.ImageWidth != nil {
		return *x.ImageWidth
	}
	return 0
}

func (x *BidRequest_AdSlot_NativeAdTemplate) GetImageHeight() int32 {
	if x != nil && x.ImageHeight != nil {
		return *x.ImageHeight
	}
	return 0
}

func (x *BidRequest_AdSlot_NativeAdTemplate) GetLogoWidth() int32 {
	if x != nil && x.LogoWidth != nil {
		return *x.LogoWidth
	}
	return 0
}

func (x *BidRequest_AdSlot_NativeAdTemplate) GetLogoHeight() int32 {
	if x != nil && x.LogoHeight != nil {
		return *x.LogoHeight
	}
	return 0
}

func (x *BidRequest_AdSlot_NativeAdTemplate) GetAppIconWidth() int32 {
	if x != nil && x.AppIconWidth != nil {
		return *x.AppIconWidth
	}
	return 0
}

func (x *BidRequest_AdSlot_NativeAdTemplate) GetAppIconHeight() int32 {
	if x != nil && x.AppIconHeight != nil {
		return *x.AppIconHeight
	}
	return 0
}

func (x *BidRequest_AdSlot_NativeAdTemplate) GetStyleId() int32 {
	if x != nil && x.StyleId != nil {
		return *x.StyleId
	}
	return 0
}

func (x *BidRequest_AdSlot_NativeAdTemplate) GetStyleLayoutType() BidRequest_AdSlot_NativeAdTemplate_LayoutType {
	if x != nil && x.StyleLayoutType != nil {
		return *x.StyleLayoutType
	}
	return Default_BidRequest_AdSlot_NativeAdTemplate_StyleLayoutType
}

func (x *BidRequest_AdSlot_NativeAdTemplate) GetStyleHeight() int32 {
	if x != nil && x.StyleHeight != nil {
		return *x.StyleHeight
	}
	return 0
}

func (x *BidRequest_AdSlot_NativeAdTemplate) GetStyleWidth() int32 {
	if x != nil && x.StyleWidth != nil {
		return *x.StyleWidth
	}
	return 0
}

// Auto refresh settings.
type BidRequest_AdSlot_AutoRefresh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The auto-refresh settings that the publisher has on this
	// inventory. This is repeated because publishers may
	// do multiple types of auto refresh on one piece of inventory.
	RefreshSettings []*BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings `protobuf:"bytes,1,rep,name=refresh_settings,json=refreshSettings" json:"refresh_settings,omitempty"`
	// The number of times this ad slot had been refreshed since last page
	// load.
	RefreshCount *int32 `protobuf:"varint,2,opt,name=refresh_count,json=refreshCount,def=0" json:"refresh_count,omitempty"`
}

// Default values for BidRequest_AdSlot_AutoRefresh fields.
const (
	Default_BidRequest_AdSlot_AutoRefresh_RefreshCount = int32(0)
)

func (x *BidRequest_AdSlot_AutoRefresh) Reset() {
	*x = BidRequest_AdSlot_AutoRefresh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_AdSlot_AutoRefresh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_AdSlot_AutoRefresh) ProtoMessage() {}

func (x *BidRequest_AdSlot_AutoRefresh) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_AdSlot_AutoRefresh.ProtoReflect.Descriptor instead.
func (*BidRequest_AdSlot_AutoRefresh) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 8}
}

func (x *BidRequest_AdSlot_AutoRefresh) GetRefreshSettings() []*BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings {
	if x != nil {
		return x.RefreshSettings
	}
	return nil
}

func (x *BidRequest_AdSlot_AutoRefresh) GetRefreshCount() int32 {
	if x != nil && x.RefreshCount != nil {
		return *x.RefreshCount
	}
	return Default_BidRequest_AdSlot_AutoRefresh_RefreshCount
}

// Stickiness settings declared by the publisher.
// Next Tag: 4
type BidRequest_AdSlot_StickySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the ad slot is a sidebar that sticks on screen when user
	// scrolls.
	VerticalStickiness *BidRequest_AdSlot_StickySettings_Stickiness `protobuf:"varint,1,opt,name=vertical_stickiness,json=verticalStickiness,enum=BidRequest_AdSlot_StickySettings_Stickiness,def=0" json:"vertical_stickiness,omitempty"`
	// Whether the ad slot is a horizontal slot that sticks on the top of the
	// screen when user scrolls.
	TopHorizontalStickiness *BidRequest_AdSlot_StickySettings_Stickiness `protobuf:"varint,2,opt,name=top_horizontal_stickiness,json=topHorizontalStickiness,enum=BidRequest_AdSlot_StickySettings_Stickiness,def=0" json:"top_horizontal_stickiness,omitempty"`
	// Whether the ad slot is a horizontal slot that sticks on the bottom of
	// the screen when user scrolls.
	BottomHorizontalStickiness *BidRequest_AdSlot_StickySettings_Stickiness `protobuf:"varint,3,opt,name=bottom_horizontal_stickiness,json=bottomHorizontalStickiness,enum=BidRequest_AdSlot_StickySettings_Stickiness,def=0" json:"bottom_horizontal_stickiness,omitempty"`
}

// Default values for BidRequest_AdSlot_StickySettings fields.
const (
	Default_BidRequest_AdSlot_StickySettings_VerticalStickiness         = BidRequest_AdSlot_StickySettings_UNKNOWN_STICKINESS
	Default_BidRequest_AdSlot_StickySettings_TopHorizontalStickiness    = BidRequest_AdSlot_StickySettings_UNKNOWN_STICKINESS
	Default_BidRequest_AdSlot_StickySettings_BottomHorizontalStickiness = BidRequest_AdSlot_StickySettings_UNKNOWN_STICKINESS
)

func (x *BidRequest_AdSlot_StickySettings) Reset() {
	*x = BidRequest_AdSlot_StickySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_AdSlot_StickySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_AdSlot_StickySettings) ProtoMessage() {}

func (x *BidRequest_AdSlot_StickySettings) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_AdSlot_StickySettings.ProtoReflect.Descriptor instead.
func (*BidRequest_AdSlot_StickySettings) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 9}
}

func (x *BidRequest_AdSlot_StickySettings) GetVerticalStickiness() BidRequest_AdSlot_StickySettings_Stickiness {
	if x != nil && x.VerticalStickiness != nil {
		return *x.VerticalStickiness
	}
	return Default_BidRequest_AdSlot_StickySettings_VerticalStickiness
}

func (x *BidRequest_AdSlot_StickySettings) GetTopHorizontalStickiness() BidRequest_AdSlot_StickySettings_Stickiness {
	if x != nil && x.TopHorizontalStickiness != nil {
		return *x.TopHorizontalStickiness
	}
	return Default_BidRequest_AdSlot_StickySettings_TopHorizontalStickiness
}

func (x *BidRequest_AdSlot_StickySettings) GetBottomHorizontalStickiness() BidRequest_AdSlot_StickySettings_Stickiness {
	if x != nil && x.BottomHorizontalStickiness != nil {
		return *x.BottomHorizontalStickiness
	}
	return Default_BidRequest_AdSlot_StickySettings_BottomHorizontalStickiness
}

// Encrypted data to be passed to a buyer by the publisher.
type BidRequest_AdSlot_BuyerGeneratedRequestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The source (provider) of the signal.
	//
	// Types that are assignable to Source:
	//	*BidRequest_AdSlot_BuyerGeneratedRequestData_SourceApp_
	//	*BidRequest_AdSlot_BuyerGeneratedRequestData_SourceJs_
	Source isBidRequest_AdSlot_BuyerGeneratedRequestData_Source `protobuf_oneof:"source"`
	// The encrypted signal.
	Data *string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (x *BidRequest_AdSlot_BuyerGeneratedRequestData) Reset() {
	*x = BidRequest_AdSlot_BuyerGeneratedRequestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_AdSlot_BuyerGeneratedRequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_AdSlot_BuyerGeneratedRequestData) ProtoMessage() {}

func (x *BidRequest_AdSlot_BuyerGeneratedRequestData) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_AdSlot_BuyerGeneratedRequestData.ProtoReflect.Descriptor instead.
func (*BidRequest_AdSlot_BuyerGeneratedRequestData) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 10}
}

func (m *BidRequest_AdSlot_BuyerGeneratedRequestData) GetSource() isBidRequest_AdSlot_BuyerGeneratedRequestData_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *BidRequest_AdSlot_BuyerGeneratedRequestData) GetSourceApp() *BidRequest_AdSlot_BuyerGeneratedRequestData_SourceApp {
	if x, ok := x.GetSource().(*BidRequest_AdSlot_BuyerGeneratedRequestData_SourceApp_); ok {
		return x.SourceApp
	}
	return nil
}

func (x *BidRequest_AdSlot_BuyerGeneratedRequestData) GetSourceJs() *BidRequest_AdSlot_BuyerGeneratedRequestData_SourceJs {
	if x, ok := x.GetSource().(*BidRequest_AdSlot_BuyerGeneratedRequestData_SourceJs_); ok {
		return x.SourceJs
	}
	return nil
}

func (x *BidRequest_AdSlot_BuyerGeneratedRequestData) GetData() string {
	if x != nil && x.Data != nil {
		return *x.Data
	}
	return ""
}

type isBidRequest_AdSlot_BuyerGeneratedRequestData_Source interface {
	isBidRequest_AdSlot_BuyerGeneratedRequestData_Source()
}

type BidRequest_AdSlot_BuyerGeneratedRequestData_SourceApp_ struct {
	SourceApp *BidRequest_AdSlot_BuyerGeneratedRequestData_SourceApp `protobuf:"bytes,1,opt,name=source_app,json=sourceApp,oneof"`
}

type BidRequest_AdSlot_BuyerGeneratedRequestData_SourceJs_ struct {
	SourceJs *BidRequest_AdSlot_BuyerGeneratedRequestData_SourceJs `protobuf:"bytes,3,opt,name=source_js,json=sourceJs,oneof"`
}

func (*BidRequest_AdSlot_BuyerGeneratedRequestData_SourceApp_) isBidRequest_AdSlot_BuyerGeneratedRequestData_Source() {
}

func (*BidRequest_AdSlot_BuyerGeneratedRequestData_SourceJs_) isBidRequest_AdSlot_BuyerGeneratedRequestData_Source() {
}

// Note: This feature is currently in beta testing for publishers
// and is subject to change.
// This message is populated when the request is for an individual cell
// within a multi-ad grid. It provides cell level information as well as
// information about the grid this cell belongs to in the AdSlot.
// Only native ads are supported for cells in a multi-ad grid at this time.
type BidRequest_AdSlot_MultiAdsCellInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The row this cell belongs to.
	CellRow *int32 `protobuf:"varint,1,opt,name=cell_row,json=cellRow" json:"cell_row,omitempty"`
	// The column this cell belongs to.
	CellColumn *int32 `protobuf:"varint,2,opt,name=cell_column,json=cellColumn" json:"cell_column,omitempty"`
	// Total number of rows in the grid for this cell.
	GridRows *int32 `protobuf:"varint,3,opt,name=grid_rows,json=gridRows" json:"grid_rows,omitempty"`
	// Total number of columns in the grid for this cell.
	GridColumns *int32 `protobuf:"varint,4,opt,name=grid_columns,json=gridColumns" json:"grid_columns,omitempty"`
	// Unique ID for the grid. It identifies a single grid on a single
	// instance of a page and is the same for all cells within that grid. If a
	// page has multiple grids, the grid_id for other grids would be
	// different. It would also be different for the same grid in two
	// different pageviews.
	// This is distinct from the google_query_id, which will differ for every
	// request for a cell in the grid.
	GridId *int64 `protobuf:"varint,5,opt,name=grid_id,json=gridId" json:"grid_id,omitempty"`
}

func (x *BidRequest_AdSlot_MultiAdsCellInfo) Reset() {
	*x = BidRequest_AdSlot_MultiAdsCellInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_AdSlot_MultiAdsCellInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_AdSlot_MultiAdsCellInfo) ProtoMessage() {}

func (x *BidRequest_AdSlot_MultiAdsCellInfo) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_AdSlot_MultiAdsCellInfo.ProtoReflect.Descriptor instead.
func (*BidRequest_AdSlot_MultiAdsCellInfo) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 11}
}

func (x *BidRequest_AdSlot_MultiAdsCellInfo) GetCellRow() int32 {
	if x != nil && x.CellRow != nil {
		return *x.CellRow
	}
	return 0
}

func (x *BidRequest_AdSlot_MultiAdsCellInfo) GetCellColumn() int32 {
	if x != nil && x.CellColumn != nil {
		return *x.CellColumn
	}
	return 0
}

func (x *BidRequest_AdSlot_MultiAdsCellInfo) GetGridRows() int32 {
	if x != nil && x.GridRows != nil {
		return *x.GridRows
	}
	return 0
}

func (x *BidRequest_AdSlot_MultiAdsCellInfo) GetGridColumns() int32 {
	if x != nil && x.GridColumns != nil {
		return *x.GridColumns
	}
	return 0
}

func (x *BidRequest_AdSlot_MultiAdsCellInfo) GetGridId() int64 {
	if x != nil && x.GridId != nil {
		return *x.GridId
	}
	return 0
}

// Information about any deals that matched for this inventory.
//
type BidRequest_AdSlot_MatchingAdData_DirectDeal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An id identifying the deal.
	DirectDealId *int64 `protobuf:"varint,1,opt,name=direct_deal_id,json=directDealId" json:"direct_deal_id,omitempty"`
	// For deal_type=PREFERRED_DEAL or deal_type=PROGRAMMATIC_GUARANTEED,
	// you must bid at least fixed_cpm_micros (in micros of the bidding
	// currency) in order to participate in the deal. If you win, you will
	// be charged fixed_cpm_micros. For deal_type=PRIVATE_AUCTION or
	// deal_type=AUCTION_PACKAGE you must bid at least fixed_cpm_micros.
	// Bidding higher CPM than fixed_cpm_micros will increase your chance
	// to win when deal_type=PRIVATE_AUCTION or deal_type=AUCTION_PACKAGE,
	// however it will not increase your chance to win for other types of
	// deals.
	// The bidding currency is determined by:
	// 1. The bidder-level currency, if configured.
	// 2. Otherwise, the currency of the buyer accounts indicated by the
	// billing IDs in the billing_id field.
	FixedCpmMicros *int64                                                `protobuf:"varint,2,opt,name=fixed_cpm_micros,json=fixedCpmMicros" json:"fixed_cpm_micros,omitempty"`
	DealType       *BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType `protobuf:"varint,3,opt,name=deal_type,json=dealType,enum=BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType,def=0" json:"deal_type,omitempty"`
	// Whether the publisher has exempted this deal from configured blocks.
	// This setting does not override AdX policies or Ad Review Center
	// decisions.
	PublisherBlocksOverridden *bool                                                           `protobuf:"varint,4,opt,name=publisher_blocks_overridden,json=publisherBlocksOverridden,def=0" json:"publisher_blocks_overridden,omitempty"`
	CreativeSource            *BidRequest_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType `protobuf:"varint,16,opt,name=creative_source,json=creativeSource,enum=BidRequest_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType,def=1" json:"creative_source,omitempty"`
	// This field is only applicable to Programmatic Guaranteed deals. The
	// buyer is allowed to skip bidding on the impression if this field is
	// false. When it is true, the buyer is required to bid on this deal for
	// this impression opportunity.
	MustBid *bool `protobuf:"varint,9,opt,name=must_bid,json=mustBid,def=1" json:"must_bid,omitempty"`
}

// Default values for BidRequest_AdSlot_MatchingAdData_DirectDeal fields.
const (
	Default_BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType                  = BidRequest_AdSlot_MatchingAdData_DirectDeal_UNKNOWN_DEAL_TYPE
	Default_BidRequest_AdSlot_MatchingAdData_DirectDeal_PublisherBlocksOverridden = bool(false)
	Default_BidRequest_AdSlot_MatchingAdData_DirectDeal_CreativeSource            = BidRequest_AdSlot_MatchingAdData_DirectDeal_CREATIVE_SOURCE_ADVERTISER
	Default_BidRequest_AdSlot_MatchingAdData_DirectDeal_MustBid                   = bool(true)
)

func (x *BidRequest_AdSlot_MatchingAdData_DirectDeal) Reset() {
	*x = BidRequest_AdSlot_MatchingAdData_DirectDeal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_AdSlot_MatchingAdData_DirectDeal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_AdSlot_MatchingAdData_DirectDeal) ProtoMessage() {}

func (x *BidRequest_AdSlot_MatchingAdData_DirectDeal) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_AdSlot_MatchingAdData_DirectDeal.ProtoReflect.Descriptor instead.
func (*BidRequest_AdSlot_MatchingAdData_DirectDeal) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 3, 0}
}

func (x *BidRequest_AdSlot_MatchingAdData_DirectDeal) GetDirectDealId() int64 {
	if x != nil && x.DirectDealId != nil {
		return *x.DirectDealId
	}
	return 0
}

func (x *BidRequest_AdSlot_MatchingAdData_DirectDeal) GetFixedCpmMicros() int64 {
	if x != nil && x.FixedCpmMicros != nil {
		return *x.FixedCpmMicros
	}
	return 0
}

func (x *BidRequest_AdSlot_MatchingAdData_DirectDeal) GetDealType() BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType {
	if x != nil && x.DealType != nil {
		return *x.DealType
	}
	return Default_BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType
}

func (x *BidRequest_AdSlot_MatchingAdData_DirectDeal) GetPublisherBlocksOverridden() bool {
	if x != nil && x.PublisherBlocksOverridden != nil {
		return *x.PublisherBlocksOverridden
	}
	return Default_BidRequest_AdSlot_MatchingAdData_DirectDeal_PublisherBlocksOverridden
}

func (x *BidRequest_AdSlot_MatchingAdData_DirectDeal) GetCreativeSource() BidRequest_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType {
	if x != nil && x.CreativeSource != nil {
		return *x.CreativeSource
	}
	return Default_BidRequest_AdSlot_MatchingAdData_DirectDeal_CreativeSource
}

func (x *BidRequest_AdSlot_MatchingAdData_DirectDeal) GetMustBid() bool {
	if x != nil && x.MustBid != nil {
		return *x.MustBid
	}
	return Default_BidRequest_AdSlot_MatchingAdData_DirectDeal_MustBid
}

type BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the declared auto refresh.
	RefreshType *BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType `protobuf:"varint,1,opt,name=refresh_type,json=refreshType,enum=BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType,def=0" json:"refresh_type,omitempty"`
	// The minimum refresh interval. This applies to all refresh types.
	MinRefreshIntervalSeconds *int32 `protobuf:"varint,2,opt,name=min_refresh_interval_seconds,json=minRefreshIntervalSeconds" json:"min_refresh_interval_seconds,omitempty"`
}

// Default values for BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings fields.
const (
	Default_BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_RefreshType = BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_UNKNOWN_AUTO_REFRESH_TYPE
)

func (x *BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings) Reset() {
	*x = BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings) ProtoMessage() {}

func (x *BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings.ProtoReflect.Descriptor instead.
func (*BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 8, 0}
}

func (x *BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings) GetRefreshType() BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType {
	if x != nil && x.RefreshType != nil {
		return *x.RefreshType
	}
	return Default_BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_RefreshType
}

func (x *BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings) GetMinRefreshIntervalSeconds() int32 {
	if x != nil && x.MinRefreshIntervalSeconds != nil {
		return *x.MinRefreshIntervalSeconds
	}
	return 0
}

// The source of the signal when this request is from an app.
type BidRequest_AdSlot_BuyerGeneratedRequestData_SourceApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier for the SDK that generated this data. It will match the id
	// in mobile.installed_sdk.id.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (x *BidRequest_AdSlot_BuyerGeneratedRequestData_SourceApp) Reset() {
	*x = BidRequest_AdSlot_BuyerGeneratedRequestData_SourceApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_AdSlot_BuyerGeneratedRequestData_SourceApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_AdSlot_BuyerGeneratedRequestData_SourceApp) ProtoMessage() {}

func (x *BidRequest_AdSlot_BuyerGeneratedRequestData_SourceApp) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_AdSlot_BuyerGeneratedRequestData_SourceApp.ProtoReflect.Descriptor instead.
func (*BidRequest_AdSlot_BuyerGeneratedRequestData_SourceApp) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 10, 0}
}

func (x *BidRequest_AdSlot_BuyerGeneratedRequestData_SourceApp) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

// The source of the signal when this request is from a web page.
type BidRequest_AdSlot_BuyerGeneratedRequestData_SourceJs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the JavaScript library that generated this data
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (x *BidRequest_AdSlot_BuyerGeneratedRequestData_SourceJs) Reset() {
	*x = BidRequest_AdSlot_BuyerGeneratedRequestData_SourceJs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_AdSlot_BuyerGeneratedRequestData_SourceJs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_AdSlot_BuyerGeneratedRequestData_SourceJs) ProtoMessage() {}

func (x *BidRequest_AdSlot_BuyerGeneratedRequestData_SourceJs) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_AdSlot_BuyerGeneratedRequestData_SourceJs.ProtoReflect.Descriptor instead.
func (*BidRequest_AdSlot_BuyerGeneratedRequestData_SourceJs) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 11, 10, 1}
}

func (x *BidRequest_AdSlot_BuyerGeneratedRequestData_SourceJs) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

type BidRequest_SupplyChain_SupplyChainNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The canonical domain name of the SSP, Exchange, Header Wrapper, etc
	// system that bidders connect to. This may be the operational domain of
	// the system, if that is different than the parent corporate domain, to
	// facilitate WHOIS and reverse IP lookups to establish clear ownership of
	// the delegate system. This should be the same value as used to identify
	// sellers in an ads.txt file if one exists.
	AdvertisingSystemIdentifier *string `protobuf:"bytes,1,opt,name=advertising_system_identifier,json=advertisingSystemIdentifier" json:"advertising_system_identifier,omitempty"`
	// The identifier associated with the seller or reseller account within
	// the advertising system. This must contain the same value used in
	// transactions, i.e. "publisher_id" in Google protocol. Should be
	// limited to 64 characters in length.
	SellerIdentifier *string `protobuf:"bytes,2,opt,name=seller_identifier,json=sellerIdentifier" json:"seller_identifier,omitempty"`
	// Indicates whether this node will be involved in the flow of payment for
	// the inventory. When set to true, the advertising system in the
	// advertising_system_identifier field pays the seller in the
	// seller_identifier field, who is responsible for paying the previous
	// node in the chain. When set to false, this node is not involved in the
	// flow of payment for the inventory.
	HandlesPayment *bool `protobuf:"varint,6,opt,name=handles_payment,json=handlesPayment" json:"handles_payment,omitempty"`
}

func (x *BidRequest_SupplyChain_SupplyChainNode) Reset() {
	*x = BidRequest_SupplyChain_SupplyChainNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidRequest_SupplyChain_SupplyChainNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidRequest_SupplyChain_SupplyChainNode) ProtoMessage() {}

func (x *BidRequest_SupplyChain_SupplyChainNode) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidRequest_SupplyChain_SupplyChainNode.ProtoReflect.Descriptor instead.
func (*BidRequest_SupplyChain_SupplyChainNode) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{0, 13, 0}
}

func (x *BidRequest_SupplyChain_SupplyChainNode) GetAdvertisingSystemIdentifier() string {
	if x != nil && x.AdvertisingSystemIdentifier != nil {
		return *x.AdvertisingSystemIdentifier
	}
	return ""
}

func (x *BidRequest_SupplyChain_SupplyChainNode) GetSellerIdentifier() string {
	if x != nil && x.SellerIdentifier != nil {
		return *x.SellerIdentifier
	}
	return ""
}

func (x *BidRequest_SupplyChain_SupplyChainNode) GetHandlesPayment() bool {
	if x != nil && x.HandlesPayment != nil {
		return *x.HandlesPayment
	}
	return false
}

type BidResponse_Ad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The event notification token is sent to AdX by bidders for
	// troubleshooting. AdX will include the token in real-time feedback for the
	// bid. The content of the token will not be logged by AdX. AdX will ignore
	// any token longer than 64 bytes.
	EventNotificationToken []byte `protobuf:"bytes,25,opt,name=event_notification_token,json=eventNotificationToken" json:"event_notification_token,omitempty"`
	// A unique identifier chosen by you for the creative in this response.
	// This must always be set, must be limited to at most 64 bytes, and must be
	// a valid UTF8 string. Every buyer_creative_id you use must always be
	// associated with the same creative. This field is used to communicate
	// approval statuses when issues are found. Do not specify the same id for
	// different creatives, or all creatives will be disapproved if a problem
	// with a single creative is found. Do not specify different ids for the
	// same creative in different responses or no creatives will be served since
	// approval status is assigned on a per-id basis.
	BuyerCreativeId *string `protobuf:"bytes,10,opt,name=buyer_creative_id,json=buyerCreativeId" json:"buyer_creative_id,omitempty"`
	// The HTML snippet that will be placed on the web page to display the ad.
	// Please use BidResponse.Ad.AdSlot.billing_id to indicate which billing id
	// this snippet is attributed to.
	HtmlSnippet *string `protobuf:"bytes,1,opt,name=html_snippet,json=htmlSnippet" json:"html_snippet,omitempty"`
	// The URL to fetch a video ad. The URL should return an XML response that
	// conforms to the VAST 2.0 or 3.0 standard. Please use
	// BidResponse.Ad.AdSlot.billing_id to indicate which billing id to
	// attribute this ad to. Only one of the following should be set:
	// html_snippet, video_url. Only set this field if the BidRequest is for an
	// in-video ad (BidRequest.video is present).
	VideoUrl *string `protobuf:"bytes,9,opt,name=video_url,json=videoUrl" json:"video_url,omitempty"`
	// The VAST document to be returned. This document should conform to the
	// VAST 2.0 or 3.0 standard. Please use BidResponse.Ad.AdSlot.billing_id to
	// indicate which billing ID to attribute this ad to.
	// Only set this field if the BidRequest is for an in-video ad and the
	// response is VAST XML.
	VideoVastXml *string `protobuf:"bytes,24,opt,name=video_vast_xml,json=videoVastXml" json:"video_vast_xml,omitempty"`
	// The URL to fetch an AMPHTML ad. Only one of the following should be set:
	// html_snippet, video_url, amp_ad_url, native_ad.
	AmpAdUrl *string                  `protobuf:"bytes,23,opt,name=amp_ad_url,json=ampAdUrl" json:"amp_ad_url,omitempty"`
	NativeAd *BidResponse_Ad_NativeAd `protobuf:"bytes,18,opt,name=native_ad,json=nativeAd" json:"native_ad,omitempty"`
	// The set of destination URLs for the snippet. This includes the URLs that
	// the user will go to if they click on the displayed ad, and any URLs that
	// are visible in the rendered ad. Do not include intermediate calls to the
	// adserver that are unrelated to the inal landing page. A BidResponse that
	// returns a snippet or video ad but declares no click_through_url will be
	// discarded. Only set this field if html_snippet or video_url or native_ad
	// are set. This data is used as a destination URL declaration, for example
	// for post-filtering of publisher-blocked URLs or ad categorization.
	//
	// For non-native ads, it is not used for click tracking or any
	// other ad functionality; it is only used as a destination URL
	// declaration.
	//
	// For native ads, if NativeAd.click_link_url is not set, the first
	// value of click_through_url is used to direct the user to the landing
	// page. In addition, all values are used as destination
	// URL declarations (similar to the non-native case).
	ClickThroughUrl []string `protobuf:"bytes,4,rep,name=click_through_url,json=clickThroughUrl" json:"click_through_url,omitempty"`
	// All vendor types for the ads that may be shown from this snippet. You
	// should only declare vendor ids listed in the vendors.txt file in the
	// technical documentation. We will check to ensure that the vendors you
	// declare are in the allowed_vendor_type list sent in the BidRequest for
	// AdX publishers.
	VendorType []int32 `protobuf:"varint,5,rep,name=vendor_type,json=vendorType" json:"vendor_type,omitempty"`
	// All attributes for the ads that may be shown from this snippet. See
	// buyer-declarable-creative-attributes.txt in the technical documentation
	// for a list of ids. We will check to ensure none of these attributes are
	// in the excluded_attribute list in the BidRequest.
	Attribute []int32 `protobuf:"varint,6,rep,name=attribute" json:"attribute,omitempty"`
	// All sensitive categories for the ads that may be shown from this snippet.
	// See ad-sensitive-categories.txt in the technical documentation for a list
	// of ids. We will check to ensure none of these categories were in the
	// excluded_sensitive_category list in the BidRequest.
	Category []int32 `protobuf:"varint,7,rep,name=category" json:"category,omitempty"`
	// All restricted categories for the ads that may be shown from this
	// snippet. See ad-restricted-categories.txt in the technical documentation
	// for a list of ids. We will check to ensure these categories were listed
	// in the allowed_restricted_category list in the BidRequest. If you are
	// bidding with ads in restricted categories you MUST ALWAYS declare them
	// here.
	RestrictedCategory []int32 `protobuf:"varint,17,rep,name=restricted_category,json=restrictedCategory" json:"restricted_category,omitempty"`
	// All names of the ad's advertisers.
	AdvertiserName []string `protobuf:"bytes,11,rep,name=advertiser_name,json=advertiserName" json:"advertiser_name,omitempty"`
	// This field is deprecated due to being unused.
	// For exchange bidders (third party exchanges doing real-time bidding on
	// DFP), the name of the bidder that the exchange called to provide the ad.
	// This is arbitrary UTF8 text but should be sufficient to identify the
	// bidder and should be set consistently to the same value for the same
	// bidder.
	//
	// Deprecated: Do not use.
	DEPRECATEDBidderName *string `protobuf:"bytes,22,opt,name=DEPRECATED_bidder_name,json=DEPRECATEDBidderName" json:"DEPRECATED_bidder_name,omitempty"`
	// The width and the height in pixels of the ad. Setting these is optional.
	// However, these must be set if the bid BidRequest.AdSlot has more than one
	// width and height or if BidRequest.Mobile.is_interstitial_request is true.
	Width  *int32 `protobuf:"varint,14,opt,name=width" json:"width,omitempty"`
	Height *int32 `protobuf:"varint,15,opt,name=height" json:"height,omitempty"`
	// The Agency associated with this ad. See agencies.txt file in the
	// technical documentation for a list of ids. If this ad has no associated
	// agency then the value NONE (agency_id: 1) should be used rather than
	// leaving this field unset.
	AgencyId *int64                   `protobuf:"varint,16,opt,name=agency_id,json=agencyId" json:"agency_id,omitempty"`
	Adslot   []*BidResponse_Ad_AdSlot `protobuf:"bytes,3,rep,name=adslot" json:"adslot,omitempty"`
	// The URLs to call when the impression is rendered. This is supported for
	// all inventory types and all formats.
	ImpressionTrackingUrl []string `protobuf:"bytes,19,rep,name=impression_tracking_url,json=impressionTrackingUrl" json:"impression_tracking_url,omitempty"`
	// The URLs to call when the user clicks on the ad. Currently supported only
	// for native ads and Programmatic Guaranteed deals with publisher-
	// managed creatives. In the publisher managed case, these click trackers
	// will be sent to the bidder server to server. In all other cases, these
	// will be sent from the user's device. For more information on
	// publisher-managed creatives, see
	// https://support.google.com/admanager/answer/9243220.
	ClickTrackingUrls []string `protobuf:"bytes,30,rep,name=click_tracking_urls,json=clickTrackingUrls" json:"click_tracking_urls,omitempty"`
	// Link to ad preferences page. This is only supported for native ads.
	// If present, a standard AdChoices icon is added to the native creative and
	// linked to this URL.
	AdChoicesDestinationUrl *string `protobuf:"bytes,21,opt,name=ad_choices_destination_url,json=adChoicesDestinationUrl" json:"ad_choices_destination_url,omitempty"`
	// Resources to invoke when the impression is rendered. This is supported
	// for native and banner formats only and explicitly whitelisted scripts
	// only.
	ImpressionTrackingResource []*BidResponse_Ad_ImpressionTrackingResource `protobuf:"bytes,26,rep,name=impression_tracking_resource,json=impressionTrackingResource" json:"impression_tracking_resource,omitempty"`
	SdkRenderedAd              *BidResponse_Ad_SdkRenderedAd                `protobuf:"bytes,27,opt,name=sdk_rendered_ad,json=sdkRenderedAd" json:"sdk_rendered_ad,omitempty"`
	Skadn                      *BidResponse_Ad_SKAdNetworkResponse          `protobuf:"bytes,29,opt,name=skadn" json:"skadn,omitempty"`
}

func (x *BidResponse_Ad) Reset() {
	*x = BidResponse_Ad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidResponse_Ad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidResponse_Ad) ProtoMessage() {}

func (x *BidResponse_Ad) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidResponse_Ad.ProtoReflect.Descriptor instead.
func (*BidResponse_Ad) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{1, 0}
}

func (x *BidResponse_Ad) GetEventNotificationToken() []byte {
	if x != nil {
		return x.EventNotificationToken
	}
	return nil
}

func (x *BidResponse_Ad) GetBuyerCreativeId() string {
	if x != nil && x.BuyerCreativeId != nil {
		return *x.BuyerCreativeId
	}
	return ""
}

func (x *BidResponse_Ad) GetHtmlSnippet() string {
	if x != nil && x.HtmlSnippet != nil {
		return *x.HtmlSnippet
	}
	return ""
}

func (x *BidResponse_Ad) GetVideoUrl() string {
	if x != nil && x.VideoUrl != nil {
		return *x.VideoUrl
	}
	return ""
}

func (x *BidResponse_Ad) GetVideoVastXml() string {
	if x != nil && x.VideoVastXml != nil {
		return *x.VideoVastXml
	}
	return ""
}

func (x *BidResponse_Ad) GetAmpAdUrl() string {
	if x != nil && x.AmpAdUrl != nil {
		return *x.AmpAdUrl
	}
	return ""
}

func (x *BidResponse_Ad) GetNativeAd() *BidResponse_Ad_NativeAd {
	if x != nil {
		return x.NativeAd
	}
	return nil
}

func (x *BidResponse_Ad) GetClickThroughUrl() []string {
	if x != nil {
		return x.ClickThroughUrl
	}
	return nil
}

func (x *BidResponse_Ad) GetVendorType() []int32 {
	if x != nil {
		return x.VendorType
	}
	return nil
}

func (x *BidResponse_Ad) GetAttribute() []int32 {
	if x != nil {
		return x.Attribute
	}
	return nil
}

func (x *BidResponse_Ad) GetCategory() []int32 {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *BidResponse_Ad) GetRestrictedCategory() []int32 {
	if x != nil {
		return x.RestrictedCategory
	}
	return nil
}

func (x *BidResponse_Ad) GetAdvertiserName() []string {
	if x != nil {
		return x.AdvertiserName
	}
	return nil
}

// Deprecated: Do not use.
func (x *BidResponse_Ad) GetDEPRECATEDBidderName() string {
	if x != nil && x.DEPRECATEDBidderName != nil {
		return *x.DEPRECATEDBidderName
	}
	return ""
}

func (x *BidResponse_Ad) GetWidth() int32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *BidResponse_Ad) GetHeight() int32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

func (x *BidResponse_Ad) GetAgencyId() int64 {
	if x != nil && x.AgencyId != nil {
		return *x.AgencyId
	}
	return 0
}

func (x *BidResponse_Ad) GetAdslot() []*BidResponse_Ad_AdSlot {
	if x != nil {
		return x.Adslot
	}
	return nil
}

func (x *BidResponse_Ad) GetImpressionTrackingUrl() []string {
	if x != nil {
		return x.ImpressionTrackingUrl
	}
	return nil
}

func (x *BidResponse_Ad) GetClickTrackingUrls() []string {
	if x != nil {
		return x.ClickTrackingUrls
	}
	return nil
}

func (x *BidResponse_Ad) GetAdChoicesDestinationUrl() string {
	if x != nil && x.AdChoicesDestinationUrl != nil {
		return *x.AdChoicesDestinationUrl
	}
	return ""
}

func (x *BidResponse_Ad) GetImpressionTrackingResource() []*BidResponse_Ad_ImpressionTrackingResource {
	if x != nil {
		return x.ImpressionTrackingResource
	}
	return nil
}

func (x *BidResponse_Ad) GetSdkRenderedAd() *BidResponse_Ad_SdkRenderedAd {
	if x != nil {
		return x.SdkRenderedAd
	}
	return nil
}

func (x *BidResponse_Ad) GetSkadn() *BidResponse_Ad_SKAdNetworkResponse {
	if x != nil {
		return x.Skadn
	}
	return nil
}

// The content of a native ad. Native ads consist of multiple building
// blocks, which are rendered by the publisher. Only one of the following
// should be set: html_snippet, video_url, or native_ad.
// Only set this field if the BidRequest is for a native ad
// (BidRequest.adslot.native is present).
//
type BidResponse_Ad_NativeAd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A short title for the ad.
	Headline *string `protobuf:"bytes,1,opt,name=headline" json:"headline,omitempty"`
	// A long description of the ad.
	Body *string `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
	// A label for the button that the user is supposed to click
	CallToAction *string `protobuf:"bytes,3,opt,name=call_to_action,json=callToAction" json:"call_to_action,omitempty"`
	// The name of the advertiser or sponsor, to be displayed in the ad
	// creative.
	Advertiser *string `protobuf:"bytes,4,opt,name=advertiser" json:"advertiser,omitempty"`
	// A large image.
	Image *BidResponse_Ad_NativeAd_Image `protobuf:"bytes,5,opt,name=image" json:"image,omitempty"`
	// A smaller image, for the advertiser's logo.
	Logo *BidResponse_Ad_NativeAd_Image `protobuf:"bytes,6,opt,name=logo" json:"logo,omitempty"`
	// The app icon, for app download ads.
	AppIcon *BidResponse_Ad_NativeAd_Image `protobuf:"bytes,7,opt,name=app_icon,json=appIcon" json:"app_icon,omitempty"`
	// A video in the form of either a URL for a VAST tag, or an in-line VAST
	// tag. Only set this field if VIDEO is required or recommended in the
	// BidRequest's NativeAdTemplate.
	//
	// Types that are assignable to Video:
	//	*BidResponse_Ad_NativeAd_VideoUrl
	//	*BidResponse_Ad_NativeAd_VideoVastXml
	Video isBidResponse_Ad_NativeAd_Video `protobuf_oneof:"video"`
	// The app rating in the app store. Must be in the range [0-5].
	StarRating *float64 `protobuf:"fixed64,8,opt,name=star_rating,json=starRating" json:"star_rating,omitempty"`
	// The URL that the browser/SDK will load when the user clicks the ad.
	// This can be the landing page directly, or the first step of a redirect
	// chain that eventually leads to it. For backward compatibility, if this
	// is not set, the first Ad.click_through_url is used.
	ClickLinkUrl *string `protobuf:"bytes,14,opt,name=click_link_url,json=clickLinkUrl" json:"click_link_url,omitempty"`
	// This field is deprecated in favor of the repeated click_tracking_urls
	// field at the BidResponse.Ad level. It will be removed at the end of
	// Q2 2022.
	// The URL to use for click tracking. The SDK pings click tracking url on
	// a background thread. When resolving the url, HTTP 30x redirects are
	// followed. The SDK ignores the contents of the response; this URL
	// has no effect on the landing page for the user.
	//
	// Deprecated: Do not use.
	DEPRECATEDClickTrackingUrl *string `protobuf:"bytes,11,opt,name=DEPRECATED_click_tracking_url,json=DEPRECATEDClickTrackingUrl" json:"DEPRECATED_click_tracking_url,omitempty"`
	// This field is deprecated in favor of the click_tracking_urls
	// field at the BidResponse.Ad level. It will be removed at the end of
	// Q2 2022.
	// The URLs to use for click tracking. This will be used throughout the
	// serving stack and will incorporate any URL in click_tracking_url.
	//
	// Deprecated: Do not use.
	DEPRECATEDClickTrackingUrls []string `protobuf:"bytes,15,rep,name=DEPRECATED_click_tracking_urls,json=DEPRECATEDClickTrackingUrls" json:"DEPRECATED_click_tracking_urls,omitempty"`
	// The price of the promoted app including the currency info.
	Price *string `protobuf:"bytes,10,opt,name=price" json:"price,omitempty"`
}

func (x *BidResponse_Ad_NativeAd) Reset() {
	*x = BidResponse_Ad_NativeAd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidResponse_Ad_NativeAd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidResponse_Ad_NativeAd) ProtoMessage() {}

func (x *BidResponse_Ad_NativeAd) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidResponse_Ad_NativeAd.ProtoReflect.Descriptor instead.
func (*BidResponse_Ad_NativeAd) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *BidResponse_Ad_NativeAd) GetHeadline() string {
	if x != nil && x.Headline != nil {
		return *x.Headline
	}
	return ""
}

func (x *BidResponse_Ad_NativeAd) GetBody() string {
	if x != nil && x.Body != nil {
		return *x.Body
	}
	return ""
}

func (x *BidResponse_Ad_NativeAd) GetCallToAction() string {
	if x != nil && x.CallToAction != nil {
		return *x.CallToAction
	}
	return ""
}

func (x *BidResponse_Ad_NativeAd) GetAdvertiser() string {
	if x != nil && x.Advertiser != nil {
		return *x.Advertiser
	}
	return ""
}

func (x *BidResponse_Ad_NativeAd) GetImage() *BidResponse_Ad_NativeAd_Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *BidResponse_Ad_NativeAd) GetLogo() *BidResponse_Ad_NativeAd_Image {
	if x != nil {
		return x.Logo
	}
	return nil
}

func (x *BidResponse_Ad_NativeAd) GetAppIcon() *BidResponse_Ad_NativeAd_Image {
	if x != nil {
		return x.AppIcon
	}
	return nil
}

func (m *BidResponse_Ad_NativeAd) GetVideo() isBidResponse_Ad_NativeAd_Video {
	if m != nil {
		return m.Video
	}
	return nil
}

func (x *BidResponse_Ad_NativeAd) GetVideoUrl() string {
	if x, ok := x.GetVideo().(*BidResponse_Ad_NativeAd_VideoUrl); ok {
		return x.VideoUrl
	}
	return ""
}

func (x *BidResponse_Ad_NativeAd) GetVideoVastXml() string {
	if x, ok := x.GetVideo().(*BidResponse_Ad_NativeAd_VideoVastXml); ok {
		return x.VideoVastXml
	}
	return ""
}

func (x *BidResponse_Ad_NativeAd) GetStarRating() float64 {
	if x != nil && x.StarRating != nil {
		return *x.StarRating
	}
	return 0
}

func (x *BidResponse_Ad_NativeAd) GetClickLinkUrl() string {
	if x != nil && x.ClickLinkUrl != nil {
		return *x.ClickLinkUrl
	}
	return ""
}

// Deprecated: Do not use.
func (x *BidResponse_Ad_NativeAd) GetDEPRECATEDClickTrackingUrl() string {
	if x != nil && x.DEPRECATEDClickTrackingUrl != nil {
		return *x.DEPRECATEDClickTrackingUrl
	}
	return ""
}

// Deprecated: Do not use.
func (x *BidResponse_Ad_NativeAd) GetDEPRECATEDClickTrackingUrls() []string {
	if x != nil {
		return x.DEPRECATEDClickTrackingUrls
	}
	return nil
}

func (x *BidResponse_Ad_NativeAd) GetPrice() string {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return ""
}

type isBidResponse_Ad_NativeAd_Video interface {
	isBidResponse_Ad_NativeAd_Video()
}

type BidResponse_Ad_NativeAd_VideoUrl struct {
	// The URL to fetch a video ad. The URL should return an XML response
	// that conforms to VAST standards.
	VideoUrl string `protobuf:"bytes,13,opt,name=video_url,json=videoUrl,oneof"`
}

type BidResponse_Ad_NativeAd_VideoVastXml struct {
	// The VAST document to be returned. Max size is 100kB.
	VideoVastXml string `protobuf:"bytes,16,opt,name=video_vast_xml,json=videoVastXml,oneof"`
}

func (*BidResponse_Ad_NativeAd_VideoUrl) isBidResponse_Ad_NativeAd_Video() {}

func (*BidResponse_Ad_NativeAd_VideoVastXml) isBidResponse_Ad_NativeAd_Video() {}

type BidResponse_Ad_AdSlot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The slot id from the BidRequest that the ad may appear in.
	Id *int32 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	// The maximum CPM you want to be charged if you win the auction for this
	// ad slot, expressed in micros of the bidding currency. For example, to
	// bid a CPM of 1.29 USD, set max_cpm_micros = 1290000. Winning bids are
	// rounded up to billable units. For example, in USD, bids are rounded up
	// to the next multiple of 10,000 micros (one cent).
	// The bidding currency is determined by:
	// 1. The bidder-level currency, if configured.
	// 2. Otherwise, the currency of the buyer account indicated by the
	// billing ID in the billing_id field.
	// 3. If billing_id is empty, the currency of the buyer account indicated
	// by the sole billing ID in the bid request.
	MaxCpmMicros *int64 `protobuf:"varint,2,req,name=max_cpm_micros,json=maxCpmMicros" json:"max_cpm_micros,omitempty"`
	// The minimum CPM you want to be charged if you win the auction for this
	// ad slot, expressed in micros of the bidding currency. This may
	// represent a second price if you choose max_cpm as the highest of
	// several bids, or some form of reserve price if you wish to override the
	// reserve price set by the publisher. The bid must be less than or equal
	// to max_cpm_micros or it will be ignored. This field is optional and
	// does not need to be set. This field is not applicable when responding
	// to bid requests with auction_type set to FIRST_PRICE. The bidding
	// currency is determined by:
	// 1. The bidder-level currency, if configured.
	// 2. Otherwise, the currency of the buyer account indicated by the
	// billing ID in the billing_id field.
	// 3. If billing_id is empty, the currency of the buyer account indicated
	// by the sole billing ID in the bid request.
	MinCpmMicros *int64 `protobuf:"varint,3,opt,name=min_cpm_micros,json=minCpmMicros" json:"min_cpm_micros,omitempty"`
	// The currency in which max_cpm_micros and min_cpm_micros are given,
	// using ISO-4217 alpha codes. This field will be required starting in Q4
	// 2022. If this field is populated and differs from the bidding currency,
	// the bid will be filtered. If this field is not populated, the currency
	// will be assumed to be the bidding currency. The bidding currency is
	// determined by:
	// 1. The bidder-level currency, if configured in RTB account settings.
	// 2. Otherwise, the currency of the buyer account indicated by the
	// billing ID in the billing_id field of the bid response.
	// 3. Otherwise, if billing_id is not populated in the bid response, the
	// currency of the buyer account indicated by the sole billing ID in the
	// bid request.
	// The currency of the buyer account is set on account creation and can be
	// checked by contacting a Technical Account Manager.
	Currency *string `protobuf:"bytes,15,opt,name=currency" json:"currency,omitempty"`
	// Billing id to attribute this impression to. The value must be in the
	// set of billing ids for this slot that were sent in the
	// BidRequest.AdSlot.matching_ad_data.billing_id. This must always be set
	// if the BidRequest has more than one
	// BidRequest.AdSlot.matching_ad_data.billing_id or if the bidder has
	// active child seats.
	BillingId *int64 `protobuf:"varint,4,opt,name=billing_id,json=billingId" json:"billing_id,omitempty"`
	// The deal id that you want this bid to participate in. Leave unset
	// or set it to "1" if a deal is available but you want to
	// ignore the deal and participate in the open auction.
	DealId *int64 `protobuf:"varint,5,opt,name=deal_id,json=dealId,def=0" json:"deal_id,omitempty"`
	// For exchange bidders (third party exchanges doing real-time bidding on
	// DFP), the deal id from the exchange's namespace that is associated with
	// this bid and reported to publishers. Leave unset if there is no
	// associated deal. This is arbitrary UTF8 text and must be at most 64
	// bytes.
	ExchangeDealId   *string                                 `protobuf:"bytes,6,opt,name=exchange_deal_id,json=exchangeDealId" json:"exchange_deal_id,omitempty"`
	ExchangeDealType *BidResponse_Ad_AdSlot_ExchangeDealType `protobuf:"varint,7,opt,name=exchange_deal_type,json=exchangeDealType,enum=BidResponse_Ad_AdSlot_ExchangeDealType,def=0" json:"exchange_deal_type,omitempty"`
	// Buyer declared ID which will be used to break down spend and invalid
	// traffic metrics in IVT transparency reporting in Query Tool. Note that
	// IDs with fewer than 1000 impressions will not be used to break down
	// metrics. IDs longer than 64 bytes will be ignored.
	BuyerReportingId *string `protobuf:"bytes,8,opt,name=buyer_reporting_id,json=buyerReportingId" json:"buyer_reporting_id,omitempty"`
	// Token used to identify end third party buyer information if an
	// exchange as an open bidder is an intermediary. This is obtained from
	// the third party buyer and must be passed to Google unaltered in the bid
	// response.
	ThirdPartyBuyerToken *string                               `protobuf:"bytes,12,opt,name=third_party_buyer_token,json=thirdPartyBuyerToken" json:"third_party_buyer_token,omitempty"`
	FrequencyCap         []*BidResponse_Ad_AdSlot_FrequencyCap `protobuf:"bytes,16,rep,name=frequency_cap,json=frequencyCap" json:"frequency_cap,omitempty"`
}

// Default values for BidResponse_Ad_AdSlot fields.
const (
	Default_BidResponse_Ad_AdSlot_DealId           = int64(0)
	Default_BidResponse_Ad_AdSlot_ExchangeDealType = BidResponse_Ad_AdSlot_OPEN_AUCTION
)

func (x *BidResponse_Ad_AdSlot) Reset() {
	*x = BidResponse_Ad_AdSlot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidResponse_Ad_AdSlot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidResponse_Ad_AdSlot) ProtoMessage() {}

func (x *BidResponse_Ad_AdSlot) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidResponse_Ad_AdSlot.ProtoReflect.Descriptor instead.
func (*BidResponse_Ad_AdSlot) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{1, 0, 1}
}

func (x *BidResponse_Ad_AdSlot) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *BidResponse_Ad_AdSlot) GetMaxCpmMicros() int64 {
	if x != nil && x.MaxCpmMicros != nil {
		return *x.MaxCpmMicros
	}
	return 0
}

func (x *BidResponse_Ad_AdSlot) GetMinCpmMicros() int64 {
	if x != nil && x.MinCpmMicros != nil {
		return *x.MinCpmMicros
	}
	return 0
}

func (x *BidResponse_Ad_AdSlot) GetCurrency() string {
	if x != nil && x.Currency != nil {
		return *x.Currency
	}
	return ""
}

func (x *BidResponse_Ad_AdSlot) GetBillingId() int64 {
	if x != nil && x.BillingId != nil {
		return *x.BillingId
	}
	return 0
}

func (x *BidResponse_Ad_AdSlot) GetDealId() int64 {
	if x != nil && x.DealId != nil {
		return *x.DealId
	}
	return Default_BidResponse_Ad_AdSlot_DealId
}

func (x *BidResponse_Ad_AdSlot) GetExchangeDealId() string {
	if x != nil && x.ExchangeDealId != nil {
		return *x.ExchangeDealId
	}
	return ""
}

func (x *BidResponse_Ad_AdSlot) GetExchangeDealType() BidResponse_Ad_AdSlot_ExchangeDealType {
	if x != nil && x.ExchangeDealType != nil {
		return *x.ExchangeDealType
	}
	return Default_BidResponse_Ad_AdSlot_ExchangeDealType
}

func (x *BidResponse_Ad_AdSlot) GetBuyerReportingId() string {
	if x != nil && x.BuyerReportingId != nil {
		return *x.BuyerReportingId
	}
	return ""
}

func (x *BidResponse_Ad_AdSlot) GetThirdPartyBuyerToken() string {
	if x != nil && x.ThirdPartyBuyerToken != nil {
		return *x.ThirdPartyBuyerToken
	}
	return ""
}

func (x *BidResponse_Ad_AdSlot) GetFrequencyCap() []*BidResponse_Ad_AdSlot_FrequencyCap {
	if x != nil {
		return x.FrequencyCap
	}
	return nil
}

type BidResponse_Ad_ImpressionTrackingResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URL of a Javascript resource. The URLs should not contain script
	// tags. For example: "https://mycdn.com/tracker.js".
	ScriptUrl *string                                             `protobuf:"bytes,1,opt,name=script_url,json=scriptUrl" json:"script_url,omitempty"`
	Context   []BidResponse_Ad_ImpressionTrackingResource_Context `protobuf:"varint,2,rep,name=context,enum=BidResponse_Ad_ImpressionTrackingResource_Context" json:"context,omitempty"`
	// Parameters associated with the resource that will be passed to the
	// resource when it is loaded. The format of the parameters is dependent
	// on the script vendor.
	VerificationParameters *string `protobuf:"bytes,3,opt,name=verification_parameters,json=verificationParameters" json:"verification_parameters,omitempty"`
	// Used to uniquely identify the verification script provider.
	VendorKey *string `protobuf:"bytes,4,opt,name=vendor_key,json=vendorKey" json:"vendor_key,omitempty"`
}

func (x *BidResponse_Ad_ImpressionTrackingResource) Reset() {
	*x = BidResponse_Ad_ImpressionTrackingResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidResponse_Ad_ImpressionTrackingResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidResponse_Ad_ImpressionTrackingResource) ProtoMessage() {}

func (x *BidResponse_Ad_ImpressionTrackingResource) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidResponse_Ad_ImpressionTrackingResource.ProtoReflect.Descriptor instead.
func (*BidResponse_Ad_ImpressionTrackingResource) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{1, 0, 2}
}

func (x *BidResponse_Ad_ImpressionTrackingResource) GetScriptUrl() string {
	if x != nil && x.ScriptUrl != nil {
		return *x.ScriptUrl
	}
	return ""
}

func (x *BidResponse_Ad_ImpressionTrackingResource) GetContext() []BidResponse_Ad_ImpressionTrackingResource_Context {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *BidResponse_Ad_ImpressionTrackingResource) GetVerificationParameters() string {
	if x != nil && x.VerificationParameters != nil {
		return *x.VerificationParameters
	}
	return ""
}

func (x *BidResponse_Ad_ImpressionTrackingResource) GetVendorKey() string {
	if x != nil && x.VendorKey != nil {
		return *x.VendorKey
	}
	return ""
}

// An ad that will be rendered by an SDK known to the buyer. This can only
// be used when the BidRequest included a mobile.installed_sdk submessage.
type BidResponse_Ad_SdkRenderedAd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier for the SDK that will render the ad. Must match a
	// mobile.installed_sdk.id sent in the corresponding bid request.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Data to pass to the SDK in order to render the ad. This data is opaque
	// to the publisher and to Google.
	RenderingData *string                                  `protobuf:"bytes,2,opt,name=rendering_data,json=renderingData" json:"rendering_data,omitempty"`
	DeclaredAd    *BidResponse_Ad_SdkRenderedAd_DeclaredAd `protobuf:"bytes,6,opt,name=declared_ad,json=declaredAd" json:"declared_ad,omitempty"`
}

func (x *BidResponse_Ad_SdkRenderedAd) Reset() {
	*x = BidResponse_Ad_SdkRenderedAd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidResponse_Ad_SdkRenderedAd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidResponse_Ad_SdkRenderedAd) ProtoMessage() {}

func (x *BidResponse_Ad_SdkRenderedAd) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidResponse_Ad_SdkRenderedAd.ProtoReflect.Descriptor instead.
func (*BidResponse_Ad_SdkRenderedAd) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{1, 0, 3}
}

func (x *BidResponse_Ad_SdkRenderedAd) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *BidResponse_Ad_SdkRenderedAd) GetRenderingData() string {
	if x != nil && x.RenderingData != nil {
		return *x.RenderingData
	}
	return ""
}

func (x *BidResponse_Ad_SdkRenderedAd) GetDeclaredAd() *BidResponse_Ad_SdkRenderedAd_DeclaredAd {
	if x != nil {
		return x.DeclaredAd
	}
	return nil
}

// Advertiser's SKAdNetwork information to support app installation
// attribution for iOS 14 and later. Apple's SKAdNetwork API helps
// advertisers measure ad-driven app installation by sending a postback
// to the ad network after a successful install. Ad networks will need
// to send their network ID and signed advertiser information to allow
// an install to be attributed to the ad impression.
// For more info visit:
// https://developer.apple.com/documentation/storekit/skadnetwork
type BidResponse_Ad_SKAdNetworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version of SKAdNetwork supported by the advertiser. Also used to
	// specify how the signature was generated by the advertiser. This
	// should match the version from BidRequest.mobile.skad.version.
	Version *string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
	// Ad network identifier used in signature. This should match one of the
	// items in BidRequest.mobile.skad.skadnetids.
	Network *string `protobuf:"bytes,2,opt,name=network" json:"network,omitempty"`
	// Campaign ID compatible with Apple's spec.
	Campaign *int64 `protobuf:"varint,3,opt,name=campaign" json:"campaign,omitempty"`
	// ID of advertiser's app in Apple's app store.
	Itunesitem *string                                        `protobuf:"bytes,4,opt,name=itunesitem" json:"itunesitem,omitempty"`
	Fidelities []*BidResponse_Ad_SKAdNetworkResponse_Fidelity `protobuf:"bytes,9,rep,name=fidelities" json:"fidelities,omitempty"`
	// A unique all-lowercase UUID generated by the advertiser to use for
	// generating the signature.
	// Note:  This field will be deprecated in favor of the
	// BidResponse.ad.skadn.fidelities.nonce field to support multiple
	// fidelity types.
	Nonce *string `protobuf:"bytes,5,opt,name=nonce" json:"nonce,omitempty"`
	// ID of publisher's app in Apple's app store. This should match the ID
	// from BidRequest.mobile.skad.sourceapp.
	Sourceapp *string `protobuf:"bytes,6,opt,name=sourceapp" json:"sourceapp,omitempty"`
	// Unix time in millis used at the time of signature generation.
	// Note:  This field will be deprecated in favor of the
	// BidResponse.ad.skadn.fidelities.timestamp field to support multiple
	// fidelity types.
	Timestamp *int64 `protobuf:"varint,7,opt,name=timestamp" json:"timestamp,omitempty"`
	// SKAdNetwork signature as specified by Apple.
	// Note:  This field will be deprecated in favor of the
	// BidResponse.ad.skadn.fidelities.signature field to support multiple
	// fidelity types.
	Signature    *string                                                `protobuf:"bytes,8,opt,name=signature" json:"signature,omitempty"`
	SkadnOptions *BidResponse_Ad_SKAdNetworkResponse_SKAdNetworkOptions `protobuf:"bytes,10,opt,name=skadn_options,json=skadnOptions" json:"skadn_options,omitempty"`
}

func (x *BidResponse_Ad_SKAdNetworkResponse) Reset() {
	*x = BidResponse_Ad_SKAdNetworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidResponse_Ad_SKAdNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidResponse_Ad_SKAdNetworkResponse) ProtoMessage() {}

func (x *BidResponse_Ad_SKAdNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidResponse_Ad_SKAdNetworkResponse.ProtoReflect.Descriptor instead.
func (*BidResponse_Ad_SKAdNetworkResponse) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{1, 0, 4}
}

func (x *BidResponse_Ad_SKAdNetworkResponse) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *BidResponse_Ad_SKAdNetworkResponse) GetNetwork() string {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return ""
}

func (x *BidResponse_Ad_SKAdNetworkResponse) GetCampaign() int64 {
	if x != nil && x.Campaign != nil {
		return *x.Campaign
	}
	return 0
}

func (x *BidResponse_Ad_SKAdNetworkResponse) GetItunesitem() string {
	if x != nil && x.Itunesitem != nil {
		return *x.Itunesitem
	}
	return ""
}

func (x *BidResponse_Ad_SKAdNetworkResponse) GetFidelities() []*BidResponse_Ad_SKAdNetworkResponse_Fidelity {
	if x != nil {
		return x.Fidelities
	}
	return nil
}

func (x *BidResponse_Ad_SKAdNetworkResponse) GetNonce() string {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return ""
}

func (x *BidResponse_Ad_SKAdNetworkResponse) GetSourceapp() string {
	if x != nil && x.Sourceapp != nil {
		return *x.Sourceapp
	}
	return ""
}

func (x *BidResponse_Ad_SKAdNetworkResponse) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *BidResponse_Ad_SKAdNetworkResponse) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

func (x *BidResponse_Ad_SKAdNetworkResponse) GetSkadnOptions() *BidResponse_Ad_SKAdNetworkResponse_SKAdNetworkOptions {
	if x != nil {
		return x.SkadnOptions
	}
	return nil
}

type BidResponse_Ad_NativeAd_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url *string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	// Image width and height are specified in pixels. You may provide a
	// larger image than was requested, so long as the aspect ratio is
	// preserved.
	Width  *int32 `protobuf:"varint,2,opt,name=width" json:"width,omitempty"`
	Height *int32 `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
}

func (x *BidResponse_Ad_NativeAd_Image) Reset() {
	*x = BidResponse_Ad_NativeAd_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidResponse_Ad_NativeAd_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidResponse_Ad_NativeAd_Image) ProtoMessage() {}

func (x *BidResponse_Ad_NativeAd_Image) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidResponse_Ad_NativeAd_Image.ProtoReflect.Descriptor instead.
func (*BidResponse_Ad_NativeAd_Image) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{1, 0, 0, 0}
}

func (x *BidResponse_Ad_NativeAd_Image) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *BidResponse_Ad_NativeAd_Image) GetWidth() int32 {
	if x != nil && x.Width != nil {
		return *x.Width
	}
	return 0
}

func (x *BidResponse_Ad_NativeAd_Image) GetHeight() int32 {
	if x != nil && x.Height != nil {
		return *x.Height
	}
	return 0
}

// Experimental feature; may be subject to change. See
// https://support.google.com/authorizedbuyers/answer/10890762 for more
// information.
//
// Specifies frequency capping to be applied to the bid. Impressions for
// each user are capped at the level specified by frequency_cap_id. A bid
// will not participate in the auction if an additional impression for the
// user would violate any of the specified caps. Multiple frequency caps
// can be specified for the same frequency_cap_id.
//
// A bid is filtered before the auction if the frequency cap is malformed.
// Instances where the cap is malformed include:
//  - frequency_cap_id is empty or is very long
//  - max_mpressions or time_range are non-positive
//  - there are a large number of frequency caps for a single bid
//  - time_unit is not specified
//
// Note that if a subsequent bid with the same frequency_cap_id uses a
// different duration (represented by time_unit and time_range) then
// impressions counted against the old frequency cap will not count
// against the new one and vice versa.
type BidResponse_Ad_AdSlot_FrequencyCap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An ID that can represent a bidder's use-case for frequency capping;
	// for example, it could represent their campaign, ad, line item, etc.
	// It should not contain any user-specific information or identifiers
	// and should not be longer than 64 characters.
	FrequencyCapId *string `protobuf:"bytes,1,opt,name=frequency_cap_id,json=frequencyCapId" json:"frequency_cap_id,omitempty"`
	// The unit of time used to specify the time window for which a
	// frequency cap applies.
	TimeUnit *BidResponse_Ad_AdSlot_FrequencyCap_TimeUnit `protobuf:"varint,2,opt,name=time_unit,json=timeUnit,enum=BidResponse_Ad_AdSlot_FrequencyCap_TimeUnit" json:"time_unit,omitempty"`
	// The length of the time window, in units specified by time_unit, for
	// which the frequency cap applies. For instance, if time_unit=WEEK and
	// time_range=3, then capping is applied for a three week period. If the
	// time_unit=INDEFINITE, this will be ignored.
	TimeRange *int32 `protobuf:"varint,3,opt,name=time_range,json=timeRange,def=1" json:"time_range,omitempty"`
	// The maximum number of impressions allowed to be shown to a user for
	// the provided frequency_cap_id within the time window described by
	// time_unit and time_range.
	MaxImpressions *int32 `protobuf:"varint,4,opt,name=max_impressions,json=maxImpressions" json:"max_impressions,omitempty"`
}

// Default values for BidResponse_Ad_AdSlot_FrequencyCap fields.
const (
	Default_BidResponse_Ad_AdSlot_FrequencyCap_TimeRange = int32(1)
)

func (x *BidResponse_Ad_AdSlot_FrequencyCap) Reset() {
	*x = BidResponse_Ad_AdSlot_FrequencyCap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidResponse_Ad_AdSlot_FrequencyCap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidResponse_Ad_AdSlot_FrequencyCap) ProtoMessage() {}

func (x *BidResponse_Ad_AdSlot_FrequencyCap) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidResponse_Ad_AdSlot_FrequencyCap.ProtoReflect.Descriptor instead.
func (*BidResponse_Ad_AdSlot_FrequencyCap) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{1, 0, 1, 0}
}

func (x *BidResponse_Ad_AdSlot_FrequencyCap) GetFrequencyCapId() string {
	if x != nil && x.FrequencyCapId != nil {
		return *x.FrequencyCapId
	}
	return ""
}

func (x *BidResponse_Ad_AdSlot_FrequencyCap) GetTimeUnit() BidResponse_Ad_AdSlot_FrequencyCap_TimeUnit {
	if x != nil && x.TimeUnit != nil {
		return *x.TimeUnit
	}
	return BidResponse_Ad_AdSlot_FrequencyCap_UNKNOWN_TIME_UNIT
}

func (x *BidResponse_Ad_AdSlot_FrequencyCap) GetTimeRange() int32 {
	if x != nil && x.TimeRange != nil {
		return *x.TimeRange
	}
	return Default_BidResponse_Ad_AdSlot_FrequencyCap_TimeRange
}

func (x *BidResponse_Ad_AdSlot_FrequencyCap) GetMaxImpressions() int32 {
	if x != nil && x.MaxImpressions != nil {
		return *x.MaxImpressions
	}
	return 0
}

// Declared ad assets to support creative scanning, classification, and
// enforcement of ad policy and publisher blocks for ads rendered with a
// custom SDK.
type BidResponse_Ad_SdkRenderedAd_DeclaredAd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ad content used by SDK to render an ad.
	//
	// Types that are assignable to Content:
	//	*BidResponse_Ad_SdkRenderedAd_DeclaredAd_HtmlSnippet
	//	*BidResponse_Ad_SdkRenderedAd_DeclaredAd_VideoUrl
	//	*BidResponse_Ad_SdkRenderedAd_DeclaredAd_VideoVastXml
	//	*BidResponse_Ad_SdkRenderedAd_DeclaredAd_NativeAd
	Content isBidResponse_Ad_SdkRenderedAd_DeclaredAd_Content `protobuf_oneof:"content"`
	// The final landing pages of the SDK-rendered ad.
	ClickThroughUrl []string `protobuf:"bytes,4,rep,name=click_through_url,json=clickThroughUrl" json:"click_through_url,omitempty"`
}

func (x *BidResponse_Ad_SdkRenderedAd_DeclaredAd) Reset() {
	*x = BidResponse_Ad_SdkRenderedAd_DeclaredAd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidResponse_Ad_SdkRenderedAd_DeclaredAd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidResponse_Ad_SdkRenderedAd_DeclaredAd) ProtoMessage() {}

func (x *BidResponse_Ad_SdkRenderedAd_DeclaredAd) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidResponse_Ad_SdkRenderedAd_DeclaredAd.ProtoReflect.Descriptor instead.
func (*BidResponse_Ad_SdkRenderedAd_DeclaredAd) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{1, 0, 3, 0}
}

func (m *BidResponse_Ad_SdkRenderedAd_DeclaredAd) GetContent() isBidResponse_Ad_SdkRenderedAd_DeclaredAd_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (x *BidResponse_Ad_SdkRenderedAd_DeclaredAd) GetHtmlSnippet() string {
	if x, ok := x.GetContent().(*BidResponse_Ad_SdkRenderedAd_DeclaredAd_HtmlSnippet); ok {
		return x.HtmlSnippet
	}
	return ""
}

func (x *BidResponse_Ad_SdkRenderedAd_DeclaredAd) GetVideoUrl() string {
	if x, ok := x.GetContent().(*BidResponse_Ad_SdkRenderedAd_DeclaredAd_VideoUrl); ok {
		return x.VideoUrl
	}
	return ""
}

func (x *BidResponse_Ad_SdkRenderedAd_DeclaredAd) GetVideoVastXml() string {
	if x, ok := x.GetContent().(*BidResponse_Ad_SdkRenderedAd_DeclaredAd_VideoVastXml); ok {
		return x.VideoVastXml
	}
	return ""
}

func (x *BidResponse_Ad_SdkRenderedAd_DeclaredAd) GetNativeAd() *BidResponse_Ad_NativeAd {
	if x, ok := x.GetContent().(*BidResponse_Ad_SdkRenderedAd_DeclaredAd_NativeAd); ok {
		return x.NativeAd
	}
	return nil
}

func (x *BidResponse_Ad_SdkRenderedAd_DeclaredAd) GetClickThroughUrl() []string {
	if x != nil {
		return x.ClickThroughUrl
	}
	return nil
}

type isBidResponse_Ad_SdkRenderedAd_DeclaredAd_Content interface {
	isBidResponse_Ad_SdkRenderedAd_DeclaredAd_Content()
}

type BidResponse_Ad_SdkRenderedAd_DeclaredAd_HtmlSnippet struct {
	// The HTML snippet representative of the SDK-rendered ad.
	HtmlSnippet string `protobuf:"bytes,1,opt,name=html_snippet,json=htmlSnippet,oneof"`
}

type BidResponse_Ad_SdkRenderedAd_DeclaredAd_VideoUrl struct {
	// The URL to the VAST asset used in the SDK-rendered ad.
	VideoUrl string `protobuf:"bytes,2,opt,name=video_url,json=videoUrl,oneof"`
}

type BidResponse_Ad_SdkRenderedAd_DeclaredAd_VideoVastXml struct {
	// The VAST document used to render custom SDK-rendered ad. This
	// document should conform to the VAST 2.0 or 3.0 standard.
	VideoVastXml string `protobuf:"bytes,5,opt,name=video_vast_xml,json=videoVastXml,oneof"`
}

type BidResponse_Ad_SdkRenderedAd_DeclaredAd_NativeAd struct {
	// The content of a native ad. Native ads consist of multiple building
	// blocks (such as image and text), which are rendered by the buyer
	// SDK.
	NativeAd *BidResponse_Ad_NativeAd `protobuf:"bytes,6,opt,name=native_ad,json=nativeAd,oneof"`
}

func (*BidResponse_Ad_SdkRenderedAd_DeclaredAd_HtmlSnippet) isBidResponse_Ad_SdkRenderedAd_DeclaredAd_Content() {
}

func (*BidResponse_Ad_SdkRenderedAd_DeclaredAd_VideoUrl) isBidResponse_Ad_SdkRenderedAd_DeclaredAd_Content() {
}

func (*BidResponse_Ad_SdkRenderedAd_DeclaredAd_VideoVastXml) isBidResponse_Ad_SdkRenderedAd_DeclaredAd_Content() {
}

func (*BidResponse_Ad_SdkRenderedAd_DeclaredAd_NativeAd) isBidResponse_Ad_SdkRenderedAd_DeclaredAd_Content() {
}

// SKAdNetwork API starting from version 2.2 supports multiple ad
// presentation options specified by the `fidelity-type` parameter of the
// SKAdNetwork signature.  This holds parameters used to generate the
// signature that would be different for each fidelity type supported.
// For more info visit:
// https://developer.apple.com/documentation/storekit/skadnetwork/signing_and_providing_ads
type BidResponse_Ad_SKAdNetworkResponse_Fidelity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The fidelity type of the attribution to track.
	FidelityType *SKAdNetworkFidelityType `protobuf:"varint,1,opt,name=fidelity_type,json=fidelityType,enum=SKAdNetworkFidelityType,def=1" json:"fidelity_type,omitempty"`
	// A unique all-lowercase UUID generated by the advertiser to use for
	// generating the signature.
	Nonce *string `protobuf:"bytes,2,opt,name=nonce" json:"nonce,omitempty"`
	// Unix time in millis used at the time of signature generation.
	Timestamp *int64 `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	// SKAdNetwork signature as specified by Apple.
	Signature *string `protobuf:"bytes,4,opt,name=signature" json:"signature,omitempty"`
}

// Default values for BidResponse_Ad_SKAdNetworkResponse_Fidelity fields.
const (
	Default_BidResponse_Ad_SKAdNetworkResponse_Fidelity_FidelityType = SKAdNetworkFidelityType_STOREKIT_RENDERED_ADS
)

func (x *BidResponse_Ad_SKAdNetworkResponse_Fidelity) Reset() {
	*x = BidResponse_Ad_SKAdNetworkResponse_Fidelity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidResponse_Ad_SKAdNetworkResponse_Fidelity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidResponse_Ad_SKAdNetworkResponse_Fidelity) ProtoMessage() {}

func (x *BidResponse_Ad_SKAdNetworkResponse_Fidelity) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidResponse_Ad_SKAdNetworkResponse_Fidelity.ProtoReflect.Descriptor instead.
func (*BidResponse_Ad_SKAdNetworkResponse_Fidelity) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{1, 0, 4, 0}
}

func (x *BidResponse_Ad_SKAdNetworkResponse_Fidelity) GetFidelityType() SKAdNetworkFidelityType {
	if x != nil && x.FidelityType != nil {
		return *x.FidelityType
	}
	return Default_BidResponse_Ad_SKAdNetworkResponse_Fidelity_FidelityType
}

func (x *BidResponse_Ad_SKAdNetworkResponse_Fidelity) GetNonce() string {
	if x != nil && x.Nonce != nil {
		return *x.Nonce
	}
	return ""
}

func (x *BidResponse_Ad_SKAdNetworkResponse_Fidelity) GetTimestamp() int64 {
	if x != nil && x.Timestamp != nil {
		return *x.Timestamp
	}
	return 0
}

func (x *BidResponse_Ad_SKAdNetworkResponse_Fidelity) GetSignature() string {
	if x != nil && x.Signature != nil {
		return *x.Signature
	}
	return ""
}

// Google Mobile Ads SDK options for SKAdNetwork handling.
type BidResponse_Ad_SKAdNetworkResponse_SKAdNetworkOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// By default, SKAdNetwork attribution will only be initiated if the
	// click-through URL lands on the app store, either as a direct link to
	// the app store or as the final destination of a server-side redirect
	// chain.  This flag enables GMA SDK to always initiate SKAdNetwork
	// attribution on-click regardless of the detected click's final
	// destination URL. Note that enabling this will launch the app store
	// even for clicks that are not meant to open the app store, for example
	// clicks on Ad Choices icon. For more info, see:
	// https://developers.google.com/authorized-buyers/rtb/skadnetwork
	AlwaysOpenAppstore *bool `protobuf:"varint,1,opt,name=always_open_appstore,json=alwaysOpenAppstore,def=0" json:"always_open_appstore,omitempty"`
}

// Default values for BidResponse_Ad_SKAdNetworkResponse_SKAdNetworkOptions fields.
const (
	Default_BidResponse_Ad_SKAdNetworkResponse_SKAdNetworkOptions_AlwaysOpenAppstore = bool(false)
)

func (x *BidResponse_Ad_SKAdNetworkResponse_SKAdNetworkOptions) Reset() {
	*x = BidResponse_Ad_SKAdNetworkResponse_SKAdNetworkOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_googleDspManager_models_proto_r_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidResponse_Ad_SKAdNetworkResponse_SKAdNetworkOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidResponse_Ad_SKAdNetworkResponse_SKAdNetworkOptions) ProtoMessage() {}

func (x *BidResponse_Ad_SKAdNetworkResponse_SKAdNetworkOptions) ProtoReflect() protoreflect.Message {
	mi := &file_googleDspManager_models_proto_r_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidResponse_Ad_SKAdNetworkResponse_SKAdNetworkOptions.ProtoReflect.Descriptor instead.
func (*BidResponse_Ad_SKAdNetworkResponse_SKAdNetworkOptions) Descriptor() ([]byte, []int) {
	return file_googleDspManager_models_proto_r_proto_rawDescGZIP(), []int{1, 0, 4, 1}
}

func (x *BidResponse_Ad_SKAdNetworkResponse_SKAdNetworkOptions) GetAlwaysOpenAppstore() bool {
	if x != nil && x.AlwaysOpenAppstore != nil {
		return *x.AlwaysOpenAppstore
	}
	return Default_BidResponse_Ad_SKAdNetworkResponse_SKAdNetworkOptions_AlwaysOpenAppstore
}

var File_googleDspManager_models_proto_r_proto protoreflect.FileDescriptor

var file_googleDspManager_models_proto_r_proto_rawDesc = []byte{
	0x0a, 0x25, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x44, 0x73, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc5, 0x93, 0x01, 0x0a, 0x0a, 0x42, 0x69, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x02, 0x69, 0x70, 0x12, 0x4d, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x31, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x11, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x65, 0x61, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f,
	0x6f, 0x6b, 0x69, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x5f, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63,
	0x6f, 0x6f, 0x6b, 0x69, 0x65, 0x41, 0x67, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x68, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x68, 0x6f, 0x73, 0x74,
	0x65, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x12, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x11, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x54, 0x72, 0x65,
	0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x37, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x49, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x68, 0x6f, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x26, 0x0a, 0x0f, 0x67, 0x65, 0x6f, 0x5f, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x5f,
	0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x67, 0x65, 0x6f, 0x43, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x03, 0x67, 0x65, 0x6f, 0x18, 0x3e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x47, 0x65, 0x6f, 0x52, 0x03, 0x67, 0x65, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f,
	0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70,
	0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x64, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x38, 0x0a, 0x18, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x53, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x42, 0x69,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x52, 0x0d, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x53, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e,
	0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x31,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x20, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x6d, 0x69, 0x5f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x43, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x73, 0x53, 0x65, 0x6d, 0x69, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a,
	0x11, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x10,
	0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c,
	0x12, 0x38, 0x0a, 0x16, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x05,
	0x42, 0x02, 0x10, 0x01, 0x52, 0x14, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x3b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x48, 0x0a, 0x0c, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x0c, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x52,
	0x0b, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x42,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x42, 0x69,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x42, 0x69,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x52,
	0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x17, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x58, 0x0a,
	0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x33, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x3a, 0x16, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53,
	0x48, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x18, 0x56,
	0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x52, 0x0e, 0x70, 0x61, 0x67, 0x65, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x06, 0x61, 0x64, 0x73, 0x6c, 0x6f,
	0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x06, 0x61, 0x64, 0x73,
	0x6c, 0x6f, 0x74, 0x12, 0x53, 0x0a, 0x15, 0x62, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x2c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x42, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x52, 0x13, 0x62, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x14, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x73,
	0x18, 0x39, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x73, 0x12, 0x1e, 0x0a, 0x07, 0x69, 0x73,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x06, 0x69, 0x73, 0x54, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x07, 0x69, 0x73,
	0x5f, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x06, 0x69, 0x73, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x1a, 0x69, 0x73,
	0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x65,
	0x5f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x16, 0x69, 0x73, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x65, 0x64, 0x54, 0x6f, 0x42, 0x65, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x3a, 0x0a,
	0x0c, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x45, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x52, 0x0b, 0x73, 0x75,
	0x70, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x59, 0x0a, 0x17, 0x66, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x42, 0x69, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x15, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x1a, 0xc0, 0x02, 0x0a, 0x11, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x79, 0x0a, 0x1b, 0x6e, 0x6f,
	0x6e, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x61,
	0x64, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x36, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x63, 0x79, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x4e,
	0x6f, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64,
	0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x02, 0x10, 0x01, 0x52, 0x18, 0x6e, 0x6f, 0x6e,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x73, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x73, 0x0a, 0x18, 0x4e, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x41, 0x64, 0x73, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x50,
	0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x43, 0x4c, 0x41, 0x52, 0x45,
	0x44, 0x5f, 0x4e, 0x50, 0x41, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x53, 0x54, 0x52,
	0x49, 0x43, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x4f, 0x50,
	0x54, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x03, 0x1a, 0x8e, 0x03, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x12, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41,
	0x54, 0x45, 0x44, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x02, 0x18, 0x01, 0x52, 0x11, 0x44, 0x45, 0x50, 0x52, 0x45,
	0x43, 0x41, 0x54, 0x45, 0x44, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x08,
	0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x72, 0x63, 0x68,
	0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x69, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x69, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x3e, 0x0a, 0x0c, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xd1, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x6f,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6c,
	0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x6c, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x7a, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x7a,
	0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x74, 0x63, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x75, 0x74, 0x63, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x1a, 0x87, 0x01, 0x0a,
	0x0a, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x07, 0x63,
	0x6f, 0x72, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x42,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x72, 0x6e,
	0x65, 0x72, 0x73, 0x1a, 0x41, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x1a, 0x88, 0x01, 0x0a, 0x0d, 0x48, 0x79, 0x70, 0x65, 0x72,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x0a, 0x68, 0x79, 0x70, 0x65,
	0x72, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x42,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x52, 0x0a, 0x68, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x2e, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x1a, 0x3b, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x61, 0x67, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x1a, 0x32,
	0x0a, 0x08, 0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x02, 0x28, 0x02, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x1a, 0xd0, 0x08, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4e, 0x0a,
	0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x3a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x3a,
	0x00, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x05, 0x62,
	0x72, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x3a, 0x00, 0x52, 0x05, 0x62, 0x72,
	0x61, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x3a, 0x00, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x3b, 0x0a, 0x0a, 0x6f,
	0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0a, 0x63, 0x61, 0x72, 0x72,
	0x69, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x52,
	0x09, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0c, 0x73, 0x63,
	0x72, 0x65, 0x65, 0x6e, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x01, 0x30, 0x52, 0x0b, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x26, 0x0a, 0x0d, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x73, 0x63, 0x72, 0x65,
	0x65, 0x6e, 0x5f, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x5f, 0x6d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x16,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x68, 0x0a, 0x12, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x5f, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4f, 0x72, 0x69,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x13, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x11, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x29, 0x0a, 0x10, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x64, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x71, 0x0a, 0x21, 0x61, 0x70, 0x70, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x26, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x1e, 0x61, 0x70, 0x70, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x59, 0x0a, 0x09, 0x4f, 0x73,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x05, 0x6d, 0x61, 0x6a, 0x6f,
	0x72, 0x12, 0x18, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x02, 0x2d, 0x31, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x05, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x05,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x22, 0x8b, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x49, 0x47, 0x48,
	0x45, 0x4e, 0x44, 0x5f, 0x50, 0x48, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x54, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x45, 0x52, 0x53, 0x4f,
	0x4e, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x52, 0x10, 0x03, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x56, 0x10, 0x04,
	0x12, 0x10, 0x0a, 0x0c, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x4f, 0x4c, 0x45,
	0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x54, 0x5f, 0x54, 0x4f, 0x50, 0x5f, 0x42, 0x4f,
	0x58, 0x10, 0x06, 0x22, 0x49, 0x0a, 0x11, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x4f, 0x72, 0x69,
	0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x4f, 0x52, 0x49, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4f, 0x52, 0x54, 0x52, 0x41, 0x49, 0x54, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x4c, 0x41, 0x4e, 0x44, 0x53, 0x43, 0x41, 0x50, 0x45, 0x10, 0x02, 0x22, 0x55,
	0x0a, 0x13, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x45, 0x54,
	0x45, 0x52, 0x4d, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x53,
	0x54, 0x52, 0x49, 0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e,
	0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49,
	0x5a, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x32, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xfc, 0x08, 0x0a, 0x06, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x05, 0x69, 0x73, 0x41,
	0x70, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x17, 0x69, 0x73, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x74, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x15, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x74, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x64, 0x73, 0x12, 0x3c, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f,
	0x77, 0x65, 0x62, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x14, 0x69, 0x73, 0x4d, 0x6f,
	0x62, 0x69, 0x6c, 0x65, 0x57, 0x65, 0x62, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x64,
	0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x61, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x0b, 0x69, 0x73, 0x41, 0x70, 0x70, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x64, 0x12, 0x38, 0x0a, 0x18,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x32, 0x0a,
	0x15, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65,
	0x64, 0x5f, 0x69, 0x64, 0x66, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x65, 0x64, 0x49, 0x64, 0x66,
	0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x66, 0x61,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x49, 0x64,
	0x66, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x61, 0x70, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x61, 0x70, 0x70, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x44, 0x0a, 0x0d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x73, 0x64, 0x6b, 0x18, 0x20, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65,
	0x64, 0x53, 0x64, 0x6b, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x53,
	0x64, 0x6b, 0x12, 0x3b, 0x0a, 0x05, 0x73, 0x6b, 0x61, 0x64, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x53, 0x4b, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x05, 0x73, 0x6b, 0x61, 0x64, 0x6e, 0x1a,
	0x93, 0x02, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x53, 0x64, 0x6b,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x48, 0x0a, 0x0b, 0x73, 0x64, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x65, 0x64, 0x53, 0x64, 0x6b, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x73, 0x64, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x0f, 0x61, 0x64,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65,
	0x64, 0x53, 0x64, 0x6b, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x64,
	0x61, 0x70, 0x74, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x57, 0x0a, 0x07,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x05, 0x6d, 0x61, 0x6a, 0x6f,
	0x72, 0x12, 0x18, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x3a, 0x02, 0x2d, 0x31, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x05, 0x6d,
	0x69, 0x63, 0x72, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x05,
	0x6d, 0x69, 0x63, 0x72, 0x6f, 0x1a, 0xe0, 0x01, 0x0a, 0x12, 0x53, 0x4b, 0x41, 0x64, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x61, 0x70, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x61, 0x70, 0x70,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x6b, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x69, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6b, 0x61, 0x64, 0x6e, 0x65, 0x74, 0x69, 0x64, 0x73,
	0x12, 0x56, 0x0a, 0x18, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x69,
	0x64, 0x65, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x18, 0x2e, 0x53, 0x4b, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x46, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x42, 0x02, 0x10, 0x01,
	0x52, 0x16, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x46, 0x69, 0x64, 0x65, 0x6c,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x92, 0x13, 0x0a, 0x05, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x12, 0x4c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x3a, 0x11, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x43,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x35, 0x0a, 0x13, 0x69, 0x73, 0x5f,
	0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x69, 0x74, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x11, 0x69,
	0x73, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x69, 0x74, 0x65,
	0x12, 0x5e, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x42, 0x69, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x3a, 0x0e, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x61, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x64, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x61,
	0x78, 0x41, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x6d,
	0x69, 0x6e, 0x5f, 0x61, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x41, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x64, 0x73, 0x5f, 0x69,
	0x6e, 0x5f, 0x70, 0x6f, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x41, 0x64, 0x73, 0x49, 0x6e, 0x50, 0x6f, 0x64, 0x12, 0x68, 0x0a, 0x12, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x61, 0x64, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x0f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x41, 0x42, 0x4c, 0x45,
	0x52, 0x10, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x41, 0x64, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x61, 0x64, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x61, 0x62, 0x6c, 0x65,
	0x4d, 0x61, 0x78, 0x41, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x42, 0x02, 0x10, 0x01, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73,
	0x12, 0x51, 0x0a, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x69, 0x64,
	0x65, 0x6f, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x13,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x42, 0x69,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x0d, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x5c, 0x0a, 0x0f, 0x65,
	0x6e, 0x64, 0x5f, 0x63, 0x61, 0x70, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x45, 0x6e, 0x64, 0x43, 0x61, 0x70, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x3a, 0x13, 0x45, 0x4e, 0x44, 0x5f, 0x43, 0x41, 0x50, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x43,
	0x61, 0x70, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x52, 0x0a, 0x12, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a,
	0x0d, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0c, 0x69, 0x73, 0x4c,
	0x69, 0x76, 0x65, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x1a, 0x91, 0x02, 0x0a, 0x0d, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x57, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x42, 0x69, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x69, 0x6f, 0x6e, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x71, 0x0a, 0x0e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x24, 0x0a, 0x17,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45,
	0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x4c, 0x41, 0x53, 0x48, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x54,
	0x4d, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x02, 0x1a, 0x3e, 0x0a,
	0x11, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x6a, 0x0a,
	0x09, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x54, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x5f, 0x46, 0x45, 0x45, 0x44, 0x10, 0x03, 0x12, 0x09,
	0x0a, 0x05, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x5f,
	0x41, 0x52, 0x54, 0x49, 0x43, 0x4c, 0x45, 0x10, 0x05, 0x22, 0xd6, 0x01, 0x0a, 0x13, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x50, 0x4c,
	0x41, 0x59, 0x5f, 0x53, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x17, 0x0a,
	0x13, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x5f, 0x53, 0x4f, 0x55, 0x4e, 0x44,
	0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4c, 0x49, 0x43, 0x4b, 0x5f,
	0x54, 0x4f, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x55,
	0x53, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x04, 0x12, 0x2a, 0x0a, 0x26, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x49, 0x4e,
	0x47, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x4e, 0x44,
	0x5f, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x2b, 0x0a, 0x27, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54,
	0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x49,
	0x45, 0x57, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x4f, 0x46, 0x46,
	0x10, 0x06, 0x22, 0x5a, 0x0a, 0x17, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a,
	0x0f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x5f, 0x53, 0x4b,
	0x49, 0x50, 0x50, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x22, 0xe1,
	0x01, 0x0a, 0x0d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x12, 0x1a, 0x0a, 0x16, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x56, 0x49, 0x44, 0x45,
	0x4f, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x56, 0x41, 0x53, 0x54, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x41,
	0x53, 0x54, 0x5f, 0x32, 0x5f, 0x30, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x41, 0x53, 0x54,
	0x5f, 0x33, 0x5f, 0x30, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x41, 0x53, 0x54, 0x5f, 0x31,
	0x5f, 0x30, 0x5f, 0x57, 0x52, 0x41, 0x50, 0x50, 0x45, 0x52, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10,
	0x56, 0x41, 0x53, 0x54, 0x5f, 0x32, 0x5f, 0x30, 0x5f, 0x57, 0x52, 0x41, 0x50, 0x50, 0x45, 0x52,
	0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x41, 0x53, 0x54, 0x5f, 0x33, 0x5f, 0x30, 0x5f, 0x57,
	0x52, 0x41, 0x50, 0x50, 0x45, 0x52, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x41, 0x53, 0x54,
	0x5f, 0x34, 0x5f, 0x30, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x56, 0x41, 0x53, 0x54, 0x5f, 0x34,
	0x5f, 0x30, 0x5f, 0x57, 0x52, 0x41, 0x50, 0x50, 0x45, 0x52, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09,
	0x44, 0x41, 0x41, 0x53, 0x54, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x44,
	0x41, 0x41, 0x53, 0x54, 0x5f, 0x31, 0x5f, 0x30, 0x5f, 0x57, 0x52, 0x41, 0x50, 0x50, 0x45, 0x52,
	0x10, 0x0a, 0x22, 0x8b, 0x02, 0x0a, 0x0b, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x21, 0x0a, 0x14, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x56, 0x49,
	0x44, 0x45, 0x4f, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x46,
	0x4c, 0x56, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x4d, 0x50,
	0x34, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x59, 0x54, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x45, 0x44,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x50, 0x41, 0x49, 0x44, 0x5f, 0x46, 0x4c, 0x41, 0x53,
	0x48, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x50, 0x41, 0x49, 0x44, 0x5f, 0x4a, 0x53, 0x10,
	0x04, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x4d, 0x50, 0x33, 0x10, 0x05,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x4f, 0x47, 0x47, 0x10, 0x06, 0x12,
	0x11, 0x0a, 0x0d, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x4d, 0x50, 0x33, 0x5f, 0x4f, 0x47, 0x47,
	0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x57, 0x45, 0x42, 0x4d,
	0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x4d, 0x4f, 0x56, 0x10,
	0x09, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x33, 0x47, 0x50, 0x50, 0x10,
	0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x48, 0x4c, 0x53, 0x10, 0x0b,
	0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x5f, 0x44, 0x41, 0x53, 0x48, 0x10, 0x0c,
	0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x4d, 0x50, 0x34, 0x41, 0x10, 0x0d,
	0x22, 0x6b, 0x0a, 0x0d, 0x45, 0x6e, 0x64, 0x43, 0x61, 0x70, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4e, 0x44, 0x5f, 0x43, 0x41, 0x50, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e,
	0x44, 0x5f, 0x43, 0x41, 0x50, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x44, 0x5f, 0x43, 0x41, 0x50, 0x5f, 0x46, 0x4f, 0x52, 0x42,
	0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x44, 0x5f, 0x43,
	0x41, 0x50, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x96, 0x47,
	0x0a, 0x06, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x61, 0x64, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x61, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x63, 0x0a, 0x18, 0x66, 0x6c, 0x65, 0x78, 0x69,
	0x62, 0x6c, 0x65, 0x5f, 0x61, 0x64, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x42, 0x69, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x46, 0x6c,
	0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x16, 0x66, 0x6c, 0x65, 0x78, 0x69, 0x62, 0x6c, 0x65, 0x41, 0x64,
	0x73, 0x6c, 0x6f, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x12,
	0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x11, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12,
	0x32, 0x0a, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01,
	0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x6f, 0x0a, 0x1c, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x42, 0x69, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x1a, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x73, 0x5f, 0x67, 0x64, 0x70,
	0x72, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x67, 0x73, 0x47, 0x64, 0x70,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x73, 0x5f, 0x6c, 0x67, 0x70, 0x64, 0x18, 0x36,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x67, 0x73, 0x4c, 0x67, 0x70, 0x64, 0x12, 0x42,
	0x0a, 0x1b, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x19, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x64, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x42, 0x0a, 0x1b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x10, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x19, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x54, 0x0a, 0x25, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x73, 0x18,
	0x16, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01, 0x52, 0x21, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x61, 0x6c, 0x73, 0x12, 0x2b, 0x0a, 0x11,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x19, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x01,
	0x52, 0x17, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x52, 0x0a, 0x12, 0x65, 0x78, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18,
	0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x11, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x35, 0x0a,
	0x17, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x62, 0x69, 0x64, 0x73, 0x5f,
	0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x6f, 0x6e, 0x6c, 0x79, 0x44, 0x65, 0x61, 0x6c, 0x42, 0x69, 0x64, 0x73, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x10, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c,
	0x6f, 0x74, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x0e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x06, 0x52, 0x17, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x64, 0x12, 0x4d,
	0x0a, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x62, 0x69, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a,
	0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x62, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x35, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x69, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67,
	0x12, 0x72, 0x0a, 0x1d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x6e, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x1b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x27, 0x0a, 0x10, 0x64, 0x66, 0x70, 0x5f, 0x61, 0x64, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x64, 0x66, 0x70, 0x41, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x58, 0x0a,
	0x0f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x3a, 0x0c, 0x4e, 0x4f, 0x5f, 0x44, 0x45,
	0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x52, 0x0e, 0x73, 0x6c, 0x6f, 0x74, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31,
	0x52, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x30, 0x0a,
	0x12, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x10, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x36, 0x0a, 0x15, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x02, 0x3a, 0x02,
	0x2d, 0x31, 0x52, 0x13, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x69, 0x66, 0x72, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x53,
	0x6c, 0x6f, 0x74, 0x2e, 0x49, 0x46, 0x72, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x3a, 0x14, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x49, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x52, 0x0d, 0x69, 0x66, 0x72, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x69, 0x66, 0x72, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c,
	0x6f, 0x74, 0x2e, 0x49, 0x46, 0x72, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x70, 0x74, 0x68,
	0x3a, 0x14, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x49, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x5f, 0x44, 0x45, 0x50, 0x54, 0x48, 0x52, 0x0d, 0x69, 0x66, 0x72, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x51, 0x0a, 0x12, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x61, 0x64, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x33, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x64, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x10, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x64,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x6d, 0x0a, 0x15, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x4e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a,
	0x11, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x52, 0x13, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x56, 0x0a, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x52, 0x0f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x41, 0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65,
	0x66, 0x72, 0x65, 0x73, 0x68, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x12, 0x4a, 0x0a, 0x0f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x42, 0x69,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0e,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x6d,
	0x0a, 0x17, 0x6e, 0x6f, 0x6e, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x6c,
	0x6f, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x53,
	0x6c, 0x6f, 0x74, 0x2e, 0x4e, 0x6f, 0x6e, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x3a, 0x11, 0x55, 0x4e, 0x44, 0x45, 0x43, 0x4c, 0x41, 0x52, 0x45, 0x44,
	0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x52, 0x14, 0x6e, 0x6f, 0x6e, 0x42, 0x72, 0x6f, 0x77,
	0x73, 0x65, 0x72, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x49, 0x0a,
	0x08, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x53,
	0x6c, 0x6f, 0x74, 0x2e, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x3a, 0x10, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x45, 0x52, 0x52, 0x08,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x12, 0x60, 0x0a, 0x13, 0x61, 0x6d, 0x70, 0x5f,
	0x61, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x41, 0x6d, 0x70, 0x41, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x0c, 0x4e, 0x4f, 0x4e, 0x5f,
	0x41, 0x4d, 0x50, 0x5f, 0x50, 0x41, 0x47, 0x45, 0x52, 0x10, 0x61, 0x6d, 0x70, 0x41, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x61, 0x6d, 0x70, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x53,
	0x6c, 0x6f, 0x74, 0x2e, 0x41, 0x6d, 0x70, 0x50, 0x61, 0x67, 0x65, 0x52, 0x09, 0x69, 0x73, 0x41,
	0x6d, 0x70, 0x50, 0x61, 0x67, 0x65, 0x12, 0x5e, 0x0a, 0x17, 0x61, 0x6d, 0x70, 0x5f, 0x61, 0x64,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x41, 0x6d, 0x70, 0x41,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x14, 0x61, 0x6d, 0x70, 0x41, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x65, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c,
	0x73, 0x65, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x12, 0x4e,
	0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x24, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x41, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0e,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x41, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x02, 0x2d, 0x31, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x6d, 0x0a, 0x1c, 0x62, 0x75, 0x79, 0x65, 0x72,
	0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f,
	0x74, 0x2e, 0x42, 0x75, 0x79, 0x65, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x19, 0x62, 0x75, 0x79,
	0x65, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x03, 0x61, 0x70, 0x69, 0x18, 0x2e, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x41, 0x50, 0x49, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x77, 0x6f, 0x72, 0x6b, 0x42, 0x02, 0x10, 0x01, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x46, 0x0a,
	0x1e, 0x62, 0x69, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x3b, 0x20, 0x01, 0x28, 0x01, 0x3a, 0x01, 0x31, 0x52, 0x1b, 0x62, 0x69, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x61, 0x74, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x5f, 0x61,
	0x64, 0x73, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x37, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x64, 0x73, 0x43,
	0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x64,
	0x73, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6d, 0x69,
	0x64, 0x70, 0x6e, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x6d, 0x69, 0x64, 0x70,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6d, 0x69, 0x64, 0x70, 0x76, 0x18, 0x39, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x6d, 0x69, 0x64, 0x70, 0x76, 0x12, 0x6b, 0x0a, 0x13, 0x61, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x3d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x41, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x3a, 0x13, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x52, 0x12, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x90, 0x01, 0x0a, 0x16, 0x46, 0x6c, 0x65, 0x78, 0x69,
	0x62, 0x6c, 0x65, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6d, 0x69, 0x6e, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69,
	0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x6d, 0x69, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0xbb, 0x01, 0x0a, 0x1a, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x33, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02, 0x10, 0x01, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x74, 0x63, 0x66, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x63, 0x66, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x19, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x3e, 0x0a, 0x10, 0x45, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x64, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x62,
	0x75, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x64, 0x1a, 0xd5, 0x06, 0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0a, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x42, 0x02,
	0x10, 0x00, 0x52, 0x09, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x63, 0x70, 0x6d, 0x5f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
	0x75, 0x6d, 0x43, 0x70, 0x6d, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x4d, 0x0a, 0x0b, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64,
	0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x52, 0x0a,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x1a, 0xa2, 0x05, 0x0a, 0x0a, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x63, 0x70, 0x6d, 0x5f, 0x6d, 0x69, 0x63,
	0x72, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x43, 0x70, 0x6d, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x65, 0x0a, 0x09, 0x64, 0x65, 0x61,
	0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x42,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x2e, 0x44, 0x65, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x3a, 0x11, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x44, 0x45, 0x41,
	0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x08, 0x64, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x45, 0x0a, 0x1b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x19, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x84, 0x01, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3f, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x41, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x1a, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x52, 0x52, 0x0e,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f,
	0x0a, 0x08, 0x6d, 0x75, 0x73, 0x74, 0x5f, 0x62, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x07, 0x6d, 0x75, 0x73, 0x74, 0x42, 0x69, 0x64, 0x22,
	0x7c, 0x0a, 0x08, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x5f,
	0x44, 0x45, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54,
	0x45, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x50,
	0x52, 0x4f, 0x47, 0x52, 0x41, 0x4d, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x47, 0x55, 0x41, 0x52,
	0x41, 0x4e, 0x54, 0x45, 0x45, 0x44, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x55, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x04, 0x22, 0x70, 0x0a,
	0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53, 0x45, 0x52, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x52, 0x10, 0x02, 0x1a,
	0x44, 0x0a, 0x0f, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x69, 0x64, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x31, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x35, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x69, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x62, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69,
	0x73, 0x4f, 0x70, 0x65, 0x6e, 0x42, 0x69, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0xf1, 0x04, 0x0a,
	0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x6f, 0x0a, 0x12,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45,
	0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x8b, 0x01,
	0x0a, 0x1c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x5f, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x49, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x1a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x22, 0x8f,
	0x01, 0x0a, 0x11, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x45,
	0x4e, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x45,
	0x4e, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46,
	0x4f, 0x52, 0x4d, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x01, 0x12, 0x32, 0x0a, 0x2e,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x45, 0x4e, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x50,
	0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x02,
	0x22, 0x9d, 0x01, 0x0a, 0x1a, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x24, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x52, 0x5f, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x53, 0x5f, 0x45, 0x4e, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x55, 0x42,
	0x4c, 0x49, 0x53, 0x48, 0x45, 0x52, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x5f, 0x45, 0x4e,
	0x46, 0x4f, 0x52, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x45,
	0x53, 0x10, 0x01, 0x12, 0x2b, 0x0a, 0x27, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x52,
	0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x53, 0x5f, 0x45, 0x4e, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x4d,
	0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x02,
	0x1a, 0xf9, 0x07, 0x0a, 0x10, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x64, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2d,
	0x0a, 0x12, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x72, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x37, 0x0a,
	0x18, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x61,
	0x66, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x15, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x4d, 0x61, 0x78, 0x53, 0x61, 0x66, 0x65,
	0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x14, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x62, 0x6f, 0x64, 0x79, 0x4d, 0x61, 0x78, 0x53, 0x61, 0x66,
	0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x41, 0x0a, 0x1e, 0x63, 0x61, 0x6c, 0x6c, 0x5f,
	0x74, 0x6f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x61,
	0x66, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x19, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x78,
	0x53, 0x61, 0x66, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x61, 0x66,
	0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x53, 0x61, 0x66,
	0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x15, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x61, 0x66, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x78,
	0x53, 0x61, 0x66, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x6f, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1f, 0x0a,
	0x0b, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x6f, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x49, 0x63, 0x6f, 0x6e, 0x57,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x63, 0x6f, 0x6e,
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61,
	0x70, 0x70, 0x49, 0x63, 0x6f, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x61, 0x0a, 0x11, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x64, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x05, 0x50, 0x49, 0x58, 0x45, 0x4c, 0x52, 0x0f, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68, 0x22, 0xb7,
	0x01, 0x0a, 0x06, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f,
	0x46, 0x49, 0x45, 0x4c, 0x44, 0x53, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x48, 0x45, 0x41, 0x44,
	0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x44, 0x59, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x54, 0x4f, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x44, 0x56, 0x45, 0x52, 0x54, 0x49, 0x53,
	0x45, 0x52, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x10, 0x12,
	0x08, 0x0a, 0x04, 0x4c, 0x4f, 0x47, 0x4f, 0x10, 0x20, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50,
	0x5f, 0x49, 0x43, 0x4f, 0x4e, 0x10, 0x40, 0x12, 0x10, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x52, 0x5f,
	0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x80, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x50, 0x52, 0x49,
	0x43, 0x45, 0x10, 0x80, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41,
	0x54, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x80, 0x04, 0x12, 0x0a, 0x0a, 0x05,
	0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x80, 0x08, 0x22, 0x22, 0x0a, 0x0a, 0x4c, 0x61, 0x79, 0x6f,
	0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x49, 0x58, 0x45, 0x4c, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x55, 0x49, 0x44, 0x10, 0x01, 0x1a, 0xc8, 0x03, 0x0a,
	0x0b, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x5d, 0x0a, 0x10,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0d, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x1a, 0xb1, 0x02, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x0c,
	0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x42, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x19, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x41, 0x55, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f,
	0x0a, 0x1c, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22,
	0x56, 0x0a, 0x0f, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x55,
	0x54, 0x4f, 0x5f, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x08, 0x0a,
	0x04, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x03, 0x1a, 0xbb, 0x03, 0x0a, 0x0e, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x71, 0x0a, 0x13, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x53, 0x74, 0x69, 0x63,
	0x6b, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x3a, 0x12, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53,
	0x54, 0x49, 0x43, 0x4b, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x52, 0x12, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x63, 0x61, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x7c, 0x0a,
	0x19, 0x74, 0x6f, 0x70, 0x5f, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x5f,
	0x73, 0x74, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2c, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64,
	0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x3a, 0x12,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x49, 0x43, 0x4b, 0x49, 0x4e, 0x45,
	0x53, 0x53, 0x52, 0x17, 0x74, 0x6f, 0x70, 0x48, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61,
	0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x1c,
	0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x5f, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x6f, 0x6e, 0x74, 0x61,
	0x6c, 0x5f, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x3a, 0x12, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x49, 0x43, 0x4b, 0x49,
	0x4e, 0x45, 0x53, 0x53, 0x52, 0x1a, 0x62, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x48, 0x6f, 0x72, 0x69,
	0x7a, 0x6f, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x65, 0x73, 0x73,
	0x22, 0x33, 0x0a, 0x0a, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x12, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x54, 0x49, 0x43, 0x4b, 0x49,
	0x4e, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x53, 0x5f, 0x53, 0x54, 0x49,
	0x43, 0x4b, 0x59, 0x10, 0x01, 0x1a, 0xa1, 0x02, 0x0a, 0x19, 0x42, 0x75, 0x79, 0x65, 0x72, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x70,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x42, 0x75, 0x79, 0x65,
	0x72, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x70, 0x70, 0x48,
	0x00, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x70, 0x70, 0x12, 0x54, 0x0a, 0x09,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6a, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x53,
	0x6c, 0x6f, 0x74, 0x2e, 0x42, 0x75, 0x79, 0x65, 0x72, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4a, 0x73, 0x48, 0x00, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4a, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x1b, 0x0a, 0x09, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x41, 0x70, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x1a, 0x1a, 0x0a, 0x08, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4a, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x42,
	0x08, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0xa7, 0x01, 0x0a, 0x10, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x41, 0x64, 0x73, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x72, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x63, 0x65, 0x6c, 0x6c, 0x52, 0x6f, 0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x65, 0x6c,
	0x6c, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x63, 0x65, 0x6c, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72,
	0x69, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67,
	0x72, 0x69, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x72, 0x69, 0x64, 0x5f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x67,
	0x72, 0x69, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x72,
	0x69, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x67, 0x72, 0x69,
	0x64, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x0e, 0x53, 0x6c, 0x6f, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x5f, 0x44, 0x45, 0x54, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x42, 0x4f, 0x56, 0x45,
	0x5f, 0x54, 0x48, 0x45, 0x5f, 0x46, 0x4f, 0x4c, 0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x42,
	0x45, 0x4c, 0x4f, 0x57, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x46, 0x4f, 0x4c, 0x44, 0x10, 0x02, 0x22,
	0x69, 0x0a, 0x0d, 0x49, 0x46, 0x72, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x49, 0x46, 0x52, 0x41,
	0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f,
	0x5f, 0x49, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x41, 0x4d,
	0x45, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x49, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10,
	0x02, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49,
	0x4e, 0x5f, 0x49, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x22, 0x61, 0x0a, 0x0d, 0x49, 0x46,
	0x72, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x14, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x49, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x45,
	0x50, 0x54, 0x48, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f,
	0x49, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x4e, 0x45, 0x5f,
	0x49, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x55, 0x4c, 0x54,
	0x49, 0x50, 0x4c, 0x45, 0x5f, 0x49, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0x03, 0x22, 0x93, 0x01,
	0x0a, 0x13, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11,
	0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x46, 0x45, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x41, 0x54, 0x4f, 0x4d, 0x49, 0x43, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x02, 0x12, 0x15,
	0x0a, 0x11, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x55, 0x54, 0x53,
	0x49, 0x44, 0x45, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x44, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x04, 0x22, 0x32, 0x0a, 0x0f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x01, 0x22, 0x3a, 0x0a, 0x10, 0x4e, 0x6f, 0x6e, 0x42, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x55,
	0x4e, 0x44, 0x45, 0x43, 0x4c, 0x41, 0x52, 0x45, 0x44, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x5f, 0x41, 0x50,
	0x50, 0x10, 0x01, 0x22, 0x3b, 0x0a, 0x08, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x10, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x52, 0x45, 0x4e, 0x44, 0x45,
	0x52, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x52, 0x10, 0x02,
	0x22, 0x50, 0x0a, 0x10, 0x41, 0x6d, 0x70, 0x41, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x41, 0x4d, 0x50, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x4e, 0x5f, 0x41, 0x4d, 0x50,
	0x5f, 0x50, 0x41, 0x47, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x4d, 0x50, 0x5f, 0x50,
	0x41, 0x47, 0x45, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x02, 0x22, 0x47, 0x0a, 0x07, 0x41, 0x6d, 0x70, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x4d, 0x50, 0x5f, 0x50, 0x41, 0x47,
	0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49, 0x41, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x48,
	0x54, 0x4d, 0x4c, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x49, 0x41, 0x4c, 0x45, 0x43, 0x54,
	0x5f, 0x48, 0x54, 0x4d, 0x4c, 0x5f, 0x41, 0x4d, 0x50, 0x10, 0x02, 0x22, 0xba, 0x01, 0x0a, 0x14,
	0x41, 0x6d, 0x70, 0x41, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x41, 0x4d, 0x50, 0x5f, 0x41, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x4d, 0x50,
	0x5f, 0x41, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x4d, 0x50, 0x5f, 0x41, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f,
	0x57, 0x45, 0x44, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x41, 0x52, 0x4c,
	0x59, 0x5f, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21,
	0x41, 0x4d, 0x50, 0x5f, 0x41, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x41,
	0x4e, 0x44, 0x5f, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x5f, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4d, 0x50, 0x5f, 0x41, 0x44, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x04, 0x22, 0xa3, 0x01, 0x0a, 0x0d, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x41, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x17, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x41, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x1a, 0x0a, 0x16, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x41, 0x44, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16,
	0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x4c, 0x4c, 0x4f,
	0x57, 0x45, 0x44, 0x5f, 0x41, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56, 0x49, 0x44, 0x45,
	0x4f, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x41,
	0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x03, 0x22, 0x58,
	0x0a, 0x0c, 0x41, 0x50, 0x49, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x15,
	0x0a, 0x11, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x57,
	0x4f, 0x52, 0x4b, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x31,
	0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x32, 0x10, 0x05, 0x12,
	0x0b, 0x0a, 0x07, 0x4d, 0x52, 0x41, 0x49, 0x44, 0x5f, 0x33, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06,
	0x4f, 0x4d, 0x49, 0x44, 0x5f, 0x31, 0x10, 0x07, 0x22, 0x8b, 0x01, 0x0a, 0x12, 0x41, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x41,
	0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x4f, 0x4e, 0x5f, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x36,
	0x0a, 0x32, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x41, 0x55,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x45, 0x53, 0x54, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x53, 0x49, 0x4d, 0x55, 0x4c, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x1a, 0x9f, 0x03, 0x0a, 0x13, 0x42, 0x69, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x70, 0x6d, 0x5f, 0x6d, 0x69,
	0x63, 0x72, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x70, 0x6d, 0x4d,
	0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d,
	0x5f, 0x62, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x42, 0x69, 0x64, 0x54, 0x6f, 0x57,
	0x69, 0x6e, 0x12, 0x5e, 0x0a, 0x2d, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x70, 0x6d, 0x5f, 0x61, 0x68, 0x65, 0x61,
	0x64, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x27, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x64, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x70, 0x6d, 0x41, 0x68,
	0x65, 0x61, 0x64, 0x4f, 0x66, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x12, 0x38, 0x0a, 0x18, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x11,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49, 0x64, 0x1a, 0xb0, 0x02, 0x0a, 0x0b, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x53, 0x75, 0x70,
	0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xab, 0x01,
	0x0a, 0x0f, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x42, 0x0a, 0x1d, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74,
	0x69, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x39, 0x0a, 0x11, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x24, 0x0a, 0x20, 0x54, 0x41, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x43, 0x48, 0x49, 0x4c,
	0x44, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x52, 0x45, 0x41, 0x54,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x00, 0x22, 0x5b, 0x0a, 0x0b, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x43, 0x45,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x49, 0x58, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x10, 0x03, 0x22, 0x8f, 0x01, 0x0a, 0x0d, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x00, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x52, 0x5f, 0x4f,
	0x57, 0x4e, 0x45, 0x44, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x53, 0x48, 0x45, 0x52,
	0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x25,
	0x0a, 0x1d, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x47, 0x4f, 0x4f,
	0x47, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x10,
	0x03, 0x1a, 0x02, 0x08, 0x01, 0x22, 0x6a, 0x0a, 0x0f, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x49, 0x53, 0x49,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49,
	0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x56, 0x49, 0x53, 0x49, 0x42,
	0x4c, 0x45, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x48, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10,
	0x02, 0x22, 0xea, 0x01, 0x0a, 0x15, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x46,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x43, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x20, 0x0a, 0x1c, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x43, 0x41,
	0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f,
	0x43, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x42, 0x52,
	0x4f, 0x57, 0x53, 0x45, 0x52, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x46, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x4e, 0x43, 0x59, 0x5f, 0x43, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x43, 0x4f,
	0x50, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x46,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x43, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47,
	0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x41, 0x50, 0x50, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c,
	0x46, 0x52, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x59, 0x5f, 0x43, 0x41, 0x50, 0x50, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x53, 0x49, 0x54, 0x45, 0x10, 0x05, 0x22, 0xef,
	0x20, 0x0a, 0x0b, 0x42, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f,
	0x0a, 0x02, 0x61, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x42, 0x69, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x52, 0x02, 0x61, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x62, 0x75, 0x67, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73,
	0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x6f, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x6f, 0x42, 0x69, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x1a, 0xc9, 0x1f, 0x0a, 0x02, 0x41, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x62, 0x75, 0x79, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x76, 0x65, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x74, 0x6d, 0x6c, 0x5f, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x74, 0x6d, 0x6c, 0x53, 0x6e, 0x69,
	0x70, 0x70, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72,
	0x6c, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x76, 0x61, 0x73, 0x74, 0x5f,
	0x78, 0x6d, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x56, 0x61, 0x73, 0x74, 0x58, 0x6d, 0x6c, 0x12, 0x1c, 0x0a, 0x0a, 0x61, 0x6d, 0x70, 0x5f, 0x61,
	0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6d, 0x70,
	0x41, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x35, 0x0a, 0x09, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x61, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x41, 0x64, 0x52, 0x08, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x54, 0x68,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x11, 0x20, 0x03, 0x28, 0x05,
	0x52, 0x12, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61,
	0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x16, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x62, 0x69, 0x64, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x14, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x42, 0x69, 0x64,
	0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x63, 0x79,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x61, 0x64, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x41, 0x64, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x06, 0x61, 0x64, 0x73, 0x6c,
	0x6f, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x15, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x6c,
	0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x64,
	0x5f, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17,
	0x61, 0x64, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x6c, 0x0a, 0x1c, 0x69, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x42, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x2e, 0x49,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x1a, 0x69, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x73, 0x64, 0x6b, 0x5f, 0x72, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x2e,
	0x53, 0x64, 0x6b, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x41, 0x64, 0x52, 0x0d, 0x73,
	0x64, 0x6b, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x41, 0x64, 0x12, 0x39, 0x0a, 0x05,
	0x73, 0x6b, 0x61, 0x64, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x42, 0x69,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x2e, 0x53, 0x4b, 0x41,
	0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x05, 0x73, 0x6b, 0x61, 0x64, 0x6e, 0x1a, 0xab, 0x05, 0x0a, 0x08, 0x4e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x41, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x6f, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61,
	0x6c, 0x6c, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64,
	0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x42, 0x69, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x41, 0x64, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x32, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x2e,
	0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x64, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x04,
	0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x39, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x63, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x2e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x41, 0x64,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x07, 0x61, 0x70, 0x70, 0x49, 0x63, 0x6f, 0x6e, 0x12,
	0x1d, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x26,
	0x0a, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x76, 0x61, 0x73, 0x74, 0x5f, 0x78, 0x6d, 0x6c,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x56,
	0x61, 0x73, 0x74, 0x58, 0x6d, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x5f, 0x72,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x63, 0x6b,
	0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x4c, 0x69, 0x6e, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x45, 0x0a,
	0x1d, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x63, 0x6c, 0x69, 0x63,
	0x6b, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x1a, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43,
	0x41, 0x54, 0x45, 0x44, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x55, 0x72, 0x6c, 0x12, 0x47, 0x0a, 0x1e, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54,
	0x45, 0x44, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x1b, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x43, 0x6c, 0x69, 0x63,
	0x6b, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x55, 0x72, 0x6c, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x1a, 0x47, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x42, 0x07, 0x0a, 0x05,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x1a, 0x94, 0x07, 0x0a, 0x06, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x70, 0x6d, 0x5f, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x03, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x43, 0x70, 0x6d,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x70,
	0x6d, 0x5f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x6d, 0x69, 0x6e, 0x43, 0x70, 0x6d, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x07, 0x64, 0x65, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x64, 0x65, 0x61,
	0x6c, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x64, 0x65, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x63, 0x0a,
	0x12, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x42, 0x69, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f,
	0x74, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x0c, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x52, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x49, 0x64,
	0x12, 0x35, 0x0a, 0x17, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f,
	0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x74, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x42, 0x75, 0x79,
	0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x48, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x63, 0x61, 0x70, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x2e,
	0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x61, 0x70, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x61,
	0x70, 0x1a, 0xab, 0x02, 0x0a, 0x0c, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x43,
	0x61, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f,
	0x63, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x61, 0x70, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2c, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x64,
	0x2e, 0x41, 0x64, 0x53, 0x6c, 0x6f, 0x74, 0x2e, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x61, 0x70, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x31, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x78,
	0x5f, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x5b, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x15,
	0x0a, 0x11, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x55,
	0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x41, 0x59, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x45,
	0x45, 0x4b, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x04, 0x12,
	0x0e, 0x0a, 0x0a, 0x49, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x45, 0x10, 0x05, 0x22,
	0x6b, 0x0a, 0x10, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x50, 0x45, 0x4e, 0x5f, 0x41, 0x55, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x5f, 0x41, 0x55, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52,
	0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x1c,
	0x0a, 0x18, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x41, 0x55, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x03, 0x1a, 0x8b, 0x02, 0x0a,
	0x1a, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x4c, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x42, 0x69,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x2e, 0x49, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x37, 0x0a, 0x17, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4b, 0x65, 0x79,
	0x22, 0x28, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x13, 0x0a, 0x0f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x4f, 0x4d, 0x49, 0x44, 0x10, 0x01, 0x1a, 0xfc, 0x02, 0x0a, 0x0d, 0x53,
	0x64, 0x6b, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x65, 0x64, 0x41, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x5f,
	0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x2e, 0x53, 0x64, 0x6b, 0x52, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x65, 0x64, 0x41, 0x64, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64,
	0x41, 0x64, 0x52, 0x0a, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x41, 0x64, 0x1a, 0xe8,
	0x01, 0x0a, 0x0a, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x65, 0x64, 0x41, 0x64, 0x12, 0x23, 0x0a,
	0x0c, 0x68, 0x74, 0x6d, 0x6c, 0x5f, 0x73, 0x6e, 0x69, 0x70, 0x70, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x68, 0x74, 0x6d, 0x6c, 0x53, 0x6e, 0x69, 0x70, 0x70,
	0x65, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72,
	0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x76, 0x61, 0x73, 0x74, 0x5f,
	0x78, 0x6d, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x56, 0x61, 0x73, 0x74, 0x58, 0x6d, 0x6c, 0x12, 0x37, 0x0a, 0x09, 0x6e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x42,
	0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x2e, 0x4e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x41, 0x64, 0x48, 0x00, 0x52, 0x08, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x41, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x74, 0x68, 0x72, 0x6f,
	0x75, 0x67, 0x68, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6c, 0x69, 0x63, 0x6b, 0x54, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x55, 0x72, 0x6c, 0x42, 0x09,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0xa4, 0x05, 0x0a, 0x13, 0x53, 0x4b,
	0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67,
	0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x74, 0x75, 0x6e, 0x65, 0x73, 0x69, 0x74, 0x65, 0x6d, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x74, 0x75, 0x6e, 0x65, 0x73, 0x69, 0x74, 0x65,
	0x6d, 0x12, 0x4c, 0x0a, 0x0a, 0x66, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x2e, 0x53, 0x4b, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x69, 0x64, 0x65, 0x6c,
	0x69, 0x74, 0x79, 0x52, 0x0a, 0x66, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x61,
	0x70, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x61, 0x70, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x5b, 0x0a, 0x0d, 0x73, 0x6b, 0x61, 0x64, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x42, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x2e, 0x53, 0x4b, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x4b, 0x41, 0x64,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0c,
	0x73, 0x6b, 0x61, 0x64, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xb2, 0x01, 0x0a,
	0x08, 0x46, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x54, 0x0a, 0x0d, 0x66, 0x69, 0x64,
	0x65, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x53, 0x4b, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x69,
	0x64, 0x65, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x15, 0x53, 0x54, 0x4f, 0x52,
	0x45, 0x4b, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x41, 0x44,
	0x53, 0x52, 0x0c, 0x66, 0x69, 0x64, 0x65, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x1a, 0x4d, 0x0a, 0x12, 0x53, 0x4b, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x14, 0x61, 0x6c, 0x77, 0x61, 0x79,
	0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x12, 0x61, 0x6c,
	0x77, 0x61, 0x79, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x41, 0x70, 0x70, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2a, 0x4a, 0x0a, 0x17, 0x53, 0x4b, 0x41, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46,
	0x69, 0x64, 0x65, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x56,
	0x49, 0x45, 0x57, 0x5f, 0x54, 0x48, 0x52, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x41, 0x44, 0x53, 0x10,
	0x00, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x4b, 0x49, 0x54, 0x5f, 0x52, 0x45,
	0x4e, 0x44, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x41, 0x44, 0x53, 0x10, 0x01, 0x42, 0x13, 0x5a, 0x11,
	0x2f, 0x72, 0x65, 0x61, 0x6c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x62, 0x69, 0x64, 0x64, 0x69, 0x6e,
	0x67,
}

var (
	file_googleDspManager_models_proto_r_proto_rawDescOnce sync.Once
	file_googleDspManager_models_proto_r_proto_rawDescData = file_googleDspManager_models_proto_r_proto_rawDesc
)

func file_googleDspManager_models_proto_r_proto_rawDescGZIP() []byte {
	file_googleDspManager_models_proto_r_proto_rawDescOnce.Do(func() {
		file_googleDspManager_models_proto_r_proto_rawDescData = protoimpl.X.CompressGZIP(file_googleDspManager_models_proto_r_proto_rawDescData)
	})
	return file_googleDspManager_models_proto_r_proto_rawDescData
}

var file_googleDspManager_models_proto_r_proto_enumTypes = make([]protoimpl.EnumInfo, 41)
var file_googleDspManager_models_proto_r_proto_msgTypes = make([]protoimpl.MessageInfo, 52)
var file_googleDspManager_models_proto_r_proto_goTypes = []interface{}{
	(SKAdNetworkFidelityType)(0),                                                  // 0: SKAdNetworkFidelityType
	(BidRequest_UserDataTreatment)(0),                                             // 1: BidRequest.UserDataTreatment
	(BidRequest_AuctionType)(0),                                                   // 2: BidRequest.AuctionType
	(BidRequest_PublisherType)(0),                                                 // 3: BidRequest.PublisherType
	(BidRequest_VisibilityState)(0),                                               // 4: BidRequest.VisibilityState
	(BidRequest_FrequencyCappingScope)(0),                                         // 5: BidRequest.FrequencyCappingScope
	(BidRequest_PrivacyTreatments_NonPersonalizedAdsReason)(0),                    // 6: BidRequest.PrivacyTreatments.NonPersonalizedAdsReason
	(BidRequest_Device_DeviceType)(0),                                             // 7: BidRequest.Device.DeviceType
	(BidRequest_Device_ScreenOrientation)(0),                                      // 8: BidRequest.Device.ScreenOrientation
	(BidRequest_Device_AuthorizationStatus)(0),                                    // 9: BidRequest.Device.AuthorizationStatus
	(BidRequest_Video_Placement)(0),                                               // 10: BidRequest.Video.Placement
	(BidRequest_Video_VideoPlaybackMethod)(0),                                     // 11: BidRequest.Video.VideoPlaybackMethod
	(BidRequest_Video_SkippableBidRequestType)(0),                                 // 12: BidRequest.Video.SkippableBidRequestType
	(BidRequest_Video_VideoProtocol)(0),                                           // 13: BidRequest.Video.VideoProtocol
	(BidRequest_Video_VideoFormat)(0),                                             // 14: BidRequest.Video.VideoFormat
	(BidRequest_Video_EndCapSupport)(0),                                           // 15: BidRequest.Video.EndCapSupport
	(BidRequest_Video_CompanionSlot_CreativeFormat)(0),                            // 16: BidRequest.Video.CompanionSlot.CreativeFormat
	(BidRequest_AdSlot_SlotVisibility)(0),                                         // 17: BidRequest.AdSlot.SlotVisibility
	(BidRequest_AdSlot_IFramingState)(0),                                          // 18: BidRequest.AdSlot.IFramingState
	(BidRequest_AdSlot_IFramingDepth)(0),                                          // 19: BidRequest.AdSlot.IFramingDepth
	(BidRequest_AdSlot_NativePlacementType)(0),                                    // 20: BidRequest.AdSlot.NativePlacementType
	(BidRequest_AdSlot_MediationStatus)(0),                                        // 21: BidRequest.AdSlot.MediationStatus
	(BidRequest_AdSlot_NonBrowserSource)(0),                                       // 22: BidRequest.AdSlot.NonBrowserSource
	(BidRequest_AdSlot_Renderer)(0),                                               // 23: BidRequest.AdSlot.Renderer
	(BidRequest_AdSlot_AmpAdRequestType)(0),                                       // 24: BidRequest.AdSlot.AmpAdRequestType
	(BidRequest_AdSlot_AmpPage)(0),                                                // 25: BidRequest.AdSlot.AmpPage
	(BidRequest_AdSlot_AmpAdRequirementType)(0),                                   // 26: BidRequest.AdSlot.AmpAdRequirementType
	(BidRequest_AdSlot_AllowedAdType)(0),                                          // 27: BidRequest.AdSlot.AllowedAdType
	(BidRequest_AdSlot_APIFramework)(0),                                           // 28: BidRequest.AdSlot.APIFramework
	(BidRequest_AdSlot_AuctionEnvironment)(0),                                     // 29: BidRequest.AdSlot.AuctionEnvironment
	(BidRequest_AdSlot_MatchingAdData_DirectDeal_DealType)(0),                     // 30: BidRequest.AdSlot.MatchingAdData.DirectDeal.DealType
	(BidRequest_AdSlot_MatchingAdData_DirectDeal_CreativeSourceType)(0),           // 31: BidRequest.AdSlot.MatchingAdData.DirectDeal.CreativeSourceType
	(BidRequest_AdSlot_CreativeEnforcementSettings_PolicyEnforcement)(0),          // 32: BidRequest.AdSlot.CreativeEnforcementSettings.PolicyEnforcement
	(BidRequest_AdSlot_CreativeEnforcementSettings_PublisherBlocksEnforcement)(0), // 33: BidRequest.AdSlot.CreativeEnforcementSettings.PublisherBlocksEnforcement
	(BidRequest_AdSlot_NativeAdTemplate_Fields)(0),                                // 34: BidRequest.AdSlot.NativeAdTemplate.Fields
	(BidRequest_AdSlot_NativeAdTemplate_LayoutType)(0),                            // 35: BidRequest.AdSlot.NativeAdTemplate.LayoutType
	(BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings_AutoRefreshType)(0),        // 36: BidRequest.AdSlot.AutoRefresh.AutoRefreshSettings.AutoRefreshType
	(BidRequest_AdSlot_StickySettings_Stickiness)(0),                              // 37: BidRequest.AdSlot.StickySettings.Stickiness
	(BidResponse_Ad_AdSlot_ExchangeDealType)(0),                                   // 38: BidResponse.Ad.AdSlot.ExchangeDealType
	(BidResponse_Ad_AdSlot_FrequencyCap_TimeUnit)(0),                              // 39: BidResponse.Ad.AdSlot.FrequencyCap.TimeUnit
	(BidResponse_Ad_ImpressionTrackingResource_Context)(0),                        // 40: BidResponse.Ad.ImpressionTrackingResource.Context
	(*BidRequest)(nil),                                                            // 41: BidRequest
	(*BidResponse)(nil),                                                           // 42: BidResponse
	(*BidRequest_PrivacyTreatments)(nil),                                          // 43: BidRequest.PrivacyTreatments
	(*BidRequest_UserAgent)(nil),                                                  // 44: BidRequest.UserAgent
	(*BidRequest_Geo)(nil),                                                        // 45: BidRequest.Geo
	(*BidRequest_Hyperlocal)(nil),                                                 // 46: BidRequest.Hyperlocal
	(*BidRequest_HyperlocalSet)(nil),                                              // 47: BidRequest.HyperlocalSet
	(*BidRequest_UserList)(nil),                                                   // 48: BidRequest.UserList
	(*BidRequest_Vertical)(nil),                                                   // 49: BidRequest.Vertical
	(*BidRequest_Device)(nil),                                                     // 50: BidRequest.Device
	(*BidRequest_KeyValue)(nil),                                                   // 51: BidRequest.KeyValue
	(*BidRequest_Mobile)(nil),                                                     // 52: BidRequest.Mobile
	(*BidRequest_Video)(nil),                                                      // 53: BidRequest.Video
	(*BidRequest_AdSlot)(nil),                                                     // 54: BidRequest.AdSlot
	(*BidRequest_BidResponseFeedback)(nil),                                        // 55: BidRequest.BidResponseFeedback
	(*BidRequest_SupplyChain)(nil),                                                // 56: BidRequest.SupplyChain
	(*BidRequest_UserAgent_BrandVersion)(nil),                                     // 57: BidRequest.UserAgent.BrandVersion
	(*BidRequest_Hyperlocal_Point)(nil),                                           // 58: BidRequest.Hyperlocal.Point
	(*BidRequest_Device_OsVersion)(nil),                                           // 59: BidRequest.Device.OsVersion
	(*BidRequest_Mobile_InstalledSdk)(nil),                                        // 60: BidRequest.Mobile.InstalledSdk
	(*BidRequest_Mobile_SKAdNetworkRequest)(nil),                                  // 61: BidRequest.Mobile.SKAdNetworkRequest
	(*BidRequest_Mobile_InstalledSdk_Version)(nil),                                // 62: BidRequest.Mobile.InstalledSdk.Version
	(*BidRequest_Video_CompanionSlot)(nil),                                        // 63: BidRequest.Video.CompanionSlot
	(*BidRequest_Video_ContentAttributes)(nil),                                    // 64: BidRequest.Video.ContentAttributes
	(*BidRequest_AdSlot_FlexibleAdSlotSettings)(nil),                              // 65: BidRequest.AdSlot.FlexibleAdSlotSettings
	(*BidRequest_AdSlot_ConsentedProvidersSettings)(nil),                          // 66: BidRequest.AdSlot.ConsentedProvidersSettings
	(*BidRequest_AdSlot_ExcludedCreative)(nil),                                    // 67: BidRequest.AdSlot.ExcludedCreative
	(*BidRequest_AdSlot_MatchingAdData)(nil),                                      // 68: BidRequest.AdSlot.MatchingAdData
	(*BidRequest_AdSlot_ExchangeBidding)(nil),                                     // 69: BidRequest.AdSlot.ExchangeBidding
	(*BidRequest_AdSlot_OpenBidding)(nil),                                         // 70: BidRequest.AdSlot.OpenBidding
	(*BidRequest_AdSlot_CreativeEnforcementSettings)(nil),                         // 71: BidRequest.AdSlot.CreativeEnforcementSettings
	(*BidRequest_AdSlot_NativeAdTemplate)(nil),                                    // 72: BidRequest.AdSlot.NativeAdTemplate
	(*BidRequest_AdSlot_AutoRefresh)(nil),                                         // 73: BidRequest.AdSlot.AutoRefresh
	(*BidRequest_AdSlot_StickySettings)(nil),                                      // 74: BidRequest.AdSlot.StickySettings
	(*BidRequest_AdSlot_BuyerGeneratedRequestData)(nil),                           // 75: BidRequest.AdSlot.BuyerGeneratedRequestData
	(*BidRequest_AdSlot_MultiAdsCellInfo)(nil),                                    // 76: BidRequest.AdSlot.MultiAdsCellInfo
	(*BidRequest_AdSlot_MatchingAdData_DirectDeal)(nil),                           // 77: BidRequest.AdSlot.MatchingAdData.DirectDeal
	(*BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings)(nil),                     // 78: BidRequest.AdSlot.AutoRefresh.AutoRefreshSettings
	(*BidRequest_AdSlot_BuyerGeneratedRequestData_SourceApp)(nil),                 // 79: BidRequest.AdSlot.BuyerGeneratedRequestData.SourceApp
	(*BidRequest_AdSlot_BuyerGeneratedRequestData_SourceJs)(nil),                  // 80: BidRequest.AdSlot.BuyerGeneratedRequestData.SourceJs
	(*BidRequest_SupplyChain_SupplyChainNode)(nil),                                // 81: BidRequest.SupplyChain.SupplyChainNode
	(*BidResponse_Ad)(nil),                                                        // 82: BidResponse.Ad
	(*BidResponse_Ad_NativeAd)(nil),                                               // 83: BidResponse.Ad.NativeAd
	(*BidResponse_Ad_AdSlot)(nil),                                                 // 84: BidResponse.Ad.AdSlot
	(*BidResponse_Ad_ImpressionTrackingResource)(nil),                             // 85: BidResponse.Ad.ImpressionTrackingResource
	(*BidResponse_Ad_SdkRenderedAd)(nil),                                          // 86: BidResponse.Ad.SdkRenderedAd
	(*BidResponse_Ad_SKAdNetworkResponse)(nil),                                    // 87: BidResponse.Ad.SKAdNetworkResponse
	(*BidResponse_Ad_NativeAd_Image)(nil),                                         // 88: BidResponse.Ad.NativeAd.Image
	(*BidResponse_Ad_AdSlot_FrequencyCap)(nil),                                    // 89: BidResponse.Ad.AdSlot.FrequencyCap
	(*BidResponse_Ad_SdkRenderedAd_DeclaredAd)(nil),                               // 90: BidResponse.Ad.SdkRenderedAd.DeclaredAd
	(*BidResponse_Ad_SKAdNetworkResponse_Fidelity)(nil),                           // 91: BidResponse.Ad.SKAdNetworkResponse.Fidelity
	(*BidResponse_Ad_SKAdNetworkResponse_SKAdNetworkOptions)(nil),                 // 92: BidResponse.Ad.SKAdNetworkResponse.SKAdNetworkOptions
}
var file_googleDspManager_models_proto_r_proto_depIdxs = []int32{
	1,   // 0: BidRequest.user_data_treatment:type_name -> BidRequest.UserDataTreatment
	43,  // 1: BidRequest.privacy_treatments:type_name -> BidRequest.PrivacyTreatments
	44,  // 2: BidRequest.user_agent_data:type_name -> BidRequest.UserAgent
	45,  // 3: BidRequest.geo:type_name -> BidRequest.Geo
	47,  // 4: BidRequest.hyperlocal_set:type_name -> BidRequest.HyperlocalSet
	48,  // 5: BidRequest.user_list:type_name -> BidRequest.UserList
	49,  // 6: BidRequest.detected_vertical:type_name -> BidRequest.Vertical
	2,   // 7: BidRequest.auction_type:type_name -> BidRequest.AuctionType
	50,  // 8: BidRequest.device:type_name -> BidRequest.Device
	51,  // 9: BidRequest.key_value:type_name -> BidRequest.KeyValue
	52,  // 10: BidRequest.mobile:type_name -> BidRequest.Mobile
	53,  // 11: BidRequest.video:type_name -> BidRequest.Video
	3,   // 12: BidRequest.publisher_type:type_name -> BidRequest.PublisherType
	4,   // 13: BidRequest.page_visibility:type_name -> BidRequest.VisibilityState
	54,  // 14: BidRequest.adslot:type_name -> BidRequest.AdSlot
	55,  // 15: BidRequest.bid_response_feedback:type_name -> BidRequest.BidResponseFeedback
	56,  // 16: BidRequest.supply_chain:type_name -> BidRequest.SupplyChain
	5,   // 17: BidRequest.frequency_capping_scope:type_name -> BidRequest.FrequencyCappingScope
	82,  // 18: BidResponse.ad:type_name -> BidResponse.Ad
	6,   // 19: BidRequest.PrivacyTreatments.non_personalized_ads_reason:type_name -> BidRequest.PrivacyTreatments.NonPersonalizedAdsReason
	57,  // 20: BidRequest.UserAgent.DEPRECATED_browser:type_name -> BidRequest.UserAgent.BrandVersion
	57,  // 21: BidRequest.UserAgent.browsers:type_name -> BidRequest.UserAgent.BrandVersion
	57,  // 22: BidRequest.UserAgent.platform:type_name -> BidRequest.UserAgent.BrandVersion
	58,  // 23: BidRequest.Hyperlocal.corners:type_name -> BidRequest.Hyperlocal.Point
	46,  // 24: BidRequest.HyperlocalSet.hyperlocal:type_name -> BidRequest.Hyperlocal
	58,  // 25: BidRequest.HyperlocalSet.center_point:type_name -> BidRequest.Hyperlocal.Point
	7,   // 26: BidRequest.Device.device_type:type_name -> BidRequest.Device.DeviceType
	59,  // 27: BidRequest.Device.os_version:type_name -> BidRequest.Device.OsVersion
	8,   // 28: BidRequest.Device.screen_orientation:type_name -> BidRequest.Device.ScreenOrientation
	9,   // 29: BidRequest.Device.app_tracking_authorization_status:type_name -> BidRequest.Device.AuthorizationStatus
	60,  // 30: BidRequest.Mobile.installed_sdk:type_name -> BidRequest.Mobile.InstalledSdk
	61,  // 31: BidRequest.Mobile.skadn:type_name -> BidRequest.Mobile.SKAdNetworkRequest
	10,  // 32: BidRequest.Video.placement:type_name -> BidRequest.Video.Placement
	11,  // 33: BidRequest.Video.playback_method:type_name -> BidRequest.Video.VideoPlaybackMethod
	12,  // 34: BidRequest.Video.video_ad_skippable:type_name -> BidRequest.Video.SkippableBidRequestType
	13,  // 35: BidRequest.Video.protocols:type_name -> BidRequest.Video.VideoProtocol
	14,  // 36: BidRequest.Video.allowed_video_formats:type_name -> BidRequest.Video.VideoFormat
	63,  // 37: BidRequest.Video.companion_slot:type_name -> BidRequest.Video.CompanionSlot
	15,  // 38: BidRequest.Video.end_cap_support:type_name -> BidRequest.Video.EndCapSupport
	64,  // 39: BidRequest.Video.content_attributes:type_name -> BidRequest.Video.ContentAttributes
	65,  // 40: BidRequest.AdSlot.flexible_adslot_settings:type_name -> BidRequest.AdSlot.FlexibleAdSlotSettings
	66,  // 41: BidRequest.AdSlot.consented_providers_settings:type_name -> BidRequest.AdSlot.ConsentedProvidersSettings
	67,  // 42: BidRequest.AdSlot.excluded_creatives:type_name -> BidRequest.AdSlot.ExcludedCreative
	68,  // 43: BidRequest.AdSlot.matching_ad_data:type_name -> BidRequest.AdSlot.MatchingAdData
	69,  // 44: BidRequest.AdSlot.exchange_bidding:type_name -> BidRequest.AdSlot.ExchangeBidding
	70,  // 45: BidRequest.AdSlot.open_bidding:type_name -> BidRequest.AdSlot.OpenBidding
	71,  // 46: BidRequest.AdSlot.creative_enforcement_settings:type_name -> BidRequest.AdSlot.CreativeEnforcementSettings
	17,  // 47: BidRequest.AdSlot.slot_visibility:type_name -> BidRequest.AdSlot.SlotVisibility
	18,  // 48: BidRequest.AdSlot.iframing_state:type_name -> BidRequest.AdSlot.IFramingState
	19,  // 49: BidRequest.AdSlot.iframing_depth:type_name -> BidRequest.AdSlot.IFramingDepth
	72,  // 50: BidRequest.AdSlot.native_ad_template:type_name -> BidRequest.AdSlot.NativeAdTemplate
	20,  // 51: BidRequest.AdSlot.native_placement_type:type_name -> BidRequest.AdSlot.NativePlacementType
	21,  // 52: BidRequest.AdSlot.mediation_status:type_name -> BidRequest.AdSlot.MediationStatus
	73,  // 53: BidRequest.AdSlot.auto_refresh:type_name -> BidRequest.AdSlot.AutoRefresh
	74,  // 54: BidRequest.AdSlot.sticky_settings:type_name -> BidRequest.AdSlot.StickySettings
	22,  // 55: BidRequest.AdSlot.non_browser_slot_source:type_name -> BidRequest.AdSlot.NonBrowserSource
	23,  // 56: BidRequest.AdSlot.renderer:type_name -> BidRequest.AdSlot.Renderer
	24,  // 57: BidRequest.AdSlot.amp_ad_request_type:type_name -> BidRequest.AdSlot.AmpAdRequestType
	25,  // 58: BidRequest.AdSlot.is_amp_page:type_name -> BidRequest.AdSlot.AmpPage
	26,  // 59: BidRequest.AdSlot.amp_ad_requirement_type:type_name -> BidRequest.AdSlot.AmpAdRequirementType
	27,  // 60: BidRequest.AdSlot.allowed_ad_types:type_name -> BidRequest.AdSlot.AllowedAdType
	75,  // 61: BidRequest.AdSlot.buyer_generated_request_data:type_name -> BidRequest.AdSlot.BuyerGeneratedRequestData
	28,  // 62: BidRequest.AdSlot.api:type_name -> BidRequest.AdSlot.APIFramework
	76,  // 63: BidRequest.AdSlot.multi_ads_cell_info:type_name -> BidRequest.AdSlot.MultiAdsCellInfo
	29,  // 64: BidRequest.AdSlot.auction_environment:type_name -> BidRequest.AdSlot.AuctionEnvironment
	81,  // 65: BidRequest.SupplyChain.nodes:type_name -> BidRequest.SupplyChain.SupplyChainNode
	62,  // 66: BidRequest.Mobile.InstalledSdk.sdk_version:type_name -> BidRequest.Mobile.InstalledSdk.Version
	62,  // 67: BidRequest.Mobile.InstalledSdk.adapter_version:type_name -> BidRequest.Mobile.InstalledSdk.Version
	0,   // 68: BidRequest.Mobile.SKAdNetworkRequest.supported_fidelity_types:type_name -> SKAdNetworkFidelityType
	16,  // 69: BidRequest.Video.CompanionSlot.creative_format:type_name -> BidRequest.Video.CompanionSlot.CreativeFormat
	77,  // 70: BidRequest.AdSlot.MatchingAdData.direct_deal:type_name -> BidRequest.AdSlot.MatchingAdData.DirectDeal
	51,  // 71: BidRequest.AdSlot.ExchangeBidding.key_value:type_name -> BidRequest.KeyValue
	32,  // 72: BidRequest.AdSlot.CreativeEnforcementSettings.policy_enforcement:type_name -> BidRequest.AdSlot.CreativeEnforcementSettings.PolicyEnforcement
	33,  // 73: BidRequest.AdSlot.CreativeEnforcementSettings.publisher_blocks_enforcement:type_name -> BidRequest.AdSlot.CreativeEnforcementSettings.PublisherBlocksEnforcement
	35,  // 74: BidRequest.AdSlot.NativeAdTemplate.style_layout_type:type_name -> BidRequest.AdSlot.NativeAdTemplate.LayoutType
	78,  // 75: BidRequest.AdSlot.AutoRefresh.refresh_settings:type_name -> BidRequest.AdSlot.AutoRefresh.AutoRefreshSettings
	37,  // 76: BidRequest.AdSlot.StickySettings.vertical_stickiness:type_name -> BidRequest.AdSlot.StickySettings.Stickiness
	37,  // 77: BidRequest.AdSlot.StickySettings.top_horizontal_stickiness:type_name -> BidRequest.AdSlot.StickySettings.Stickiness
	37,  // 78: BidRequest.AdSlot.StickySettings.bottom_horizontal_stickiness:type_name -> BidRequest.AdSlot.StickySettings.Stickiness
	79,  // 79: BidRequest.AdSlot.BuyerGeneratedRequestData.source_app:type_name -> BidRequest.AdSlot.BuyerGeneratedRequestData.SourceApp
	80,  // 80: BidRequest.AdSlot.BuyerGeneratedRequestData.source_js:type_name -> BidRequest.AdSlot.BuyerGeneratedRequestData.SourceJs
	30,  // 81: BidRequest.AdSlot.MatchingAdData.DirectDeal.deal_type:type_name -> BidRequest.AdSlot.MatchingAdData.DirectDeal.DealType
	31,  // 82: BidRequest.AdSlot.MatchingAdData.DirectDeal.creative_source:type_name -> BidRequest.AdSlot.MatchingAdData.DirectDeal.CreativeSourceType
	36,  // 83: BidRequest.AdSlot.AutoRefresh.AutoRefreshSettings.refresh_type:type_name -> BidRequest.AdSlot.AutoRefresh.AutoRefreshSettings.AutoRefreshType
	83,  // 84: BidResponse.Ad.native_ad:type_name -> BidResponse.Ad.NativeAd
	84,  // 85: BidResponse.Ad.adslot:type_name -> BidResponse.Ad.AdSlot
	85,  // 86: BidResponse.Ad.impression_tracking_resource:type_name -> BidResponse.Ad.ImpressionTrackingResource
	86,  // 87: BidResponse.Ad.sdk_rendered_ad:type_name -> BidResponse.Ad.SdkRenderedAd
	87,  // 88: BidResponse.Ad.skadn:type_name -> BidResponse.Ad.SKAdNetworkResponse
	88,  // 89: BidResponse.Ad.NativeAd.image:type_name -> BidResponse.Ad.NativeAd.Image
	88,  // 90: BidResponse.Ad.NativeAd.logo:type_name -> BidResponse.Ad.NativeAd.Image
	88,  // 91: BidResponse.Ad.NativeAd.app_icon:type_name -> BidResponse.Ad.NativeAd.Image
	38,  // 92: BidResponse.Ad.AdSlot.exchange_deal_type:type_name -> BidResponse.Ad.AdSlot.ExchangeDealType
	89,  // 93: BidResponse.Ad.AdSlot.frequency_cap:type_name -> BidResponse.Ad.AdSlot.FrequencyCap
	40,  // 94: BidResponse.Ad.ImpressionTrackingResource.context:type_name -> BidResponse.Ad.ImpressionTrackingResource.Context
	90,  // 95: BidResponse.Ad.SdkRenderedAd.declared_ad:type_name -> BidResponse.Ad.SdkRenderedAd.DeclaredAd
	91,  // 96: BidResponse.Ad.SKAdNetworkResponse.fidelities:type_name -> BidResponse.Ad.SKAdNetworkResponse.Fidelity
	92,  // 97: BidResponse.Ad.SKAdNetworkResponse.skadn_options:type_name -> BidResponse.Ad.SKAdNetworkResponse.SKAdNetworkOptions
	39,  // 98: BidResponse.Ad.AdSlot.FrequencyCap.time_unit:type_name -> BidResponse.Ad.AdSlot.FrequencyCap.TimeUnit
	83,  // 99: BidResponse.Ad.SdkRenderedAd.DeclaredAd.native_ad:type_name -> BidResponse.Ad.NativeAd
	0,   // 100: BidResponse.Ad.SKAdNetworkResponse.Fidelity.fidelity_type:type_name -> SKAdNetworkFidelityType
	101, // [101:101] is the sub-list for method output_type
	101, // [101:101] is the sub-list for method input_type
	101, // [101:101] is the sub-list for extension type_name
	101, // [101:101] is the sub-list for extension extendee
	0,   // [0:101] is the sub-list for field type_name
}

func init() { file_googleDspManager_models_proto_r_proto_init() }
func file_googleDspManager_models_proto_r_proto_init() {
	if File_googleDspManager_models_proto_r_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_googleDspManager_models_proto_r_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_PrivacyTreatments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_UserAgent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Geo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Hyperlocal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_HyperlocalSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_UserList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Vertical); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_KeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Mobile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Video); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_AdSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_BidResponseFeedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_SupplyChain); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_UserAgent_BrandVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Hyperlocal_Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Device_OsVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Mobile_InstalledSdk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Mobile_SKAdNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Mobile_InstalledSdk_Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Video_CompanionSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_Video_ContentAttributes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_AdSlot_FlexibleAdSlotSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_AdSlot_ConsentedProvidersSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_AdSlot_ExcludedCreative); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_AdSlot_MatchingAdData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_AdSlot_ExchangeBidding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_AdSlot_OpenBidding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_AdSlot_CreativeEnforcementSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_AdSlot_NativeAdTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_AdSlot_AutoRefresh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_AdSlot_StickySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_AdSlot_BuyerGeneratedRequestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_AdSlot_MultiAdsCellInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_AdSlot_MatchingAdData_DirectDeal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_AdSlot_AutoRefresh_AutoRefreshSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_AdSlot_BuyerGeneratedRequestData_SourceApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_AdSlot_BuyerGeneratedRequestData_SourceJs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidRequest_SupplyChain_SupplyChainNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidResponse_Ad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidResponse_Ad_NativeAd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidResponse_Ad_AdSlot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidResponse_Ad_ImpressionTrackingResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidResponse_Ad_SdkRenderedAd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidResponse_Ad_SKAdNetworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidResponse_Ad_NativeAd_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidResponse_Ad_AdSlot_FrequencyCap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidResponse_Ad_SdkRenderedAd_DeclaredAd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidResponse_Ad_SKAdNetworkResponse_Fidelity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_googleDspManager_models_proto_r_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidResponse_Ad_SKAdNetworkResponse_SKAdNetworkOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_googleDspManager_models_proto_r_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*BidRequest_AdSlot_BuyerGeneratedRequestData_SourceApp_)(nil),
		(*BidRequest_AdSlot_BuyerGeneratedRequestData_SourceJs_)(nil),
	}
	file_googleDspManager_models_proto_r_proto_msgTypes[42].OneofWrappers = []interface{}{
		(*BidResponse_Ad_NativeAd_VideoUrl)(nil),
		(*BidResponse_Ad_NativeAd_VideoVastXml)(nil),
	}
	file_googleDspManager_models_proto_r_proto_msgTypes[49].OneofWrappers = []interface{}{
		(*BidResponse_Ad_SdkRenderedAd_DeclaredAd_HtmlSnippet)(nil),
		(*BidResponse_Ad_SdkRenderedAd_DeclaredAd_VideoUrl)(nil),
		(*BidResponse_Ad_SdkRenderedAd_DeclaredAd_VideoVastXml)(nil),
		(*BidResponse_Ad_SdkRenderedAd_DeclaredAd_NativeAd)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_googleDspManager_models_proto_r_proto_rawDesc,
			NumEnums:      41,
			NumMessages:   52,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_googleDspManager_models_proto_r_proto_goTypes,
		DependencyIndexes: file_googleDspManager_models_proto_r_proto_depIdxs,
		EnumInfos:         file_googleDspManager_models_proto_r_proto_enumTypes,
		MessageInfos:      file_googleDspManager_models_proto_r_proto_msgTypes,
	}.Build()
	File_googleDspManager_models_proto_r_proto = out.File
	file_googleDspManager_models_proto_r_proto_rawDesc = nil
	file_googleDspManager_models_proto_r_proto_goTypes = nil
	file_googleDspManager_models_proto_r_proto_depIdxs = nil
}
